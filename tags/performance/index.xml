<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on Leipzig Gophers</title>
    <link>https://golangleipzig.space/tags/performance/</link>
    <description>Recent content in performance on Leipzig Gophers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Mar 2024 12:00:01 +0100</lastBuildDate><atom:link href="https://golangleipzig.space/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Faster XML processing in Go</title>
      <link>https://golangleipzig.space/posts/faster-go-xml-processing/</link>
      <pubDate>Tue, 26 Mar 2024 12:00:01 +0100</pubDate>
      
      <guid>https://golangleipzig.space/posts/faster-go-xml-processing/</guid>
      <description>Prelude Go supports XML processing in the standard library package encoding/xml. The Marshal and Unmarshal function will use a Encoder and Decoder under the hood, as these are more general.
With a Decoder it is possible to iterate over a large number of XML elements and to deserialize data in a way that will limit memory consumption. Here is a playground example for using a decoder to repeatedly parse elements from a Reader: efY60PYLFm8.</description>
    </item>
    
  </channel>
</rss>
