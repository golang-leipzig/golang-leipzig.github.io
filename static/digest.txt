Directory structure:
└── content/
    ├── _index.md
    ├── clt23.md
    ├── proposals.md
    └── posts/
        ├── 2021.md
        ├── 2022.md
        ├── 2023.md
        ├── 2024.md
        ├── bigcode-in-the-stack.md
        ├── bye-2019.md
        ├── clt23.md
        ├── decentralized-storage-summit-berlin.md
        ├── faster-go-xml-processing.md
        ├── first-meetup-date-is-fixed-2019-02-08.md
        ├── first-meetup-invitation.md
        ├── go-at-coding-leipzig-chapter-four.md
        ├── go-at-spartakiade-2019-berlin.md
        ├── go-cloud-native-split.md
        ├── go-devopenspace-2023.md
        ├── go-heise-frontpage.md
        ├── go-tech-lunch-dates-2024.md
        ├── golab-2024.md
        ├── hackolaus-2-hack-for-good.md
        ├── meetup-10-invitation.md
        ├── meetup-10-wrapup.md
        ├── meetup-11-invitation.md
        ├── meetup-11-wrapup.md
        ├── meetup-12-invitation.md
        ├── meetup-12-wrapup.md
        ├── meetup-13-invitation.md
        ├── meetup-13-wrapup.md
        ├── meetup-14-invitation.md
        ├── meetup-14-wrapup.md
        ├── meetup-15-invitation.md
        ├── meetup-15-wrapup.md
        ├── meetup-16-invitation.md
        ├── meetup-16-wrapup.md
        ├── meetup-17-invitation.md
        ├── meetup-17-wrapup.md
        ├── meetup-18-invitation.md
        ├── meetup-18-wrapup.md
        ├── meetup-19-invitation.md
        ├── meetup-19-wrapup.md
        ├── meetup-20-invitation.md
        ├── meetup-20-wrapup.md
        ├── meetup-21-invitation.md
        ├── meetup-21-wrapup.md
        ├── meetup-22-invitation.md
        ├── meetup-22-wrapup.md
        ├── meetup-23-invitation.md
        ├── meetup-23-wrapup.md
        ├── meetup-24-invitation.md
        ├── meetup-24-wrapup.md
        ├── meetup-25-invitation.md
        ├── meetup-25-wrapup.md
        ├── meetup-26-invitation.md
        ├── meetup-26-wrapup.md
        ├── meetup-27-invititation.md
        ├── meetup-27-wrapup.md
        ├── meetup-28-invititation.md
        ├── meetup-28-wrapup.md
        ├── meetup-29-invitation.md
        ├── meetup-29-wrapup.md
        ├── meetup-3-invitation.md
        ├── meetup-3-wrapup.md
        ├── meetup-30-invitation.md
        ├── meetup-30-wrapup.md
        ├── meetup-31-invitation.md
        ├── meetup-31-wrapup.md
        ├── meetup-32-invitation.md
        ├── meetup-32-wrapup.md
        ├── meetup-33-invitation.md
        ├── meetup-33-wrapup.md
        ├── meetup-34-invitation.md
        ├── meetup-34-wrapup.md
        ├── meetup-35-invitation.md
        ├── meetup-35-wrapup.md
        ├── meetup-36-invitation.md
        ├── meetup-36-wrapup.md
        ├── meetup-37-notice.md
        ├── meetup-38-invitation.md
        ├── meetup-38-wrapup.md
        ├── meetup-39-invitation.md
        ├── meetup-39-wrapup.md
        ├── meetup-4-invitation.md
        ├── meetup-4-wrapup.md
        ├── meetup-40-invitation.md
        ├── meetup-40-wrapup.md
        ├── meetup-41-invitation.md
        ├── meetup-41-wrapup.md
        ├── meetup-42-invitation.md
        ├── meetup-42-wrapup.md
        ├── meetup-43-invitation.md
        ├── meetup-43-wrapup.md
        ├── meetup-44-invitation.md
        ├── meetup-44-wrapup.md
        ├── meetup-45-invitation.md
        ├── meetup-45-wrapup.md
        ├── meetup-46-invitation.md
        ├── meetup-46-wrapup.md
        ├── meetup-47-invitation.md
        ├── meetup-47-wrapup.md
        ├── meetup-48-invitation.md
        ├── meetup-48-wrapup.md
        ├── meetup-49-invitation.md
        ├── meetup-49-wrapup.md
        ├── meetup-5-invitation.md
        ├── meetup-5-wrapup.md
        ├── meetup-50-invitation.md
        ├── meetup-50-wrapup.md
        ├── meetup-51-invitation.md
        ├── meetup-51-wrapup.md
        ├── meetup-52-invitation.md
        ├── meetup-52-wrapup.md
        ├── meetup-53-invitation.md
        ├── meetup-6-invitation.md
        ├── meetup-6-wrapup.md
        ├── meetup-7-invitation.md
        ├── meetup-7-wrapup.md
        ├── meetup-8-invitation.md
        ├── meetup-8-wrapup.md
        ├── meetup-9-invitation.md
        ├── meetup-9-wrapup.md
        ├── meetup-launched.md
        ├── new-meetup-group.md
        ├── second-meetup-call-for-input.md
        ├── second-meetup-invitation.md
        ├── second-meetup-wrapup.md
        ├── software-craft-state-of-go-2022.md
        └── welcome-2021.md

================================================
FILE: _index.md
================================================
---
title: "Leipzig Gophers"
draft: false
---

We're hosting a [Go](https://go.dev/) [Meetup in
Leipzig](https://www.meetup.com/de-DE/leipzig-golang/) and have organized over
50 events so far (eight in [2024](/posts/2024/)). Over the summer, we'll meet
for drinks, outside. Next [Drinkup
#53](https://golangleipzig.space/posts/meetup-53-invitation/) on [Tue,
2025-07-15 19:00](https://www.meetup.com/leipzig-golang/events/308938518). Next
scheduled meetup [#54](https://www.meetup.com/leipzig-golang/events/305626262)
in September, on
[2025-09-30](https://www.meetup.com/leipzig-golang/events/305626262).


If you have an idea for a presentation, please [let us know](/proposals/).

<!-- Please visit [our meetup page](https://www.meetup.com/Leipzig-Golang/) for
information about upcoming events.

-->


----

Since Summer 2021, we have a [YouTube
Channel](https://www.youtube.com/channel/UCFDzViL6Bo0w2AG23Q0_rZQ) where we are
publishing recordings of selected talks ([archive](https://archive.org/details/leipzig-gophers-recordings)).
If you have an idea for a presentation, please [let us know](/proposals/).

----

{{< h2 >}}About{{< /h2 >}}

Our goal is to establish a place, where people from all backgrounds interested
in the Go programming language (golang) and various cloud technologies can meet, learn,
share experiences, present, discuss and network.

[![Depiction of a Leipzig Gopher](/leipzig-gopher.png)](/leipzig-gopher.svg)

Current organizers are [Martin](https://github.com/miku/),
[Andreas](https://github.com/klingtnet), [Simon](https://github.com/simonbaeumer) and friends and we are inviting
everyone to participate.

{{< h2 >}}How to participate{{< /h2 >}}

* follow us on [meetup](https://www.meetup.com/Leipzig-Golang) for updates, or via [RSS feed](/posts/index.xml)
* [tell us](https://www.meetup.com/Leipzig-Golang/#discussions) about topics that you'd like to see covered in this context
* submit a [talk proposal](/proposals/)
* join
  [us](https://www.meetup.com/Leipzig-Golang/members/?op=leaders)
organizing this (just [drop us an email](mailto:martin.czygan@gmail.com); we
have a few nice ideas for events already, but help is always appreciated)

{{< h2 >}}Want to host a meetup at your company?{{< /h2 >}}

Your company uses Go or wants to look into it? Why not connect with the local
Go community by hosting a user group event? We do have presentations on
interesting technical topics and spark lively discussions. If you are
interested, [let's talk](mailto:martin.czygan@gmail.com).


{{< h2 >}}Meetup log{{< /h2 >}}

We try to sum up every meetup in a short blog post:
[#52](/posts/meetup-52-wrapup/),
[#51](/posts/meetup-51-wrapup/),
[#50](/posts/meetup-50-wrapup/),
[#49](/posts/meetup-49-wrapup/),
[#48](/posts/meetup-48-wrapup/),
[#47](/posts/meetup-47-wrapup/),
[#46](/posts/meetup-46-wrapup/),
[#45](/posts/meetup-45-wrapup/),
[#44](/posts/meetup-44-wrapup/),
[#43](/posts/meetup-43-wrapup/),
[#42](/posts/meetup-42-wrapup/),
[#41](/posts/meetup-41-wrapup/),
[#40](/posts/meetup-40-wrapup/),
[#39](/posts/meetup-39-wrapup/),
[#38](/posts/meetup-38-wrapup/),
[#37](/posts/meetup-37-notice/),
[#36](/posts/meetup-36-wrapup/),
[#35](/posts/meetup-35-wrapup/),
[#34](/posts/meetup-34-wrapup/),
[#33](/posts/meetup-33-wrapup/),
[#32](/posts/meetup-32-wrapup/),
[#31](/posts/meetup-31-wrapup/),
[#30](/posts/meetup-30-wrapup/),
[#29](/posts/meetup-29-wrapup/),
[#28](/posts/meetup-28-wrapup/),
[#27](/posts/meetup-27-wrapup/),
[#26](/posts/meetup-26-wrapup/),
[#25](/posts/meetup-25-wrapup/),
[#24](/posts/meetup-24-wrapup/),
[#23](/posts/meetup-23-wrapup/),
[#22](/posts/meetup-22-wrapup/),
[#21](/posts/meetup-21-wrapup/),
[#20](/posts/meetup-20-wrapup/),
[#19](/posts/meetup-19-wrapup/),
[#18](/posts/meetup-18-wrapup/),
[#17](/posts/meetup-17-wrapup/),
[#16](/posts/meetup-16-wrapup/),
[#15](/posts/meetup-15-wrapup/),
[#14](/posts/meetup-14-wrapup/),
[#13](/posts/meetup-13-wrapup/),
[#12](/posts/meetup-12-wrapup/),
[#11](/posts/meetup-11-wrapup/),
[#10](/posts/meetup-10-wrapup/),
[#9](/posts/meetup-9-wrapup/),
[#8](/posts/meetup-8-wrapup/),
[#7](/posts/meetup-7-wrapup/),
[#6](/posts/meetup-6-wrapup/),
[#5](/posts/meetup-5-wrapup/),
[#4](/posts/meetup-4-wrapup/),
[#3](/posts/meetup-3-wrapup/),
[#2](/posts/second-meetup-wrapup/),
[#1](/posts/meetup-launched/) · [2024](/posts/2024/),
[2023](/posts/2023/),
[2022](/posts/2022),
[2021](/posts/2021/),
[2020](/posts/welcome-2021/), [2019](/posts/bye-2019/).

{{< h2 >}} Contributions and Sponsors {{< /h2 >}}

We'd like to thank [edgeless systems](https://www.edgeless.systems)
([#22](/posts/meetup-22-wrapup/)),
[sciendis](https://www.sciendis.de/)
([#23](/posts/meetup-23-wrapup/)),
[CodeNotary](https://codenotary.com/)
([#30](/posts/meetup-30-wrapup/)), [Deta
Cloud](https://deta.space/)
([#31](/posts/meetup-31-wrapup/)),
[Gridfuse](https://gridfuse.com/)
([#32](/posts/meetup-32-wrapup/),
[#43](/posts/meetup-43-wrapup/), [#51](/posts/meetup-51-wrapup)),
[Encore](https://encore.dev)
([#36](/posts/meetup-36-wrapup/)),
[CHECK24](https://www.check24.de/)
([#38](/posts/meetup-38-wrapup/),
[#42](/posts/meetup-42-wrapup/),
[#45](/posts/meetup-45-wrapup/),
[#49](/posts/meetup-49-wrapup/)), [Ardan
Labs](https://ardanlabs.com)
([#40](/posts/meetup-40-wrapup/)) and
[GOLAB](https://golab.io) for their contributions and [Basislager Leipzig](https://basislager.co), [Manning
Publications](https://www.manning.com/), [O'Reilly
Media](https://www.oreilly.com/pub/cpc/323592) and
[Jetbrains](https://www.jetbrains.com/) for their support.

<!--
[![oreilly logo](/images/oreilly-50.jpg)](https://www.oreilly.com/pub/cpc/323592)
[![codenotary logo](/downloads/codenotary-logo-brand-blue-50.png)](https://codenotary.com)
[![manning logo](/images/Manninglogo_outline-10.png)](https://manning.com)
-->

If you are interested in supporting us, please [reach
out](mailto:martin.czygan@gmail.com); for activities around sponsoring, see:
[Sponsoring.md](https://git.io/JDIwz).

<!-- [![](https://www.oreilly.com/partner_file/oreilly.jpg)](https://www.oreilly.com/pub/cpc/323592) -->



================================================
FILE: clt23.md
================================================
---
title: "CLT23"
date: 2023-01-11T14:00:00+02:00
draft: false
---

<!-- Note to self: change date to 2023-01-11 to 2023-03-11 before talk -->

## Hello [CLT23](https://chemnitzer.linux-tage.de/2023)!

This is a hop between the go tool requesting the latest version of
**golangleipzig.space/clt23** and the
[repository](https://github.com/golang-leipzig/clt23/) hosting the actual code ([234](https://chemnitzer.linux-tage.de/2023/de/programm/beitrag/234)).


    $ go install golangleipzig.space/clt23@latest
    $ clt23

If you want to bypass the default module proxy (e.g. to circumvent caching in the proxy), you can use:

    $ GOPRIVATE="*" go install golangleipzig.space/clt23@latest

If you take a look a the [source of this
page](view-source:https://golangleipzig.space/clt23/), you'll discover the
*go-import* meta tag. The go install flow is visualized below.

[![](/images/go-install-flow.png)](https://github.com/golang-leipzig/clt23/)




================================================
FILE: proposals.md
================================================
---
title: "Talk Proposals"
date: 2023-01-02T10:00:00+02:00
draft: false
tags:
- talk
- proposal
- admin
---

## Talk Proposals

Thanks for your interest in giving a presentation at Leipzig Gophers, we appreciate your input.

As for topics, we are interested in anything related to the Go programming
language, including its uses, e.g. in the cloud and infrastructure domain, side
projects, experiences from real world applications, and other topics. In the
[past](https://golangleipzig.space/tags/summary/), we had presentations on a
wide range of topics, from language features, concurrency, networking,
container technology, machine learning, tools, testing, security, databases,
and much more.

### Formats

We are very flexible concerning formats, here are some examples:

* lightning talk (5 min)
* short talk (up to 15 min)
* presentation (up to 45 min)
* interactive format (e.g. mob programming, workshop, ... - up to 90 min)

### Submit

To submit a talk proposal use one of the following channels.

* send us an [email](mailto:martin.czygan+golangleipzig.space@gmail.com) with an idea and/or abstract
* if you have an account on meetup.com you can DM the [organizers of the meetup group](https://www.meetup.com/leipzig-golang/members/?op=leaders) or leave a note in the [group discussions](https://www.meetup.com/Leipzig-Golang/#discussions)
* if you have a GitHub account, you can also [leave an issue](https://github.com/golang-leipzig/golang-leipzig.github.io/issues/new?template=talk-proposal.md&title=[Talk%20Title]) on this websites repository
* drop by any event and just let us know

Looking forward to hear from you.




================================================
FILE: posts/2021.md
================================================
---
title: "2021"
date: 2021-12-29T22:00:00+02:00
draft: false
tags:
- 2021
---

Unfortunately, most of the meetups were remote-only again in 2021 - however, on
the plus side:

* we started the year with a new Leipzig Gopher mascot - thanks [@klingtnet](https://www.klingt.net/)
* we grew from 194 to 324 [members](https://www.meetup.com/Leipzig-Golang/) in just eleven months 📈
* we had nine events, eight online, one offline ([#20](https://golangleipzig.space/posts/meetup-20-invitation/))
* we had presentations from two German startup companies ([#22](https://golangleipzig.space/posts/meetup-22-wrapup/), [#23](https://golangleipzig.space/posts/meetup-23-wrapup/))
* we started a [YouTube channel](https://www.youtube.com/channel/UCFDzViL6Bo0w2AG23Q0_rZQ) (thanks [@embano1](https://twitter.com/embano1/)), recorded three great talks (18 subscribers, 330+ views) 📹
* we had a first (X-mas 🎄) quiz night ([#24](https://golangleipzig.space/posts/meetup-24-wrapup/)) on Go and some [Go gotchas](https://github.com/golang-leipzig/gotchas) and found great sponsors like [Jetbrains](https://jetbrains.com/), [O'Reilly Media](https://www.oreilly.com/pub/cpc/323592), [Manning Publications](https://www.manning.com/) and [About You](https://www.aboutyou.com/) ([jobs](https://corporate.aboutyou.de/en/jobs/senior-golang-developer)) 🎁
* we continued to have people joining from around the world, which is incredible 🌐
* we had a lovely time hosting the meetup and hope you had that too

Thanks everyone for participating, we hope to [see you again](https://www.meetup.com/Leipzig-Golang/) in 2022!



================================================
FILE: posts/2022.md
================================================
---
title: "2022"
date: 2022-12-31T16:00:00+02:00
draft: false
tags:
- 2022
---

![the bigger the interface the weaker the abstraction expressionist painting](/images/DALL·E_2022-12-31_16.39.07_-_the_bigger_the_interface_the_weaker_the_abstraction_expressionist_painting_30.png)

From an [email exchange](https://www.airs.com/blog/archives/559) in November 2009 (a few weeks after the [first presentation on Go](https://www.youtube.com/watch?v=rKnDgT73v8s)):

> It seems to me that these functions [[append, copy](https://go.dev/ref/spec#Appending_and_copying_slices)] are not useful if we figure out a way to
> implement **generics**. Not necessarily a strong argument against them, I
> suppose, but do we want to introduce new builtin functions if we may not need
> them?

About 4500 days and many proposals later, [Go 1.18](https://go.dev/blog/go1.18) is released, including support for [parameterized types](https://go.dev/ref/spec#Type_parameter_declarations):

> Supporting generics has been Go's most often requested feature, and we're
> proud to deliver the generic support that the majority of users need today.
> Subsequent releases will provide additional support for some of the more
> complicated generic use cases.

We discussed generics at our first meetup this year: [#25](https://golangleipzig.space/posts/meetup-25-wrapup/). A few more things that happened in 2022:

* we organized nine events this year 📅
* we grew [our meetup](https://www.meetup.com/Leipzig-Golang/) from 324 to 495 members, our biggest increase in a year to date 🧮
* we had an algorithm challenge (mob programming) format in [#27](https://golangleipzig.space/posts/meetup-27-wrapup/) 📝
* we visited our friends from [Leipzig Software Craft Meetup](https://www.meetup.com/le-software-craft-community/) and talked about [The state of Go in 2022](https://github.com/golang-leipzig/state-of-go-in-2022/blob/main/Slides.md) 👋
* we collaborated with three awesome startups: [CodeNotary](https://codenotary.com/) ([#30](https://golangleipzig.space/posts/meetup-30-wrapup/)), [Deta](https://deta.space/) ([#31](https://golangleipzig.space/posts/meetup-31-wrapup/)) and [Gridfuse](https://gridfuse.com/) ([#32](https://golangleipzig.space/posts/meetup-32-wrapup/)) and learned about their use of Go for their core products [☳](https://en.wikipedia.org/wiki/Bagua#Trigrams)
* we went back to hybrid meetups and offline drinkups ([#29](https://golangleipzig.space/posts/meetup-29-invitation/), [#33](https://golangleipzig.space/posts/meetup-33-wrapup/))
* the offline events took place in various locations: [Basislager](https://www.basislager.co/), [Lancaster University](https://www.lancasterleipzig.de/) Campus, [Design Offices Leipzig](https://www.designoffices.de/standorte/buero-mieten-leipzig/leipzig-post), [Soltmann Bar](https://www.soltmann-bar.de/), [Café Cantona](https://www.google.com/search?q=cafe+cantona+leipzig) 📍
* we gave away books from our generous sponsors [Manning Publications](https://www.manning.com/) and [O'Reilly Media](https://www.oreilly.com/pub/cpc/323592) as well as other goodies like stickers, pins, posters and a [Zimaboard](https://www.zimaboard.com/) &mdash; 🙏 sponsors
* we [printed postcards](/images/video_2022-12-22_16-47-20_golangleipzig_postcard_unboxing.mp4) with our [cute gopher mascot](https://github.com/golang-leipzig/leipzig-gopher) 📮

Thanks everyone for participating, we hope to [see you again](https://www.meetup.com/Leipzig-Golang/) in 2023!

----

> Image credit: [DALL-E](https://en.wikipedia.org/wiki/DALL-E), "[the bigger the interface, the weaker the abstraction](https://go-proverbs.github.io/)", expressionist painting



================================================
FILE: posts/2023.md
================================================
---
title: "2023"
date: 2023-12-21T02:00:00+01:00
draft: false
tags:
- 2023
---

In 2023 [large language
models](https://en.wikipedia.org/wiki/Large_language_model) and [generative
AI](https://en.wikipedia.org/wiki/Generative_artificial_intelligence) captured
many minds - fewer know that the official Go repository included code
to train a statistical language [model](https://go.dev/doc/codewalk/markov/) (and to respond to prefixes) since [Aug 17,
2011](https://github.com/golang/go/commit/2a189845b619ec27772d4b21d2a3cb9e27d5fbb8), which is based on chapter 3.1 from [The Practice of
Programming](https://en.wikipedia.org/wiki/The_Practice_of_Programming) (1999),
which in turn took inspiration from [Dewdney, A. K](https://en.wikipedia.org/wiki/A._K._Dewdney#Computing,_mathematics,_and_science). (1989), [COMPUTER
RECREATIONS. Scientific American, 260(6), 122–125](https://archive.org/details/ComputerRecreationsMarkovChainer) (the trace continues further to [Shannon](https://www.princeton.edu/~wbialek/rome/refs/shannon_51.pdf), 1951 and [Markov](http://www.alpha60.de/research/markov/DavidLink_AnExampleOfStatistical_MarkovTrans_2007.pdf), 1913)

[![](/images/computer-recreations-markov-page-1-50.png)](https://archive.org/details/ComputerRecreationsMarkovChainer)

What else happened?

* we organized six [events](https://golangleipzig.space/tags/summary/) in 2023 and grew from 495 to [577 members](https://www.meetup.com/Leipzig-Golang/)
* we covered Go 1.20 in [#34](https://golangleipzig.space/posts/meetup-34-wrapup/) and kept discussing new developments (like [slog](https://go.dev/blog/slog), [enhanced ServeMux routing](https://github.com/golang/go/issues/61410), ...) in Go throughout the year
* we collaborated with cloud startup [encore.dev](https://encore.dev) for
  [#36](https://golangleipzig.space/posts/meetup-36-wrapup/) ([recording](https://www.youtube.com/watch?v=yYEXDmy3zUA)) and [CHECK24](https://check24.de), which was a wonderful meetup host for
[#38](https://golangleipzig.space/posts/meetup-38-wrapup/) - thanks for your contributions!
* we participated in [Chemnitz Linux Days](https://golangleipzig.space/posts/clt23/) and did a presentation on [Sustainability and security in the Go ecosystem](https://github.com/miku/goeco)
* AI sneaked into our events in
  [#35](https://golangleipzig.space/posts/meetup-35-wrapup/) and
[#38](https://golangleipzig.space/posts/meetup-38-wrapup/) where we used C/GO
to interface with [ggml](http://ggml.ai/) and [tried out](https://github.com/miku/localmodels)
[ollama](https://ollama.ai/), respectively - a total of four ([here](https://golangleipzig.space/images/578575.gif) and
[here](https://golangleipzig.space/meetup-38-llm-haiku/meetup-38-llm-haiku.pdf))
computer-generated haikus have been recorded (we used CPUs and local models only)
* we brought together people from various backgrounds and hope to do more of
  that in 2024 (if you have an idea for a presentation for one of our meetups, please [let us
know](https://golangleipzig.space/proposals/))

Thanks everyone for joining, we hope to [see you again](https://www.meetup.com/Leipzig-Golang/) in 2024!




================================================
FILE: posts/2024.md
================================================
---
title: "2024"
date: 2024-12-31T22:00:00+01:00
draft: false
tags:
- 2024
---

Go turned [15 years](https://go.dev/blog/15years) in 2024, our meetup will turn six and just as Go we continue to grow.

> Go’s user base has more than tripled in the past five years, making it one of
> the fastest growing languages. From its beginnings just fifteen years ago, Go
> has become a top 10 language and the language of the modern cloud. --
> [15years](https://go.dev/blog/15years)

Our year summarized:

* we organized eight [events](https://golangleipzig.space/tags/summary/) in
  2024, plus seven open [tech
lunches](https://golangleipzig.space/posts/go-tech-lunch-dates-2024/) and grew
from 577 to [695 members](https://www.meetup.com/Leipzig-Golang/) - big 🙏 to
[Basislager Coworking](https://basislager.co) for providing a great venue for
many of our events ([#40](https://golangleipzig.space/posts/meetup-40-wrapup),
[#41](https://golangleipzig.space/posts/meetup-41-wrapup),
[#44](https://golangleipzig.space/posts/meetup-44-wrapup),
[#46](https://golangleipzig.space/posts/meetup-46-wrapup))
* we collaborated with two local companies again: [Gridfuse](https://gridfuse.com) ([#43](https://golangleipzig.space/posts/meetup-43-wrapup/)) and
  [CHECK24](https://check24.de) ([#42](https://golangleipzig.space/posts/meetup-42-wrapup/), [#45](https://golangleipzig.space/posts/meetup-45-wrapup/)) &mdash; thanks for being such great hosts!
* [Bill Kennedy](https://www.linkedin.com/in/william-kennedy-5b318778/) from [Ardan Labs](https://ardanlabs.com) kicked off our year with a presentation on data-oriented [DDD](https://de.wikipedia.org/wiki/Domain-driven_Design) in [#40](https://golangleipzig.space/posts/meetup-40-wrapup/)
* we had many cool demos of open source tools by their authors this year:
[ekstatic](https://github.com/Metamogul/ekstatic),
[gocoverageplus](https://github.com/Fabianexe/gocoverageplus),
[timestone](https://github.com/Metamogul/timestone),
[go-journald-exporter](https://gitlab.com/leandrosansilva/go-journald-exporter),
[gh-workflow-stats-action](https://github.com/neondatabase/gh-workflow-stats-action/)
plus lots of nice everyday utilities and techniques people shared in
[#44](https://golangleipzig.space/posts/meetup-44-wrapup/)
* Performance played a role: [SIMD](https://en.wikipedia.org/wiki/Single_instruction,_multiple_data) and [1BRC](https://web.archive.org/web/20241116164008/https://1brc.dev/) (1 Billion Row Challenge) were discussed in
  [#42](https://golangleipzig.space/posts/meetup-42-wrapup/) and we turned
the 1BRC into a workshop for the international
[GOLAB](https://golangleipzig.space/posts/golab-2024/) conference in Florence, Italy: [Exercises in
performance optimizations](https://github.com/miku/expo) --
[SWAR](https://en.wikipedia.org/wiki/SWAR) was one of the cute,
[classic](https://lamport.azurewebsites.net/pubs/multiple-byte.pdf) techniques used
to crunchs through 1B rows in a matter of seconds

Thanks everyone for joining, we hope to [see you again](https://www.meetup.com/Leipzig-Golang/) in 2025!




================================================
FILE: posts/bigcode-in-the-stack.md
================================================
---
title: "In The Stack"
date: 2023-05-16T10:00:00+02:00
draft: false
tags:
- ai
- dataset
- llm
---

## In The Stack

The AI space develops fast, with one cornerstone being the availability of open
datasets for model development and training. Code from
[golang-leipzig](https://github.com/golang-leipzig) is part of [The
Stack](https://www.bigcode-project.org/docs/about/the-stack/) ([20 Nov
2022](https://arxiv.org/abs/2211.15533)):

> a 6.4 TB dataset of permissively licensed source code in 358 programming
> languages.

Five of our repositories are included in the [25.74 GB of source code](https://arxiv.org/pdf/2305.06161.pdf#page=7) (spread across
4,730,461 files) written in Go included in this dataset.

![](/images/sidewalk.png)

Transparency is a key factor in the development of datasets and derived models.
To check, whether your code is included, visit: [Am I in The Stack?](https://huggingface.co/spaces/bigcode/in-the-stack)

[May the source be with you](https://arxiv.org/abs/2305.06161)! [Playground](https://huggingface.co/spaces/HuggingFaceH4/starchat-playground).




================================================
FILE: posts/bye-2019.md
================================================
---
title: "Thanks and to the future!"
date: 2019-12-31T13:00:00+02:00
draft: false
tags:
- 2020
---

Thanks everyone for joining our
[meetup](https://www.meetup.com/Leipzig-Golang/) (we currently have 111
members), being curious about Go and for sharing your projects and topics in
2019. We hope you had as much fun as we had.

The future of Go seems bright, the language and ecosystem being so
[versatile](https://media.ccc.de/v/36c3-10597-tamago_-_bare_metal_go_framework_for_arm_socs),
[cloud-friendly](https://thenewstack.io/go-the-programming-language-of-the-cloud/)
and [popular](https://madnight.github.io/githut/#/pull_requests/2019/3).

Let's explore this future together in 2020!

![](/images/byegophers19.jpg)




================================================
FILE: posts/clt23.md
================================================
---
title: "CLT23"
date: 2023-03-13T12:00:00+02:00
draft: false
tags:
- summary
- conference
---

## CLT23

We briefly presented at the annual [Chemnitz Linux
Days](https://chemnitzer.linux-tage.de/2023/en/programm/vortraege) (CLT)
conference on 2023-03-11. The topic was [Sustainability and Security in the Go
ecosystem](https://github.com/miku/goeco), collecting a few thoughts starting
from the ACM Queue article [Surviving Software
Dependencies](https://doi.org/10.1145/3329781.3344149) (2019).

Keywords: security, data breach, dependency management, distributed package management, [OSV](https://ossf.github.io/osv-schema/), vulnerability scanning.

We prepared a demo for the vanity URL import supported by Go package system - check out [clt23](https://golangleipzig.space/clt23/) or try:

```
$ go install golangleipzig.space/clt23@latest
$ clt23
```

CLT is a nice event to learn and connect with people from the open source community.

![](/images/nhsg.jpg)


----

[Join our meetup](https://www.meetup.com/Leipzig-Golang/) to get notified of upcoming events.




================================================
FILE: posts/decentralized-storage-summit-berlin.md
================================================
---
title: "Decentralized Storage Summit Berlin"
date: 2019-07-29T00:12:00+01:00
draft: false
tags:
- conference
- storage
---

In [Meetup #4](https://golangleipzig.space/posts/meetup-4-wrapup/) we learned
about a Go project using the Lightning Network. Many more projects in the
Cryptocurrenty space use Go, such
[filecoin](https://github.com/filecoin-project/go-filecoin), [subprojects from
sia](https://gitlab.com/NebulousLabs) and many more.

If you are excited about these technologies, why not attend the
Decentralized Storage Summit at TU Berlin on Friday, August 23, 2019?

Here's a link to a discount code to get in for free:

* [https://www.eventbrite.com/e/decentralised-storage-summit-tickets-62719912948?discount=DC2](https://www.eventbrite.com/e/decentralised-storage-summit-tickets-62719912948?discount=DC2)

Enjoy.



================================================
FILE: posts/faster-go-xml-processing.md
================================================
---
title: "Faster XML processing in Go"
date: 2024-03-26T12:00:01+01:00
draft: false
tags:
- go
- xml
- performance
---

## Prelude

Go supports XML processing in the standard library package
[encoding/xml](https://pkg.go.dev/encoding/xml). The [Marshal](https://pkg.go.dev/encoding/xml#Marshal) and [Unmarshal](https://pkg.go.dev/encoding/xml#Unmarshal)
function will use a [Encoder](https://pkg.go.dev/encoding/xml#Encoder) and [Decoder](https://pkg.go.dev/encoding/xml#Decoder) under the hood, as these are more general.

With a [Decoder](https://pkg.go.dev/encoding/xml#Decoder) it is possible to iterate over a large number of XML
elements and to deserialize data in a way that will limit memory consumption.
Here is a playground example for using a decoder to repeatedly parse elements
from a [Reader](https://pkg.go.dev/io#Reader): [efY60PYLFm8](https://go.dev/play/p/efY60PYLFm8).

One limitation of this approach is that you can only parse top-level elements.
This restriction is circumvented by utilities like
[xml-stream-parser](https://github.com/tamerh/xml-stream-parser) or [xmlstream](https://github.com/miku/xmlstream), which allow to parse a number
of different elements from any level in the XML document in a streaming
fashion.

## Performance

XML decoding is slow, less because Go is slow (it usually is not), but because
parsing it can be expensive (you can also try to use [libxml with
CGO](https://eli.thegreenplace.net/2019/faster-xml-stream-processing-in-go/) to
make it faster). After all, XML is a markup language, it can do things JSON
cannot do (like [TEI](https://tei-c.org/)). Surprisingly, many real world uses
of XML can be covered by JSON just as well. As a result, we can observe
a decline in XML usage and a de-facto standard choice of JSON for lots of data
exchange tasks and implementations (according to [google trends](https://trends.google.com/trends/explore?date=all&q=xml,json&hl=en-GB), the term *JSON*
surpassed *XML* in January 2016).

As data work often involves an ad-hoc data scouting step (with tools like
[jq](https://stedolan.github.io/jq/), or
[duckdb](https://www.pgrs.net/2024/03/21/duckdb-as-the-new-jq/)), some variants
of JSON gained popularity, like [jsonlines](https://jsonlines.org/) (also
called [JSON streaming](https://en.wikipedia.org/wiki/JSON_streaming) or
newline-delimited JSON). You can continue to use many UNIX text utils, while enjoying all
the features of [RFC 8259](https://datatracker.ietf.org/doc/html/rfc8259).

A format like jsonlines then makes it easy to parallelize JSON transformation
tasks with a [fan-out, fan-in](https://go.dev/blog/pipelines#fan-out-fan-in)
pattern: Read N lines, pass batch to goroutine, collect results and write them
out. A tool like [miku/parallel](https://github.com/miku/parallel) (["fast filter"](https://gist.github.com/miku/738f361c8156264626c74f9b717927ff#fast-parallel-filters-in-go)) allows to abstract away some of the parallel
processing boilerplate (example of [extracting a value from
jsonlines](https://github.com/miku/parallel/blob/27272f36538b21baa3256ec2e9487cca73d20628/examples/extract/extract.go#L1-L59),
twice as fast as jq).

## No lines for XML

XML does not have a widely used, line oriented representation (there is
[PYX](https://gnosis.cx/publish/programming/xml_matters_17.html), an [early
attempt](https://www.oreilly.com/library/view/learning-xml-2nd/0596004206/ch10s07.html)
at XML streaming). How can we still process XML faster than iterating through
it sequentially? We have to parallelize it, but instead of relying on a newline
for delimiting records, we have to isolate the elements we are interested in,
and batch hand them over to processing threads. There is already a suitable
type in the standard library to split a stream into tokens.

## A Scanner quickly

The [bufio.Scanner](https://pkg.go.dev/bufio#Scanner) shows the utility of first class functions for customizing type behaviour (another
example is [Proxy in http.Transport](https://github.com/miku/httpgetaway/blob/master/ProxyIntro.md#customizing-httptransport-proxy)).
We can implement a custom [SplitFunc](https://pkg.go.dev/bufio#SplitFunc) that would split a stream on XML tags.

Since we only want the element boundaries, parsing the input stream is much
faster, as all we need to do is to find the
[Index](https://pkg.go.dev/bytes#Index) of the start and end tags in the
stream. Following the optimization by batching, we can collect N elements or
put a (soft) limit on the number of bytes in a batch and then pass a chunk of
valid XML to a processing function, which then can run in parallel and do the
heavy lifting of proper XML parsing.

## Splitting on tags

We implemented
[TagSplitter](https://github.com/miku/parallel/blob/27272f36538b21baa3256ec2e9487cca73d20628/record/split.go#L29-L56)
which will split a stream on XML elements and will batch them into
approximately 16MB sized chunks by default (it currently has the limitation
that it will not handle nested XML elements of the same name). You can then use
standard [bufio.Scanner](https://pkg.go.dev/bufio#example-Scanner-Custom)
facilities to get smaller batches of valid XML to parse with e.g.
[xmlstream](https://github.com/miku/xmlstream) (an example for parsing complex
PubMed XML document can be [found
here](https://github.com/miku/parallel/blob/27272f36538b21baa3256ec2e9487cca73d20628/examples/xmlstream/main.go#L36-L67),
including a cpu [pprof
viz](https://raw.githubusercontent.com/miku/parallel/master/examples/xmlstream/cpu.png)
showing further, potential performance improvements).

## Anecdata, millions of XML documents

Here is a rough summary of a test run of this approach (using a
contemporary [CPU](https://www.intel.com/content/www/us/en/products/sku/230498/intel-core-i913900t-processor-36m-cache-up-to-5-30-ghz/specifications.html))
on a dataset consisting of 327GB XML in about 36M documents (36557510) &mdash; that
is the set of publicly available metadata from
[PubMed](https://pubmed.ncbi.nlm.nih.gov/) (the target [struct](https://github.com/miku/parallel/blob/27272f36538b21baa3256ec2e9487cca73d20628/examples/xmlstream/main.go#L75-L318) requires a few hundred lines). The test ran in 03/2024. The
sequential approach takes **177 minutes**, the parallel approach brings this down to
about **20 minutes**, a 9x improvement ⚡ in throughput.

To put this into perspective, you can take a [metadata
dump](https://academia.stackexchange.com/questions/38969/getting-a-dump-of-arxiv-metadata)
of the [popular](https://info.arxiv.org/help/stats/2021_by_area/index.html)
[Arxiv](https://arxiv.org/) preprint server site (hosting about 2.4 million
scholarly articles) and parse all of its XML, which amounts to more than 5GB,
in about 8s. This makes XML processing more convenient - and fun, again.

## PS

Package [encoding/xml](https://pkg.go.dev/encoding/xml) is not without issues, regarding performance:

* [encoding/xml: very low performance in xml parser · #21823](https://github.com/golang/go/issues/21823)
* [Go XML parsing library alternative](https://github.com/Goodwine/go-xml?tab=readme-ov-file#notes-on-encodingxml)




================================================
FILE: posts/first-meetup-date-is-fixed-2019-02-08.md
================================================
---
title: "First meetup date is fixed"
date: 2019-01-21T00:14:00+01:00
draft: false
tags:
- go
- meetup
- announcement
---

The first Golang and Cloud-Native Meetup will take place on Friday, 8th of
February 2019 starting 19:00 at [Basislager
Leipzig](https://www.basislager.co/), ground floor.

Are you using Go? Are you curious about Go? Are you a cloud architect? You are
working on an interesting project that you would like to share? Or maybe you
just want to meet some fellow Gophers in your city? Then, by all means,
consider dropping by.

This will be our first meeting and there will be plenty of room to participate
and shape this meetup going forward.

We already have a GitHub account at
[https://github.com/golang-leipzig](https://github.com/golang-leipzig). Further
sites will be set up shortly.



================================================
FILE: posts/first-meetup-invitation.md
================================================
---
title: "First meetup invitation"
date: 2019-01-29T00:12:45+01:00
draft: false
tags:
- announcement
- meetup
---

First event [announced](https://www.meetup.com/Leipzig-Golang/events/258372375/).

Hello, 世界! This is our first meetup, for anybody interested in the Go
programming language and Cloud-Native technologies. We would like to know, what
you would expect from the meetup, what you would be interested in and talk
about the roadmap for the next months. For this first event, we do not have a
special topic, so it’s more a come together to get to know and connect the
community. Nonetheless, we hopefully have time for a few lightning talks. See
you there!

Hallo, 世界! Willkommen zum ersten Golang und Cloud-Native User Group Treffen.
Wir wollen Erfahrungen austauschen und auch in Erfahrung bringen, welche Themen
für die Teilnehmenden interessant wären und eine Roadmap für die kommenden
Monate diskutieren. Für das Auftakttreffen haben wir kein spezielles Thema -
wir wollen eher die Community kennen lernen und verknüpfen. Zeit für einige
Lightning Talks haben wir vielleicht auch noch. Bis bald!

![](/images/event-1-meetup.jpg)

Background image by [Elias Photography](https://www.instagram.com/elias_photography).




================================================
FILE: posts/go-at-coding-leipzig-chapter-four.md
================================================
---
title: "Go at Coding Leipzig Chapter Four"
date: 2019-02-27T15:45:00+01:00
draft: false
tags:
- go
- meetup
---

A last minute tip for today: There will be a quick introduction to Go at
[Coding Leipzig Chapter Four](https://www.meetup.com/coding-leipzig/events/258098205/) meetup tonight at [Basislager](https://www.basislager.co/):

* [Michael Panzer | GoBasics in 30 Minutes](https://www.meetup.com/coding-leipzig/events/258098205/)

> Michael is co-organizer of Leipzig Golang and Cloud-Native Meetup and show us
> the basics of Golang in only 30 minutes. He has prepared a bunch of useful
> examples.




================================================
FILE: posts/go-at-spartakiade-2019-berlin.md
================================================
---
title: "Go at Spartakiade 2019 Berlin"
date: 2019-04-22T09:00:00+02:00
draft: false
tags:
- workshop
- invitation
---

[Spartakiade](https://spartakiade.org/) is a regular, developer-centric
conference in Berlin. This year it will host over twenty full day workshops,
with topics ranging from data science, 3D, docker, kubernetes, and also a few
programming language introductions, among them F#, Python, Purescript -- and Go!

There will be two Go workshops (in English or German, depending on the audience):

* Apr, 27 2019, 10-17: [Kann weniger mehr sein? Eine praktische Einführung in
  die Programmiersprache Go](https://github.com/miku/golang6h) (Can less be more? A practical introduction to Go)
* Apr, 28 2019, 10-17: [Schreiben von Netzwerkanwendungen mit Go](https://github.com/miku/golangnetpkg) (Writing network
  applications with Go)

Interested in Go or anything else at Spartakiade 2019? Then you're in luck, we
have two free tickets for you - use the code W7UJQS55 at
[http://spartakiade.eventbrite.de/](http://spartakiade.eventbrite.de/) - and
have a fun weekend learning new things. See you there!

* [Workshop list](https://spartakiade.org/)
* [Venue: Alte Börse
  Marzahn](https://twitter.com/Spartakiade_org/status/1095025512441921536),
[more images](https://duckduckgo.com/?q=Alte%2BB%C3%B6rse%2BMarzahn&t=h_&iax=images&ia=images)
* [@Spartakiade_org](https://twitter.com/Spartakiade_org)

----

Did not get one of the two free tickets, but still want to go? Please [contact
me](https://twitter.com/cvvfj), and I will send you a 10% discount code.



================================================
FILE: posts/go-cloud-native-split.md
================================================
---
title: "Go and Cloud Native Meetup Split"
date: 2019-09-16T21:00:00+02:00
draft: false
tags:
- meetup
- meta
---

{{< h2 >}}TL;DR{{< /h2 >}}

We will reshuffle meetups a bit: The current [Go and Cloud Native
meetup](https://www.meetup.com/Leipzig-Golang/) will be split up,
into a Go focussed meetup (we will keep the Meetup group, just rename it) and a
dedicated Cloud Native Meetup - which might be merged with the growing [Linux
Meetup Leipzig](https://www.meetup.com/Linux-Meetup-Leipzig/).

If you have not attended [Linux Meetup
Leipzig](https://www.meetup.com/Linux-Meetup-Leipzig/) yet and you are
interested in Enterprise Linux and Cloud Native topics, please join. It's
awesome!

{{< h2 >}}Background{{< /h2 >}}

We started the Go meetup in February 2019 jointly with a Cloud Native label,
since a lot of Cloud Native tools are actually written in Go. Also, if you
write software, that lives in the Cloud, you might evaluate Go as well.  Hence,
the joint meetup seemed to make sense to us then.

However, in the past year, we had more Go language related topics; at the same
time the Linux Meetup Leipzig hosted lots of Cloud Native talks, from container
runtimes to Cloud Native applications like Kubeflow.

And there are people who want to learn about Cloud Native only, not Go. Hence,
the meetup split seems to make sense now. It will allow for a sharper focus.

In any case, we are happy to contribute to a growing set of interesting
developer meetups in Leipzig, with
[Go](https://www.meetup.com/Leipzig-Golang/),
[Linux](https://www.meetup.com/Linux-Meetup-Leipzig/) (Cloud Native),
[Softwerkskammer Leipzig](https://www.meetup.com/Softwerkskammer-Leipzig/) or
Google Developer Group (Update: `https://www.meetup.com/GDG-Leipzig/` has been deleted) being just a few
of them.

{{< h2 >}}Timeline{{< /h2 >}}

It will take a few weeks to rename all our sites and groups, but the process
should be done be end of October 2019.



================================================
FILE: posts/go-devopenspace-2023.md
================================================
---
title: "Go at devopenspace 2023"
date: 2023-10-06T00:20:00+01:00
draft: false
tags:
- conference
- unconference
- go
---

[devopenspace](https://devopenspace.de/) is a regular, [classic](http://web.archive.org/web/20120801000000*/https://devopenspace.de/)
[unconference](https://en.wikipedia.org/wiki/Unconference) on software
engineering and related topics - this year, there are a few Go and cloud
related workshops as well! See the [agenda for more details](https://devopenspace.de/).



================================================
FILE: posts/go-heise-frontpage.md
================================================
---
title: "Go makes the frontpage"
date: 2019-01-23T00:10:01+01:00
draft: false
tags:
- go
- news
---

On 22, Jan 2019, Go made it to the frontpage of [heise.de](https://heise.de),
with an introductory article about the language:

* [Einstieg in Go](https://www.heise.de/developer/artikel/Ein-Einstieg-in-die-Programmiersprache-Go-Teil-1-4282998.html) (German)

After a brief historical overview, the authors jump right into various channels
types. They also highlight struct embedding and interfaces.



================================================
FILE: posts/go-tech-lunch-dates-2024.md
================================================
---
title: "Go Tech Lunch Dates 2024"
date: 2024-07-24T00:20:00+02:00
draft: false
tags:
- invitation
- tech
- lunch
---

## Go Tech Lunch 🍜

In addition to our regular meetups, we are trying something else and
lightweight: meeting over lunch twice a month. The next dates in 2024 are:

* [August 14, 2024](https://www.meetup.com/leipzig-golang/events/302422578/)
* [August 28, 2024](https://www.meetup.com/leipzig-golang/events/302422578)
* [September 11, 2024](https://www.meetup.com/leipzig-golang/events/302977588/)
* [September 25, 2024](https://www.meetup.com/leipzig-golang/events/knxtmtygcmbhc/)
* [October 9, 2024](https://www.meetup.com/leipzig-golang/events/303523249/)
* [October 23, 2024](https://www.meetup.com/leipzig-golang/events/knxtmtygcnbfc)
* [November 6, 2024](https://www.meetup.com/leipzig-golang/events/knxtmtygcpbjb)

We always meet 12:15 CET at [Pholosophy](https://pholosophy.de/),
([map](https://www.openstreetmap.org/node/2459099851), [google
maps](https://maps.app.goo.gl/cYFDP5hPR5mVuGxU7)). RSVP welcome, but you can
also just drop by.

> Interested in technical conversations with other liked-minded engineers who
> want to learn more about tech, discussing interview processes, papers or the
> latest rumors? Then join us for our tech lunch, a light-hearted way to
> explore tech.

Everyone and every programming language is welcome.

See you!




================================================
FILE: posts/golab-2024.md
================================================
---
title: "GOLAB 2024"
date: 2024-05-15T11:30:00+02:00
draft: false
tags:
- conference
- italy
---

## GOLAB 2024

[GOLAB](https://golab.io/), *The International Conference on Go* is a wonderful
event that brings together developers from Europe and beyond in [Florence](https://en.wikipedia.org/wiki/Florence), Italy
since 2015 and which will take place 2024-11-11 to 2024-11-13 this year,
featuring a discovery and deep dive track as well as workshops on introductory
and advanced topics. Find out more:

* Conference homepage: [golab.io](https://golab.io)
* GOLAB on [Twitter](https://twitter.com/golab_conf)
* [GOLAB YouTube Channel](https://www.youtube.com/@golabconference9448), recordings from previous years

We partnered with GOLAB and are excited to share discount codes for tickets 🎟️
&mdash; just drop by our [next
event](https://www.meetup.com/leipzig-golang/events/298066360/)!


[![](/images/golab-2024-30.png)](https://golab.io)

See you!

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang/) to get notified of upcoming events.




================================================
FILE: posts/hackolaus-2-hack-for-good.md
================================================
---
title: "Hackolaus #2: Hack for Good"
date: 2021-11-02T14:00:00+01:00
draft: false
tags:
- announcement
- hackathon
---

Hello, 世界!

----

* **Update 2021-11-04**: Cancelled: See [hackolaus.de](https://web.archive.org/web/20221003104656/https://hackolaus.de/) for new
dates.

* **Update 2021-11-03**: Hackolaus #2 may be cancelled due to local pandemic regulation;
please follow updates at the event site.

----

We would like to invite you to a special hackathon event this year: [Hackolaus
#2](https://web.archive.org/web/20221003104656/https://hackolaus.de/) - running from Nov 19 to Nov 21, 2021 at
[Basislager](https://www.basislager.co/) Leipzig.

[![](/images/hackolaus-grafik.png)](https://web.archive.org/web/20221003104656/https://hackolaus.de/)

> When the nights get longer and the weather outside is frightful, we need
some warmth in our hearts. Many people sacrifice their time and energy to
create this warmth by giving and contributing to the benefit of those less
fortunate and in need.

> Many NGOs, associations and individuals also work hard to give to social,
environmental or other sustainability causes. We believe that they should not
only give but also receive, that society should give back to them.

> This is why we are collaborating on a hackathon to support these organizations
with solutions to help them focus more on delivering impact.

Go is a wonderful language for prototyping and a cross-compiled binary can be
the sweetest gift, if it solves a small problem and saves someone some time.

You can find more information about the event here:

* [hackolaus.de](https://web.archive.org/web/20221003104656/https://hackolaus.de/)
* [www.meetup.com/OpenTechSchool-Leipzig/events/279362276/](https://web.archive.org/web/20220629140525/https://www.meetup.com/OpenTechSchool-Leipzig/events/279362276/)

The event is organized by [Open Tech School](https://www.meetup.com/OpenTechSchool-Leipzig),

> a community initiative offering meetups to technology enthusiasts of all
> genders, backgrounds, and experience levels. OTS’ main goal is to create a
> friendly learning environment where no one feels shy about asking any
> question. Everyone is invited to participate, whether as a coach or a
> learner, and get in contact to organize OTS events anywhere in the world.



================================================
FILE: posts/meetup-10-invitation.md
================================================
---
title: "Virtual Meetup #10 invitation"
date: 2020-03-30T12:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

The global [coronavirus
pandemic](https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic)
puts limitations on all aspects of societal life. At the time of our last meetup, [two
people were
infected](http://web.archive.org/web/20200330100951/https://www.ecdc.europa.eu/sites/default/files/styles/is_large/public/images/novel-coronavirus-cases-EU-UK-29-03-2020%20.jpg.png) in Germany,
as of this announcement, we are at
[57.298](https://web.archive.org/web/20200330114457/https://www.rki.de/DE/Content/InfAZ/N/Neuartiges_Coronavirus/Fallzahlen.html).

The Go community addresses resulting issues in a [blogpost on the pandemic](https://blog.golang.org/pandemic).

For [Meetup #10 on Friday, April 17,
2020](https://www.meetup.com/Leipzig-Golang/events/268785531/), we still would
like to bring people together, in form of a shorter, virtual meetup.

We may use [Zoom](https://zoom.us/) or [Jitsi](https://meet.jit.si/) for
videoconferencing. If you have other useful tools, just [drop us a
line](mailto:martin.czygan@gmail.com).

Given the limits of the medium, we do not plan to have any long presentation,
but instead would be more interested in the following:

* Do you work remotely - if so, how do you manage the situation?
* What tools you find useful for development, communication or collaboration?

And apart from these things, maybe people want to share some of Go projects
they use or they are working on via screen sharing? That would actually be
super cool!

Anyway, we hope you are fine, given the circumstances. Virtual meetup link
follows a few days before the meetup, see you then!

----

PS. Up until at least 2020-05-31, we host an own videoconference server under
[jitsi.cc](https://meet.jit.si).



================================================
FILE: posts/meetup-10-wrapup.md
================================================
---
title: "Virtual Meetup #10 wrap-up"
date: 2020-04-21T10:00:00+02:00
draft: false
tags:
- summary
- meetup
---

{{< h2 >}}The sync package{{< /h2 >}}

Virtual [Meetup #10](https://www.meetup.com/Leipzig-Golang/events/268785531/)
took place on Friday, April 17, 2020, 19:00 CEST via [Zoom](https://zoom.us/)
(thanks to [saschagrunert](https://github.com/saschagrunert) and
[CNCF](https://www.cncf.io/)).

[Michael](https://twitter.com/embano1) prepared a [great overview](https://github.com/embano1/go-meetup-lej-04-2020) of the
[sync](https://golang.org/pkg/sync/) and
[x/sync](https://pkg.go.dev/golang.org/x/sync) packages, which implement
concurrency related facilities (concurrency is hard with either classical
approaches or CSP, as we [learned from a
presentation](https://speakerdeck.com/embano1/concurrency-bugs-in-go-go-meetup-leipzig-03-15-2019-gasch)
last year at [meetup #2](https://golangleipzig.space/posts/second-meetup-wrapup/)).

The overview included among other things a bug hunt in a
[counter](https://github.com/embano1/go-meetup-lej-04-2020/blob/master/sync/sync-rwmutex/counter.go)
example and a benchmark of the builtin [map](https://golang.org/ref/spec#Map_types)
and [sync.Map](https://golang.org/pkg/sync/#Map).

![](/images/sync-map-bench.png)

The [x/sync](https://pkg.go.dev/mod/golang.org/x/sync) contains the very useful
[errgroup](https://github.com/embano1/go-meetup-lej-04-2020/tree/master/x-sync/errgroup)
and
[singleflight](https://github.com/embano1/go-meetup-lej-04-2020/tree/master/x-sync/singleflight).

One thing that the [errgroup](https://godoc.org/golang.org/x/sync/errgroup)
will not provide for out of the box is the pickup of multiple error, should
more than one occur.

> Go calls the given function in a new goroutine. The **first call** to return a non-nil error cancels the group; its error will be returned by Wait. -- https://godoc.org/golang.org/x/sync/errgroup#Group.Go

And:

> Wait blocks until all function calls from the Go method have returned, then
> returns the **first non-nil error** (if any) from them. -- https://godoc.org/golang.org/x/sync/errgroup#Group.Wait

An implementation of this feature can be found in [k8s apimachinery's](https://github.com/kubernetes/apimachinery) [error
utilities](https://github.com/kubernetes/apimachinery/blob/06deae5c9c2c030d771a467e086b6c791e8800dc/pkg/util/errors/errors.go#L231-L246).

The singleflight pattern can also be found in the perkeep utils [go4](https://github.com/go4org/go4) repository, in the [singleflight](https://github.com/go4org/go4/blob/f5505b9728ddf920bb673137648788c5ac99de1b/syncutil/singleflight/singleflight.go#L17-L19) package.

> Package singleflight provides a duplicate function call suppression mechanism.

The way to [test
singleflight](https://github.com/go4org/go4/blob/f5505b9728ddf920bb673137648788c5ac99de1b/syncutil/singleflight/singleflight_test.go#L55-L85)
can be interesting, too. One pools up a number of goroutines (by starting and
waiting a bit). Then, a single value sent on a channel serves as a starting
shot. At the same time, the atomic counter on calls ensure there has only been
a single function call.


{{< h2 >}}Misc{{< /h2 >}}

In one of the upcoming meetups, we will highlight tools from the
[Hashicorp stack](https://github.com/hashicorp/), as there is certainly in
interest in these tools.

Go can be a glue language, e.g. to combine exiting, tested tools with some thin
convenience layer. On a lighter side, this is what
[ttarc](https://github.com/miku/ttarc) does, a
[TikTok](https://www.tiktok.com/) archiving tool: It wraps
[wget](https://www.gnu.org/software/wget/) with a bit of networking and JSON
parsing to generate [WARC](https://en.wikipedia.org/wiki/Web_ARChive) files.

![](/images/pix.png)




================================================
FILE: posts/meetup-11-invitation.md
================================================
---
title: "Virtual Meetup #11 invitation"
date: 2020-04-26T12:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #11 will take place on [Friday, May 15, 2020 19:00
CET](https://www.meetup.com/Leipzig-Golang/events/268785545/) and will most
likely be virtual again (we will share the zoom link here and on the meetup
event page).

![](/images/LeipzigGophers11Zoom.png)

This time, we're excited to look at software *built with Go*. Our main topic
will be the cloud native machine learning toolkit:
[kubeflow](https://www.kubeflow.org/).

# Kubeflow - A follow up

Leveraging [Kubernetes](https://kubernetes.io) for Data Science purposes is
still a burden for many users these days. The integration of large
infrastructures into Data Science workflows seems not quite solved.

In this talk [Sascha](https://github.com/saschagrunert) and [Markus](https://github.com/mbu93) will follow-up on their previous blog
post ["Kubeflow: Data Science on Steroids"](https://github.com/saschagrunert/kubeflow-data-science-on-steroids). They will check-out what has
changed in the past year and how certain features have evolved in Kubeflow. To
do so they will revisit possible deployment variants of Kubeflow and look under
the hood of the application stack to explore why choosing Kubernetes for Data
Science is a great idea.

On top of that they will demonstrate advanced topics like hyperparameter tuning
with [Katib](https://github.com/kubeflow/katib) and Tensorflow model serving.

Interested and want to hear more? Join the Meetup!

<!-- ![](/images/LeipzigGophers11.jpg) -->

----

PSA: We are hosting our a videochat instance of [jitsi](https://jitsi.org/)
until 2020-05-31 at [jitsi.cc](https://meet.jit.si/). Stay save and connected!

<!--

> Outreach

https://www.linkedin.com/posts/martin-czygan-58348842_last-minute-call-for-leipzig-gophers-meetup-activity-6667059863689936896-NI-3
https://www.xing.com/home/stories/4403109192
https://gophers.slack.com/archives/C152YB9UZ/p1589551451289400
-->



================================================
FILE: posts/meetup-11-wrapup.md
================================================
---
title: "Virtual Meetup #11 wrap-up"
date: 2020-05-29T20:00:00+02:00
draft: false
tags:
- summary
- meetup
---

{{< h2 >}}Kubeflow{{< /h2 >}}

The data science process is not free of friction, especially when acquiring,
preparing and cleaning data. But even when data is readily available, one might
want to use it to train a number of ML models to perform model selection.

And what happens, if an update is available and the whole process needs to be
run again? Optimally with a tested model that is put into production in
a canary deployment workflow?

The [Kubeflow](https://www.kubeflow.org/) project is a cloud native machine
learning toolkit supporting experimentation, pipeline building and deployment.
As a cloud native tool it is
[composed](https://www.kubeflow.org/docs/components/) of a set of deployments
and services, from managing Jupyter notebooks, pipelines, dashboard and serving
tools.

[Sascha](https://github.com/saschagrunert/) and [Markus](https://github.com/mbu93/)
took us on an amazing tour using a real world use case, showcasing the various
parts of Kubeflow and how they fit together.

Rather than repeating the details here, check out the blog post [My exciting
journey into Kubernetes’
history](https://kubernetes.io/blog/2020/05/my-exciting-journey-into-kubernetes-history/) &mdash;

> A story of data science-ing 90,000 GitHub issues and pull requests by using Kubeflow, TensorFlow, Prow and a fully automated CI/CD pipeline.

The accompanying repository can be found at: [https://github.com/kubernetes-analysis/kubernetes-analysis](https://github.com/kubernetes-analysis/kubernetes-analysis).



================================================
FILE: posts/meetup-12-invitation.md
================================================
---
title: "Virtual Meetup #12 invitation"
date: 2020-09-17T16:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #12 will take place today, [Thurdays, Sep 17, 2020 19:00
CET](https://www.meetup.com/Leipzig-Golang/events/268785554/) and will
be virtual again.

![](/images/LeipzigGophers12BBB.png)

We have a talk about HTTP proxies. You'll discover one
[CVE](https://nvd.nist.gov/vuln/detail/CVE-2016-5386) you never heard of and we
see what the author of curl says [on
SO](https://stackoverflow.com/questions/62722430/why-does-curl-send-a-proxy-connection-header-even-though-the-rfc-seems-to-disco),
why curl does not strictly follow the HTTP RFC.

See you!



================================================
FILE: posts/meetup-12-wrapup.md
================================================
---
title: "Virtual Meetup #12 wrap-up"
date: 2020-09-18T10:00:00+02:00
draft: false
tags:
- summary
- meetup
---

We had a short talk about HTTP proxies in Go. As expected, Go supports the
usual environment variables, like `HTTP_PROXY`, `HTTPS_PROXY` and `NO_PROXY` -
and you can easily customize the proxy selection, as we saw in an example code
walkthrough of an ip rotation proxy.

The [x/net](https://github.com/golang/net/) package contains support in
[x/net/http/httpproxy](https://github.com/golang/net/tree/master/http/httpproxy).

A couple of fun facts from the talk:

* The first book on HTTP proxies was published in 1998: "Web Proxy Servers" by
  Ari Luotonen (CERN), who also wrote a [web proxy tunneling
draft](https://tools.ietf.org/html/draft-luotonen-web-proxy-tunneling-01).
* Many popular HTTP projects (including Go) were affected by a [critical
  CVE](https://httpoxy.org/), related to [CGI](https://www.w3.org/CGI/) up until
  2016. Note that the discussion and development of "server scripts" [started
        in
1993](http://1997.webhistory.org/www.lists/www-talk.1993q4/0485.html).
* Core [curl](https://curl.haxx.se/) developer [explains](https://stackoverflow.com/a/62722840/89391),
  why curl does not follow RFC in each and every aspect, e.g. when it comes to
the `Proxy-Connection` header - he sums it up as "The world wild web is a crazy place."

The presentation can be found here: [HTTP Getaway (part 2): HTTP proxy intro](https://github.com/miku/httpgetaway/blob/master/ProxyIntro.md)

See you next time!





================================================
FILE: posts/meetup-13-invitation.md
================================================
---
title: "Virtual Meetup #13 invitation"
date: 2020-10-14T10:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #13 will take place today, [Friday Oct 16, 2020 19:00
CEST](https://www.meetup.com/Leipzig-Golang/events/268785569/) and will be
virtual again. We'll use Zoom (find the link on [the event
page](https://www.meetup.com/Leipzig-Golang/events/268785569/) or below):

```shell
$ curl -L is.gd/GOIxW7 | base64 -d
```

We have a short talk on [seaweedfs](https://github.com/chrislusf/seaweedfs), a
key value store written in Go and inspired by the [Facebook
Haystack](https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf)
paper (back when FB only had 20PB of image data).

Beyond a key-value store seaweedfs offers various storage access methods on
top, e.g. an S3 API, which makes shifting between on premise and cloud storage
easy.

As always, other lightning talks or contributions are welcome.

See you!

----

Teaser: There will be a talk on [Productive
Go](https://www.meetup.com/Developer-Group-Leipzig/events/273876459/) at the
Developer Group Leipzig 2020-12-08 event.



================================================
FILE: posts/meetup-13-wrapup.md
================================================
---
title: "Virtual Meetup #13 wrap-up"
date: 2020-10-16T22:00:00+02:00
draft: false
tags:
- summary
- meetup
---

Today we had two input presentations:

* Haystack and seaweedfs: [miku/haystack](https://github.com/miku/haystack)
* Functional Options Pattern: [embano1/funcy-ops](https://github.com/embano1/funcy-ops)

## Haystack

The haystack talk gave an overview about an early Facebook photo storage system
and a Go project inspired by it, called
[seaweedfs](https://github.com/chrislusf/seaweedfs). The seaweedfs project is
great, as it is developer friendly, scales up and down and is easy to use out of
the box. It offers an [S3 compatible
API](https://github.com/chrislusf/seaweedfs/wiki/Amazon-S3-API) and a [FUSE
filesystem](https://github.com/chrislusf/seaweedfs/wiki/FUSE-Mount) option.

![](/images/assembly_pic13.png)

## Functional Options Pattern

The *Functional Options Pattern* addresses API stability when it comes to
configuration options. A simple way to configure a type is by passing in
options directly (there can be too many), or by passing in a single config
struct (which becomes part of the public API, for better or for worse). The functional options
pattern works because in Go functions are first class values and can be passed
as arguments into or returned by functions.

```go
// WithInsecure skips certificate verification
func WithInsecure(in bool) ServerOption {
    return func(s *Server) error {
        if in {
            return errors.New("security alert")
        }
        s.insecure = in
        return nil
    }
}
```

The complete example can be found here:
[https://github.com/embano1/funcy-ops/blob/main/server.go](https://github.com/embano1/funcy-ops/blob/main/server.go).

Functional Options is a Go *pattern* and addresses some issues with too many
arguments, variants of *New* and API stability.

## Misc

Discussion evolved around testing (Go) code with controlled, restricted
environments, like memory limits or maybe different
[ulimits](https://man7.org/linux/man-pages/man3/ulimit.3.html). Running tests
in containers can address these tasks (or one can get
[systemd](https://wiki.archlinux.org/index.php/Cgroups#With_systemd_2) to
impose limits).

Furthermore, another way to embed files (there is a proposal from [July
2020](https://go.googlesource.com/proposal/+/master/design/draft-embed.md)):

* [https://github.com/klingtnet/embed](https://github.com/klingtnet/embed)

Book recommendation:

* [databass.dev](https://www.databass.dev/)

Go runtime interplay with containers and pods? Fasten your seatbelt:
[https://twitter.com/embano1/status/1149654812595646471](https://twitter.com/embano1/status/1149654812595646471)

And finally, a few ideas that came up as topics for another talk:

* (Go) Crypto
* Kubernetes operators (and what they can teach about (event oriented) systems design in general)
* Higher Order Go, or functional patterns in Go

Join us [next time](https://www.meetup.com/Leipzig-Golang/events/268785591/)!

----

Image credit: [Kobol](https://wiki.kobol.io/helios64/intro/)



================================================
FILE: posts/meetup-14-invitation.md
================================================
---
title: "Virtual Meetup #14 invitation"
date: 2020-11-11T10:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #14 will take place [Nov 13,
2020](https://www.meetup.com/Leipzig-Golang/events/268785591/) and will be
virtual again. We'll use Zoom (find the link on [the event
page](https://www.meetup.com/Leipzig-Golang/events/268785591/) or below):

```shell
$ curl -sL git.io/JkIVG | base64 -d
```

We will have an input presentation on file embedding - a popular technique to
make deployments and workflows easier. Many tools exists today, as can be seen
in [#35950](https://github.com/golang/go/issues/35950). Have you ever wondered,
which of these to use? Thankfully, [klingtnet](https://github.com/klingtnet)
will shed some light on this and we'll learn about the ups and downs of a few
options and also what it would take to write one embedding utility yourself.

[![](/images/unixv6embed.png)](https://github.com/yisooan/unix-v6/blob/2c7099ee501923775c4c96079a6fe94da109b552/sys/ken/main.c#L12-L30)

As always, other lightning talks or contributions are welcome.

See you!

<!--

https://www.linkedin.com/posts/martin-czygan-58348842_virtual-meetup-14-invitation-activity-6732229118777196544-MOwI

-->

----

Teaser: There will be a talk on [Productive
Go](https://www.meetup.com/Developer-Group-Leipzig/events/273876459/) - at the
Developer Group Leipzig 2020-12-08 event.




================================================
FILE: posts/meetup-14-wrapup.md
================================================
---
title: "Virtual Meetup #14 wrap-up"
date: 2020-11-14T22:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## File Embedding

We had a great [input
presentation](https://github.com/golang-leipzig/file-embedding) on file
embedding, which allows to ship additional files within a binary.

How do you put files into a binary? There a [numerous
tools](https://go.googlesource.com/proposal/+/master/design/draft-embed.md#background),
some of them limited, some of them with large feature sets.

Is it time for *Yet Another File Embedding Tool*? Yes!

That such a tool can be simple and easy to use is shown by
[klingtnet/embed](https://github.com/klingtnet/embed).

![](/372959.gif)

## Misc

* [awsls](https://github.com/jckuester/awsls) is a tool that uses code
  generation to simplify AWS command line interactions
* we side-tracked into note-taking, and found out that people use all kinds of
  journal software, from OneNote, plain text files, custom software and plain
paper notebooks

----

Join us [next time](https://www.meetup.com/Leipzig-Golang/events/268785606/)!




================================================
FILE: posts/meetup-15-invitation.md
================================================
---
title: "Virtual Meetup #15 invitation"
date: 2020-12-18T12:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #15 will take place today [Dec 18,
2020](https://www.meetup.com/Leipzig-Golang/events/268785606/) and will be
virtual again. We'll use Zoom (find the link on [the event
page](https://www.meetup.com/Leipzig-Golang/events/268785606/) or below):

```shell
$ curl -sL https://git.io/JLBe8 | base64 -d
```

We'll have two input presentations:

1. On a [WaitGroup](https://golang.org/pkg/sync/#WaitGroup) wrapper, including testing strategies.
2. On a tiny library - [parallel](https://github.com/miku/parallel) that allows to write parallel filters fast.

As always, other lightning talks or contributions are welcome.

See you!

----

PS. And if you cannot join us today, thanks for visiting us in 2020! Merry Christmas, Gophers!


![](/images/xmas2020.png)


Example colorchars implementation: [colorchars](https://gist.github.com/miku/339a2ad63623b08da449bfdab3bd680a#file-main-go)

<!--

https://www.linkedin.com/posts/martin-czygan-58348842_virtual-meetup-15-invitation-activity-6745727036632948736-HBYk

-->



================================================
FILE: posts/meetup-15-wrapup.md
================================================
---
title: "Virtual Meetup #15 wrap-up"
date: 2020-12-19T14:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Concurrent woes

We had two input presentations, both involving concurrent constructs.

First, we heard from the [author](https://twitter.com/embano1) of [package
waitgroup](https://github.com/embano1/waitgroup) about problems with concurrent
code, waitgroups and shutdowns (especially in cloud native and serverless
scenarios). The basic problem: At shutdown time, you want to be graceful, but
at the same time enforce a hard timeout on a number of processes running (and
potentially joining in a [`wg.Wait`](https://golang.org/pkg/sync/#WaitGroup.Wait)).

Enter [package waitgroup](https://github.com/embano1/waitgroup) which allows to
preempt running goroutines. The general problem of goroutine termination is
hard, and even harder, if you have a large code base and a tree of concurrent
routines in flight, that need some kind of cancellation (modern packages use
[context](https://golang.org/pkg/context/), or maybe manual
[timeouts](https://github.com/golang/go/wiki/Timeouts)).

The solution of [waitgroup](https://github.com/embano1/waitgroup) is to embed
the [standard library waitgroup](https://golang.org/pkg/sync/#WaitGroup) and
combine it with a [timeout](https://github.com/golang/go/wiki/Timeouts). The
package comes with examples too:

* [https://pkg.go.dev/github.com/embano1/waitgroup#example-Await](https://pkg.go.dev/github.com/embano1/waitgroup#example-Await)

Testing concurrent code is its own challange, but this package has examples for that as well.

----

The second lightning talk summarized chapter 2 on "Filters" from [Software
Tools](https://openlibrary.org/works/OL4617639W/) by Kernighan and Plauger
(1976) and highlighted some timeless ideas on software style (today, you might
say clean code). Go has great facilities for streaming data processing in the
[io](https://golang.org/pkg/io/) package. Furthermore, you can spice up filters
with parallel processing, without adding much complexity to the program.

![](/images/softwaretools76-s.png)

That's what [parallel](https://github.com/miku/parallel) is about - it allow to
write parallel filters fast. The package is best used as a little utility for
one off filters.

* [Fast parallel filters in Go](https://gist.github.com/miku/738f361c8156264626c74f9b717927ff#fast-parallel-filters-in-go)

## Misc

The best about meetups are things beyond slides and code: discussions, screen
shared setups, neat tools people use, and much more.

Here's a list of things to check out:

* The [ko](https://github.com/google/ko) project helps to get Go applications
  to run on [kubernetes](https://kubernetes.io/) fast, with minimal effort. If
you run go on k8s, you will need this.
* The [zap](https://github.com/uber-go/zap) logger is a fast structured logging library.
* Just as you can combine waitgroups with timeouts, you can blend context
  and readers, for details see:
[https://pace.dev/blog/2020/02/03/context-aware-ioreader-for-golang-by-mat-ryer.html](https://pace.dev/blog/2020/02/03/context-aware-ioreader-for-golang-by-mat-ryer.html)
* Behaviour driven development (BDD) uses a semi-formal language to describe test cases, in Go we have [ginkgo](https://github.com/onsi/ginkgo) - the terminology is language-agnostic.

Can you tame complexity with BDD style development? A VMware *Office of the CTO* tech deep dive addresses this question in a blog post:

* Taming Complexity in Software Development with Behavior Driven Development (BDD) (vanished as of 05/2024)

As for stream processing, there is a classic blog post, as well as a few interesting projects:

* [Go concurrency patterns: Pipelines and cancellation](https://blog.golang.org/pipelines)
* [Automi](https://github.com/vladimirvivien/automi) (prototype)
* [RxGo](https://github.com/ReactiveX/RxGo), an implementation of
  [reactive](http://reactivex.io) style (in short: observer pattern + iterator
pattern + functional programming)

Fast things:

* [GNU parallel](https://www.gnu.org/software/parallel/)
* [livegrep](https://github.com/livegrep/livegrep)
* [fzf](https://github.com/junegunn/fzf)

Basic (database) things:

* BW trees, [What is a BW-tree?](https://stackoverflow.com/questions/18859123/what-is-a-bw-tree), [Paper](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/bw-tree-icde2013-final.pdf)
* log-structured merge trees
* and many more (see: [databass.dev/](https://databass.dev/))

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of upcoming events!




================================================
FILE: posts/meetup-16-invitation.md
================================================
---
title: "Virtual Meetup #16 invitation"
date: 2021-02-02T12:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #16 will take place Tuesday, [Feb 16,
2021](https://www.meetup.com/Leipzig-Golang/events/275871222/) and will be
virtual again. We'll use Zoom (find the link on [the event
page](https://www.meetup.com/Leipzig-Golang/events/275871222/) or below):

```shell
$ curl -sL https://git.io/Jt0pk | base64 -d
```

We'll have input presentations on the upcoming [Go
1.16](https://tip.golang.org/doc/go1.16) release and the generics proposal.

Note: This time the meetup will be all about the number sixteen, i.e. this will
be the sixteenth time we come together, on the 16th of February and there will
be a presentation about the next big Go release that is Go 1.16 (details
follow).

As always, other lightning talks or contributions are welcome.

See you!




================================================
FILE: posts/meetup-16-wrapup.md
================================================
---
title: "Virtual Meetup #16 wrap-up"
date: 2021-02-17T13:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Go 1.16

Meetup #16 was all about Go 1.16 (which [was released](https://blog.golang.org/go1.16) after the meetup).

We had an informative breakdown of the updates coming in this release, the full slides can be found here:

* [A quick tour of Go 1.16](https://github.com/golang-leipzig/go-1.16-and-beyond)

A few highlights are: the go tool is now [module
aware](https://golang.org/doc/go1.16#go-command) by default,
[ioutil](https://golang.org/pkg/io/ioutil/) gets deprecated, support for file
embedding (we talked about that in
[#14](https://golangleipzig.space/posts/meetup-14-wrapup/)) and there is a new
io subpackage [io/fs](https://golang.org/pkg/io/fs/), defining among other
things interfaces for filesystems.

Check out the [slides](https://github.com/golang-leipzig/go-1.16-and-beyond),
[blog post](https://blog.golang.org/go1.16) and [release
notes](https://golang.org/doc/go1.16) for more details.

Thanks [@klingtnet](https://github.com/klingtnet/) for the great summary!

## Generics Pro/Con

Go is simple, and generics will add complexity, while helping to reduce
repetition (and lines of code). In the best case, this results in less, yet
still clear code.

As programming languages tend to *add* features, the Go release note
section on [Changes to the language](https://golang.org/doc/go1.16#language)
happily reported *There are no changes to the language* - over the years.

Less can be more, especially in complex technological landscapes and dynamic
environments. Being a *reduced language* was a bit special, but many
experienced it also as an advantage, or at least not as a problem for the types
of problems people use Go for.

Anyway, generics have [been accepted](https://golang.org/doc/faq#generics) - and
may be available in Go 1.18 (2022).

## What do you miss from Go?

Go is simple, but what are features people miss? We found the following:

* [ternary if](https://en.wikipedia.org/wiki/%3F:) (e.g. C, Java, ...)
* pattern matching (Rust, Erlang, ...)
* enum (C, Rust, Python, ...)
* union types (C, PHP8, ...)
* a built-in set datatype (Python, ...)
* functional utilities, like list comprehensions (Python, ...)
* lambda expressions (Java, Python, ...)

## Misc

* how about [boring technology](http://boringtechnology.club/)
* shout-out to [google/ko](https://github.com/google/ko)
* [distroless](https://github.com/GoogleContainerTools/distroless) are stripped
  down container images (but more than
[scratch](https://github.com/containers/buildah/blob/master/docs/tutorials/01-intro.md#building-a-container-from-scratch)
[images](https://hub.docker.com/_/scratch))

We quizzed ourselves on what kind of interview question might be suitable for
intermediate Go programmers? Some idea we came up with:

* explain [slices](https://blog.golang.org/slices-intro)
* discuss [concurrency](https://tour.golang.org/concurrency/1) and [context](https://blog.golang.org/context)
* a walkthrough project, assessing familiarity with tooling and practices around building projects
* a joint merge request review

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of upcoming events!




================================================
FILE: posts/meetup-17-invitation.md
================================================
---
title: "Virtual Meetup #17 invitation"
date: 2021-04-19T16:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #17 will take place Tuesday, [Apr 20,
2021 19:00 CEST](https://www.meetup.com/Leipzig-Golang/events/275871252/) and will be
virtual again. We'll use Zoom (find the link on [the event
page](https://www.meetup.com/Leipzig-Golang/events/275871252/) or below):

* [https://us02web.zoom.us/j/88430151082?pwd=QzlFWlhKaUJKajFxcXRqRkpYYzNSdz09](https://us02web.zoom.us/j/88430151082?pwd=QzlFWlhKaUJKajFxcXRqRkpYYzNSdz09)

We'll have lightning talk on data deduplication with Go.

![](/images/cat_dup_s.jpg)

As always, other lightning talks or contributions are welcome.

See you!




================================================
FILE: posts/meetup-17-wrapup.md
================================================
---
title: "Virtual Meetup #17 wrap-up"
date: 2021-04-20T22:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## (Fuzzy) Matching with command line tools and Go

Meetup #17 took place Apr 20, 2021 19:00 CEST, and was virtual again (crossing
one year of virtual meetups).  We had a lightning talk on a data
engineering topic:

* [(Fuzzy) Matching with command line tools and Go](https://gist.github.com/miku/fb429faad8b856caf6bba5305af024df)

How to build a graph dataset with about 1B edges from semi-structured data?
With *Taco Bell* style programming, you can reuse (UNIX) command line tools and
combine it with a few custom Go programs.

The graph is about citations, so we looked at publications that cite a paper
relevant to Go, namely the classic CSP paper from 1978.

> Hoare, Charles Antony Richard. "[Communicating sequential processes.](http://www.cs.cmu.edu/afs/cs/user/crary/www/819-f09/Hoare78.pdf)" Communications of the ACM 21.8 (1978): 666-677.

![](/images/6dSaW2q.png)

The custom tool exploits *sorted keys* and works in a merge sort style to run
computation on groups of items with the same key. One might consider key
extraction a *mapping* and grouping operations a *reduce* step.

## Graph stores and algorithms

Are there interesting graph libraries and project written in Go? There are a few ...

* [https://github.com/cayleygraph/cayley](https://github.com/cayleygraph/cayley)
* [https://github.com/dgraph-io/dgraph](https://github.com/dgraph-io/dgraph)

A generic data science umbrella project is: [Gonum](https://www.gonum.org) -
Consistent, composable, and comprehensible scientific code. It contains a
package for [graph
processing](https://github.com/gonum/gonum/tree/master/graph) as well.

Some project in other languages include:

* [https://dbs.uni-leipzig.de/research/projects/gradoop](https://dbs.uni-leipzig.de/research/projects/gradoop)
* [https://networkx.org/](https://networkx.org/)

Sometimes people write custom code for specific algorithms, e.g. for [pagerank](https://github.com/miku/pgrk).

## Misc

* The [GOLAB conference](https://golab.io) hosts free (and paid) webinars over
  the coming months: [https://golab.io/agenda/](https://golab.io/agenda/), e.g.
[Go and
Tensorflow](https://www.youtube.com/watch?v=Al_T3O27DO8)
* Go garbage collector notes: [https://blog.golang.org/ismmkeynote](https://blog.golang.org/ismmkeynote)

Data stores and analytics engines (outside Go):

* [sqlite](https://www.sqlite.org/index.html)
* [Apache Drill](https://drill.apache.org/)
* [Presto](https://prestodb.io/)

Tiny, useful tools:

* [jq](https://stedolan.github.io/jq/) (json pretty printer and processing
  tool), [ijq](https://sr.ht/~gpanders/ijq/) - interactive version

Reading recommendations:

* [Surprisingly Slow](https://gregoryszorc.com/blog/2021/04/06/surprisingly-slow/)
* [Learning Parser Combinators With Rust](https://bodil.lol/parser-combinators/)

Some research questions:

* [ ] good caching libraries (e.g. for HTTP and other data), beside [LRU](https://github.com/hashicorp/golang-lru)
* [ ] how to write parsers (e.g. for DSL or markup languages like [simpleml](http://simpleml.com/) - example library: [https://github.com/alecthomas/participle](https://github.com/alecthomas/participle))

Misc in Go and other languages

* [The Most Beautiful Program Ever Written](https://www.youtube.com/watch?v=OyfBQmvr2Hc) (Scheme)
* [Boundaries](https://www.destroyallsoftware.com/talks/boundaries), Gary Bernhardt

## Thanks

Thanks everyone for dropping by - great to see people join from across Europe and the globe!

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of upcoming events!




================================================
FILE: posts/meetup-18-invitation.md
================================================
---
title: "Virtual Meetup #18 invitation"
date: 2021-05-25T10:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #18 will take place Tuesday, [May 25,
2021 19:00 CEST](https://www.meetup.com/Leipzig-Golang/events/275871268/) and will be
virtual again. We'll use Zoom (find the link on [the event
page](https://www.meetup.com/Leipzig-Golang/events/275871268/) or below):

* [https://us02web.zoom.us/j/84647419671?pwd=Z0l2aDBrNWtqZDR5azRVbkRmeHdyUT09](https://us02web.zoom.us/j/84647419671?pwd=Z0l2aDBrNWtqZDR5azRVbkRmeHdyUT09)

We'll have lightning talk on a data topic.

As always, other lightning talks or contributions are welcome.

See you!




================================================
FILE: posts/meetup-18-wrapup.md
================================================
---
title: "Virtual Meetup #18 wrap-up"
date: 2021-05-26T12:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Seeking Data

Meetup #18 took place May 25, 2021 19:00 CEST, and was virtual again. We
continued the data and storage supertopic for this year had a lightning talk
called [Seeking Data](https://gist.github.com/miku/6dcffb5c104bc44709c330ec90682189).

![](/images/floppy_icon.gif)

We looked at a few patterns when working with data, e.g. I/O considerations,
what kernel hackers [think](http://varnish-cache.org/docs/trunk/phk/notes.html)
about the memory hierarchy, working with large scale data at rest, or how to
speed up container startup times (via [lazy
pulling](https://github.com/opencontainers/image-spec/issues/815)).


## Misc

* We learned about [Concise Encoding](https://concise-encoding.org/) and hope to
do a deep dive on this topic in a future meetup.
* Technologies, which are widespread, despite some flaws, are hard to replace,
  e.g. JSON might have issues, yet it is widely used and has lots of tooling
around it (might be an instance of [Worse is
Better](https://en.wikipedia.org/wiki/Worse_is_better)).
* Fuzzing is an interesting topic, and many tools are written in Go, e.g.
  [ffuf](https://github.com/ffuf/ffuf), a fast web fuzzer written in Go.
* For autoincrement URL snooping, you can use [urlbisect](https://github.com/miku/urlbisect).
* Go is not a classic functional programming language, but it supports function
  types ([Walkthrough: First-Class
Functions](https://golang.org/doc/codewalk/functions/), [Function
types](https://golang.org/ref/spec#Function_types)), which will allow for some
*higher order programming*.
* How to structure Go projects? It will depend. There is not one *standard* layout. Start small and then extend as
  needed. Some people enjoy putting old-school
[Makefiles](https://www.gnu.org/software/make/manual/make.html#Overview) in their project root as well.
* Testing strategies in Go: classic [Table-Driven
  Tests](https://github.com/golang/go/wiki/TableDrivenTests), [Test
Containers](https://github.com/testcontainers/testcontainers-go) (example:
testing [esbulk](https://github.com/miku/esbulk) against [a few major
versions](https://git.io/JGUUS) of elasticsearch).
* [ORM](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping) seems
  to have fallen out of favor a bit; switching databases is not that common
after all, so why not start with some lighter helpers like
[sqlx](https://github.com/jmoiron/sqlx), or specific database libraries.

## Upcoming 1-day Go workshop

There will be an online, 1-day workshop on Go at [Spartakiade
2021](https://spartakiade.org/), a developer-centric community conference (not
free, but with nice variety of topics plus a bag of conference swag). The [Go
workshop](https://github.com/miku/goforprogrammers) will be a condensed
overview of the language - feel free to join!

## Thanks

Thanks everyone for dropping by - great to see people join from across Europe and the globe!

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of upcoming events!




================================================
FILE: posts/meetup-19-invitation.md
================================================
---
title: "Virtual Meetup #19 invitation"
date: 2021-06-02T13:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #19 will take place Tuesday, [Jun 22,
2021 19:00 CEST](https://www.meetup.com/Leipzig-Golang/events/275871279) and will be
virtual again. We'll use Zoom (find the link on [the event
page](https://www.meetup.com/Leipzig-Golang/events/275871268/) or below):

* [https://us02web.zoom.us/j/84547890514?pwd=eXIzdXU2RGJmWmw4NzVjb0VMazZxZz09](https://us02web.zoom.us/j/84547890514?pwd=eXIzdXU2RGJmWmw4NzVjb0VMazZxZz09)

We'll have an input presentation about a
[core](https://www.mgasch.com/2021/01/listwatch-part-1/) distributed systems
project: [etcd](https://etcd.io/).

![](/images/watch.svg)

> etcd is a strongly consistent, distributed key-value store that provides a
reliable way to store data that needs to be accessed by a distributed system or
cluster of machines.

Inspired by
[Chubby](https://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf)
(2006) and originally developed by
[CoreOS](http://web.archive.org/web/20130805052834/http://coreos.com/)
(Container Linux) etcd is used today as a key building block in many cloud
infrastructure applications, such as Kubernetes.

Join us to learn and discuss all things Go - and etcd!

See you!


<!--

https://www.linkedin.com/posts/martin-czygan-58348842_virtual-meetup-19-invitation-activity-6812792933281005568-MfF1
https://twitter.com/embano1/status/1407000135062757388

-->



================================================
FILE: posts/meetup-19-wrapup.md
================================================
---
title: "Virtual Meetup #19 wrap-up"
date: 2021-06-23T12:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Journey to the Center of Kubernetes

Meetup #19 took place [Jun 22, 2021 19:00
CEST](https://www.meetup.com/Leipzig-Golang/events/275871279/), and was virtual
again. [Michael Gasch](https://www.mgasch.com) gave an input presentation on [etcd](https://etcd.io/) and did a deep dive into its
role in the container-orchestrator [kubernetes](https://kubernetes.io/).

The talk is based on a blog post: [Onwards to the Core: etcd](https://www.mgasch.com/2021/01/listwatch-part-1/). A shell transcript can be found here:

* [https://git.io/JnQ1n](https://gist.github.com/embano1/aedd423abe07c8012897658db15e139a)

We learned about the API of etcd, its data model, key value stores layouts,
append-only storage and compaction. A recording of the talk is [available on
YouTube](https://www.youtube.com/watch?v=Z9fwIzy0C_8):

[![Leipzig Gophers #19: A Journey in the Kubernetes ListerWatcher Rabbit Hole](http://img.youtube.com/vi/Z9fwIzy0C_8/0.jpg)](https://www.youtube.com/watch?v=Z9fwIzy0C_8)

A few highlights from the talk:

* etcd is a distributed key value store, using the [RAFT](https://raft.github.io/) consensus algorithm.

> Consensus algorithms allow a collection of machinesto work as a coherent
> group that can survive the fail-ures of some of its members. Because of this,
> they play akey role in building reliable large-scale software systems. -- [In Search of an Understandable Consensus Algorithm](https://raft.github.io/raft.pdf)

* etcd internally uses [boltdb](https://github.com/etcd-io/bbolt), especially
  their own fork, as the original project has been
[archived](https://github.com/boltdb/bolt) -- boltdb itself is a Go
implementation of the
[LMDB](https://en.wikipedia.org/wiki/Lightning_Memory-Mapped_Database) design,
which among many other things supports
[MVCC](https://en.wikipedia.org/wiki/Multiversion_concurrency_control)
* etcd had hierarchical, but moved to a flat key value design; albeit you can
  mimick hierarchy by using, e.g. path like notation; you can use the
`--prefix` flag to mimick recursive lists
* kubernetes `ResourceVersion` relates directly to the revision in etcd; which is a monotonically increasing counter
* kubernetes does not need to use etcd (others use [sqlite3](https://www.sqlite.org/index.html) or [Cosmos DB](https://docs.microsoft.com/en-us/azure/cosmos-db/introduction)), but etcd is the most common choice
* etcd comes with an HTTP and a gRPC API
* compaction in etcd is key to limit overall database size

Kubernetes uses etcd as a registry with components starting to watch specific keys for events.

* the difference between edge-driven (a sequence of events that leads to a
  state) and level-driven (transmit the whole state at once) design and its
reflection in the API (e.g. add, update, delete vs reconcile).

Some tools mentioned or used in the talk:

* [jq](https://stedolan.github.io/jq/), and its [base64](https://stedolan.github.io/jq/manual/#Formatstringsandescaping) capabilities
* [delta](https://github.com/dandavison/delta) for diffs
* [auger](https://github.com/jpbetz/auger) - encodes and decodes Kubernetes objects from the binary storage encoding used to store data to etcd
* [jaeger](https://www.jaegertracing.io/) or [zipkin](https://zipkin.io/) for tracing
* [zap](https://github.com/uber-go/zap) for structured logging

## Misc

* Does your favorite encoding schema support tree structures natively? Would you be interested in an encoding that supports one? Please share your ideas at [concise-encoding/issues/33](https://github.com/kstenerud/concise-encoding/issues/33)
* [Cuelang](https://cuelang.org/) - a language for configuration, database schemas, validation and more - e.g. to adress subtle issues like [different int max sizes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) across languages
* Two cloud native books: [Design Patterns for Cloud Native Applications](https://www.oreilly.com/library/view/design-patterns-for/9781492090700/) and [Cloud Native Patterns](https://www.oreilly.com/library/view/cloud-native-patterns/9781617294297/)
* [Peter Alvaro](https://scholar.google.com/citations?user=TKSjVTUAAAAJ&hl=en) at [Strange Loop](https://www.youtube.com/watch?v=R2Aa4PivG0g) (2015, Distributed Systems, Data Management Systems)

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of upcoming events!




================================================
FILE: posts/meetup-20-invitation.md
================================================
---
title: "AFK Summer Meetup #20 invitation"
date: 2021-06-29T13:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #20 will take place Tuesday, [Jul 20,
2021 18:30 CEST](https://www.meetup.com/Leipzig-Golang/events/279027402/) and
we'll meet outside for a cold drink - specifically at [Cantona
Leipzig](https://www.google.com/search?q=cantona+leipzig) ([on
OpenStreetMap](https://www.openstreetmap.org/node/243213647)).

[![](/images/Ani-Lemonade-tst.gif)](https://gifcities.org/?q=lemonade)

We have no specific agenda. We hope for good weather and look forward to meet you all in person, after all.

See you!



================================================
FILE: posts/meetup-20-wrapup.md
================================================
---
title: "Meetup #20 wrap-up"
date: 2021-07-24T12:00:00+02:00
draft: false
tags:
- summary
- meetup
---

We keep this short, as there would be too many interesting things to mention that come up, if curious and fun people meet.

Just to name a few things:
[1417599138796118016](https://twitter.com/embano1/status/1417599138796118016),
[Cue](https://cuelang.org/) and [Automerge](https://github.com/automerge/automerge) (JS), ...

A couple of people had distant memories of
[Pascal](https://en.wikipedia.org/wiki/Turbo_Pascal), which also [influenced
Go](https://golang.org/doc/faq#ancestors) e.g. in
[declarations](https://wiki.freepascal.org/Variable#declaration) or conditions
without [parentheses](https://wiki.freepascal.org/IF).

Many people use [vscode](https://code.visualstudio.com/docs/languages/go) or
[vim](https://github.com/fatih/vim-go), but there are also some dedicated Go
IDEs, e.g. [GoLand](https://www.jetbrains.com/go/) or [liteide](https://github.com/visualfc/liteide):

> LiteIDE is a simple, open source, cross-platform Go IDE.

A lot more topics were discussed, so [join our
meetup](https://www.meetup.com/Leipzig-Golang) to get notified of upcoming
events!




================================================
FILE: posts/meetup-21-invitation.md
================================================
---
title: "Virtual Meetup #21 invitation"
date: 2021-09-09T14:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #21 will take place Tuesday, [Sep 28,
2021 19:00 CEST](https://www.meetup.com/Leipzig-Golang/events/275871284/) and will be
virtual again. We'll use Zoom (find the link on [the event
page](https://www.meetup.com/Leipzig-Golang/events/275871284/) or below):

* [https://us02web.zoom.us/j/81869277732?pwd=ZldmeHp0eWs0N1YyTE94OUo2Z01vdz09](https://us02web.zoom.us/j/81869277732?pwd=ZldmeHp0eWs0N1YyTE94OUo2Z01vdz09)

We will have an input presentation by the author of [Concise
Encoding](https://concise-encoding.org/) about the project and its [Go
reference implementation](https://github.com/kstenerud/go-concise-encoding).
Concise encoding is a

> friendly data format for human & machine.

It addresses a modern dilemma:

> Today's data formats present us with a dilemma: Use text based formats that
> are bloated and slow, or use binary formats that humans can't read. Wouldn't
> it be nice to have the benefits of both and the drawbacks of neither?

> Concise Encoding is the next step in the evolution of ad-hoc hierarchical
> data formats, aiming to represent data securely in a power, bandwidth, and
> human friendly way.


Encodings need to balance a lot of tradeoffs between efficiency and ease of use; so
we're glad to hear from the author about some key decisions and how they manifest
themselves in the implementation.

![](/images/concise_encoding_table.png)

Join us to learn and discuss all things Go!

See you!


<!--

TODO: outreach.

-->



================================================
FILE: posts/meetup-21-wrapup.md
================================================
---
title: "Virtual Meetup #21 wrap-up"
date: 2021-10-03T14:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Concise Encoding

We had a great presentation about [Concise
Encoding](https://concise-encoding.org/), a proposed encoding standard that aims to
be human and machine friendly.

* [Presentation: go-concise-encoding](https://github.com/kstenerud/go-concise-encoding/blob/presentation/presentation-go-concise-encoding.md)

Here's a recording:

[![Leipzig Gophers #21: Concise Encoding](https://img.youtube.com/vi/_dIHq4GJE14/0.jpg)](https://www.youtube.com/watch?v=_dIHq4GJE14)

Concise encoding is element-oriented (similar to e.g. JSON) and tries to solve
some issues in existing standards, such as lack of types, performance and
security (one similar format is [Amazon Ion](https://amzn.github.io/ion-docs/)).

In prerelease stage, [feedback is highly
appreciated](https://github.com/kstenerud/concise-encoding), a reference
implementation written in Go exists at:

* [https://github.com/kstenerud/go-concise-encoding](https://github.com/kstenerud/go-concise-encoding)

We looked at the
[architecture](https://github.com/kstenerud/go-concise-encoding/blob/presentation/presentation-go-concise-encoding.md#architecture)
and example iterators and builders and
[takeaways](https://github.com/kstenerud/go-concise-encoding/blob/presentation/presentation-go-concise-encoding.md#takeaways).

Usage examples:

*  [https://play.golang.org/p/6_pD6CQVLuN](https://play.golang.org/p/6_pD6CQVLuN)

## Misc

Go has great tooling, especially for performance analysis: The
[pprof](https://pkg.go.dev/runtime/pprof) suite allows to understand runtime
and memory issues of your program.

Additional helpers exists, such as
[benchcmp](https://pkg.go.dev/golang.org/x/tools/cmd/benchcmp) or the
possibility to inspect changes over time, with the `-diff_base` flag:

```sh
$ go tool pprof -web -diff_base cpu-prev.prof cpu-now.prof
```

Allocations can kill performance and sometimes they are not obvious, e.g.
converting a byte slice to a string requires an allocation. However, you can
manipulate a string header directly - but this is
[unsafe](https://pkg.go.dev/unsafe):

* [https://play.golang.org/p/t9KGXPmoMkA](https://play.golang.org/p/t9KGXPmoMkA)

A few more interesting projects:

* [https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/fieldalignment](https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/fieldalignment)
* [https://github.com/dominikh/go-tools/tree/master/cmd/structlayout](https://github.com/dominikh/go-tools/tree/master/cmd/structlayout)
* [https://github.com/segmentio/encoding/tree/master/json](https://github.com/segmentio/encoding/tree/master/json)

And a blog on contemporary computing architectures and performance:
[https://lemire.me/blog/](https://lemire.me/blog/).

Also, if you ever searched for

> a gentle, opinionated, hands-on introduction to NixOS

please check out:

* [https://github.com/kstenerud/nixos-beginners-handbook](https://github.com/kstenerud/nixos-beginners-handbook)

Finally, a short free course to improve your technical writing:

* [https://developers.google.com/tech-writing](https://developers.google.com/tech-writing)


Thanks [Karl](https://github.com/kstenerud) for the presentation and everyone for dropping by.

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!




================================================
FILE: posts/meetup-22-invitation.md
================================================
---
title: "Virtual Meetup #22 invitation"
date: 2021-10-06T11:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For virtual [meetup #22](https://www.meetup.com/Leipzig-Golang/events/275871290/) -
scheduled [2021-10-26, 19:00 CEST](https://www.meetup.com/Leipzig-Golang/events/275871290/) - we'll have an interesting presentation on a
security related topic: Confidential Computing with Go.

[Join us via Zoom](https://us02web.zoom.us/j/85343669228?pwd=clhoM2FuazBrRFRVSEVwd2cxc1BXUT09).

----

## Confidential Computing with Go

Confidential computing is a new security paradigm that protects data not only
at rest or in transit but also in use. A hardware-based trusted execution
environment provides an isolated area, a secure enclave within a CPU, that
protects sensitive data while being processed.

Until recently, confidential computing frameworks were mostly restricted to
C/C++ with a significantly reduced system interface. To make confidential
computing more accessible and use it in cloud-native contexts, we created
EGo. [EGo](https://www.ego.dev/) is an open-source
framework that enables users to build, debug, and run confidential apps with
Go.

In this talk, I’ll give a brief introduction to confidential computing and show
why Go is a great fit for it. I’ll present the architecture design of EGo and
how you can easily build your own confidential apps. Finally, I’ll share some
hands-on examples and use cases.

----

Bio:

Moritz Eckert leads cloud-related development at [Edgeless Systems](https://www.edgeless.systems/) and is the
primary maintainer of [MarbleRun](https://marblerun.sh/). Moritz is a seasoned engineer and has
presented at top-tier conferences including Usenix Security Symposium, Conf42,
and OC3 in the past. Alongside his professional work, Moritz is part of
Shellphish, one of the highest-ranked competitive hacking groups in the world.

----

Join us to discuss all things Go and security!

See you!


<!--

TODO: outreach.

https://www.linkedin.com/posts/martin-czygan-58348842_security-golang-leipzig-activity-6858703511115358208-gGa4
https://twitter.com/cvvfj/status/1452982081198362635

-->



================================================
FILE: posts/meetup-22-wrapup.md
================================================
---
title: "Virtual Meetup #22 wrap-up"
date: 2021-10-31T14:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Confidential Computing with Go

We had a great presentation by [Moritz Eckert](https://twitter.com/m1ghtymo)
from [edgeless systems](https://edgeless.systems) about Confidential Computing
with Go, and especially [ego.dev](https://ego.dev), a modified Go compiler and
additional tooling which allows you to run code within a trusted execution
environment like [Intel® SGX
enclaves](https://en.wikipedia.org/wiki/Software_Guard_Extensions) with zero
code changes.

Here's a recording of the talk, code walkthroughs and Q&A:

[![Leipzig Gophers #22: Confidential Computing with Go](https://img.youtube.com/vi/oycZLZdI8s8/0.jpg)](https://www.youtube.com/watch?v=oycZLZdI8s8)

A few highlights from the talk:

* a trusted execution environment can be implemented in various ways, Intel SGX
  being one that is usable today (with others in development, e.g. [Arm
  CCA](https://www.arm.com/company/news/2021/06/arm-cca-will-put-confidential-compute-in-the-hands-of-every-developer), ...)
* there are various applications, from security and privacy enhancements (e.g.
  medical records; private contact discovery in
  [Signal](https://github.com/signalapp/ContactDiscoveryService) to data
  sharing options between mistrusting parties, e.g. federated learning)
* the [SGX
  architecture](https://sgx101.gitbook.io/sgx101/sgx-bootstrap/overview) is
not necessarily trival to implement as is &mdash; however, [ego](https://www.ego.dev/) reduces the amount of
work required for secure deployments of Go projects considerably: you can get started with a few commands and zero code changes
* [ego](https://ego.dev) builds on top of [OpenEnclave](https://openenclave.io/sdk/), an open source SDK that provides consistent API surface across enclave technologies

We looked at a few examples from the [ego.dev](https://github.com/edgelesssys/ego) project:

* [helloworld](https://github.com/edgelesssys/ego/tree/master/samples/helloworld)
* [remote attestation](https://github.com/edgelesssys/ego/tree/master/samples/remote_attestation), which shows how to connect to a secured server

Confidential computing is most likely becoming more deployed in the coming
years and it's really nice to be able to experiment and deploy solutions in Go
today.

## More information

* [Intel® Software Guard Extensions (Intel® SGX) Developer Guide](https://download.01.org/intel-sgx/linux-2.2/docs/Intel_SGX_Developer_Guide.pdf)
* [Edgeless Systems GitHub](https://github.com/edgelesssys), open source components for Confidential Computing
* [Open Enclave](https://openenclave.io), SDK
* [RandomClave](https://arxiv.org/abs/2107.09470) (2021) analyzes potential risks in a PoC ransomware attack using SGX
* [Everything You Should Know about Intel SGX Performance on Virtualized Systems](https://hal.archives-ouvertes.fr/hal-02947792/document) (2019), looks at performance implications of SGX
* [Bunnie](https://www.bunniestudios.com/) [mentioning secure enclaves](https://youtu.be/Fw5FEuGRrLE?t=534)
* more papers on the topics of Intel SGX and Confidential Computing on [Archive Scholar](https://scholar.archive.org/search?q=%22intel+sgx%22+OR+%22confidential+computing%22&sort_order=time_desc)


----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!




================================================
FILE: posts/meetup-23-invitation.md
================================================
---
title: "Meetup #23 invitation"
date: 2021-11-05T16:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Corona [emergency ordinance (SächsCoronaNotVO §7
2021-11-19)](https://www.coronavirus.sachsen.de/download/SaechsCoronaNotVO-2021-11-19.pdf#page=7)
becoming effective on Monday forces us to move this meeting online. Our talk
schedule stays the same.

Join us for [meetup
#23](https://www.meetup.com/Leipzig-Golang/events/280096219/) Nov 23, 2021
19:00 CET via Google Meet:
[https://meet.google.com/sym-ohzu-spb](https://meet.google.com/sym-ohzu-spb).

----

~~We're always interested in connecting with the local Go community and we're
thrilled that for [meetup #23](https://www.meetup.com/Leipzig-Golang/events/280096219/) on Nov 23, 2021
[Sciendis](https://www.sciendis.de/) reached out to us and offered to host an
event at their site.~~

~~The key facts:~~

* Date and Time: [Tuesday, November 23, 2021, 19:00 CET](https://www.meetup.com/Leipzig-Golang/events/280096219/)
* ~~Location: [Sciendis GmbH](https://www.sciendis.de/), [Riemannstraße 32, 04107 Leipzig](https://www.openstreetmap.org/way/48244220#map=17/51.33113/12.37591)~~
* ~~Pandemic-Policy: **2G** ("vaccinated | recovered", checked on-site, [mdr.de](https://web.archive.org/web/20220813054447/https://www.mdr.de/nachrichten/sachsen/corona-verordnung-zwei-g-strengere-regeln-kabinett-100.html))~~

We'll have two input presentations, one by Sciendis on their tech stack and a
short talk on Writing a Data Web Service in Go.

Schedule:

* 19:00 ~~doors open~~, [Zoom open](https://us02web.zoom.us/s/81296841393)
* 19:15 Sciendis Tech Talk

> Overview of the Sciendis tech stack and architecture. Why did we choose Go,
> and why MongoDB? What happens when you want to migrate your project from one
> cloud provider to another?

* 19:45 Lighting Talk - A Data Web Service

> A short run down of options and choices when it comes to building a
> data-intensive API service in Go; with code snippets from a recent real world
> open source project (Update: Link is broken: `https://github.com/miku/labe/tree/main/tools/spindel`).

* 20:00 Discussion (BYOP - bring your own Pizza + Drinks)

[Join us](https://www.meetup.com/Leipzig-Golang/events/280096219/) to discuss
all things Go!

See you, there!

PS. Just one last thing: If the pandemic situation deteriorates to a point where
real-world meetings get prohibited, we'll let you all know in time and will switch
to a (usual) online meetup with Zoom.

----

About Sciendis (German):

> Die Gründer von Sciendis, Michael Aleithe und Philipp Skowron, haben sich
> 2019 das Ziel gesetzt die Dokumentation von Wunden im Pflegebereich einfacher
> und schneller zu gestalten. Dadurch sinkt der Arbeitsaufwand für
> Pflegepersonal, was mehr Zuwendung dem Patienten gegenüber bedeutet.

> Das Produkt der Sciendis GmbH nennt sich Wundera und ist eine App auf iOS und
> Android. Mit ihr lässt sich ein klares Bild über den Wundheilungsverlauf
> aufzeigen.

> Derzeit umfasst das Unternehmen 12 Beschäftigte und wächst zunehmend. Es
> bestehen Förderungen vom Europäischen Fond für regionale Entwicklung, der
> Sächsischen Aufbaubank und des Technologiegründerfonds Sachsen.


<!--

TODO: outreach.

* https://www.linkedin.com/posts/martin-czygan-58348842_leipzig-golang-meetup-23-activity-6868910290419929089-7pl6

-->



================================================
FILE: posts/meetup-23-wrapup.md
================================================
---
title: "Virtual Meetup #23 wrap-up"
date: 2021-11-26T14:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Summary

Meetup #23, Nov 23, 2021, originally planned on-site at
[Sciendis](https://www.sciendis.de/), moved online again, due to the [pandemic
regulations](http://web.archive.org/web/20220805062948/https://www.coronavirus.sachsen.de/download/SaechsCoronaNotVO-2021-11-19.pdf).

We had two input presentations, one about *Go in a startup environment* at
Sciendis and reasons why Go may be a good choice. And one lightning talk about
[a data web service](https://github.com/miku/dwstalk).

## Go in a startup environment

Sciendis develops a React Native application called
[Wundera](https://wundera.health/) with the backend service being written in
Go, in a classic cloud setup. Moving from six to two services (user, patient)
proved beneficial, reduced code duplication and also lowered the data
serialization overhead.

A few points why Go has been attractive:

* easier language with fewer constructs results in less (cognitive) overhead; faster onboarding, maybe less code
* Go compiles to native Code, minimal requirements on deploy target
* Go garbage collector is minimalistic as well (see e.g. [Go GC
  Settings](https://archive.fosdem.org/2019/schedule/event/gogc/attachments/slides/3134/export/events/attachments/gogc/slides/3134/Go_GC_Settings_Bryan_Boreham.pdf))
* Go is still a fast language
* approachable concurrency
* community agreement over code style (no more code reviews discussion
  important, yet shallow problems of style)
* the Go approach to evolve abstractions during the development process using
  [structural typing](https://en.wikipedia.org/wiki/Structural_type_system) may mirror project evolution better than upfront
designs

Interestingly, with Go you learn and use more the language itself (and its
standard library) than a specific framework.

## A data web service

A quick overview on a small web service built on [sqlite](https://sqlite.org),
[net/http](https://pkg.go.dev/net/http) and
[gorilla](https://www.gorillatoolkit.org/) handlers.

[![](https://github.com/miku/dwstalk/raw/main/static/Untitled-2020-06-15-1740.png)](https://github.com/miku/dwstalk)

Notes: [A data web service](https://github.com/miku/dwstalk).

## Misc

* Java is drafting a lightweight concurrency model as an alternative to
  threads, see:
[https://openjdk.java.net/jeps/8277131](https://openjdk.java.net/jeps/8277131)

> Drastically reduce the effort of writing, maintaining, and observing
> high-throughput concurrent applications that make the best use of available
> hardware through virtual threads, a lightweight user-mode thread
> implementation with dramatically reduced costs.

What a concurrency unit is depends on your perspective:

> This results in the asynchronous style of programming, that not only requires
> a separate and incompatible set of APIs, but breaks the connection between
> the logical application unit (transaction) and the platform's unit (thread),
> which makes the platform unaware of the application's logical units.

This argument appears also in [Concurrency in
Go](https://www.oreilly.com/library/view/concurrency-in-go/9781491941294/)
(which we discussed in [meetup #7](https://golangleipzig.space/posts/meetup-7-wrapup/)).

* For ideas on idiomatic Go, see: [Effective Go](https://go.dev/doc/effective_go)
* Go has its dark corners too - we are collecting some of them in [Go Gotchas](https://github.com/golang-leipzig/gotchas)
* End-to-end CI pipeline with GitHub
  [actions](https://github.com/features/actions),
[goreleaser](https://github.com/goreleaser/goreleaser) and
[ko](https://github.com/google/ko):
[https://github.com/embano1/ci-demo-app](https://github.com/embano1/ci-demo-app)
* Test options:
  [https://github.com/stretchr/testify](https://github.com/stretchr/testify),
for integration tests [test
containers](https://github.com/testcontainers/testcontainers-go) can be used
(example test suite [starting elasticsearch
servers](https://github.com/miku/esbulk/blob/69db0fab576ff53ef40653f8696b3942e6e26734/run_test.go#L78-L106)
to test an indexing tool).
* In general, having your environment wrapped in containers (and a
  docker-compose to set them up) is a popular technique
([discussion](https://news.ycombinator.com/item?id=25859588)) VS Code supports
it, too:
[https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers) especially via a `devcontainers.json` file in your repo:

> A `devcontainer.json` file in your project tells VS Code how to access (or
> create) a development container with a well-defined tool and runtime stack.

* Productive Postgres with Go: [GopherCon 2020: Johan Brandhorst-Satzkorn - A Journey to Postgres Productivity with Go](https://www.youtube.com/watch?v=AgHdVPSty7k)
* ORM tools seem to be a bit less used with Go, but options are [GORM](https://gorm.io/index.html), or also [ent](https://entgo.io/)
* [sqlite](https://sqlite.org/) is an awesome database, and since it's a stable platform, all kinds of
  project develop around or on top of it, like [streaming
replication](https://github.com/benbjohnson/litestream), or
[trough](https://github.com/internetarchive/trough); video recommendation: [David Crawshaw SQLite and Go](https://www.youtube.com/watch?v=RqubKSF3wig)
* For mocking time in tests: [https://github.com/benbjohnson/clock](https://github.com/benbjohnson/clock)
* Domain-driven design is a popular technique, originating from Eric Evans 2003
  book [Domain Driven Design](https://openlibrary.org/works/OL4464385W), with a
good summary being: [DDD
Distilled](https://openlibrary.org/works/OL19546213W/) -- we asked, how a DDD
and idiomatic Go fits together; in essence DDD is a tool and if you start with
a tool (e.g. DDD), you may miss to start with the actual problem, you are trying to solve
(that said, tools are great and certainly necessary)
* If projects get bigger, put an `ARCHITECTURE.md` into the repo, e.g. [like
  this](https://github.com/kstenerud/go-concise-encoding/blob/master/ARCHITECTURE.md).
* Tabular test strategy to decouple language from *domain* content ([example](https://gitlab.com/internetarchive/refcat/-/blob/master/skate/testdata/verify.csv) dealing with JSON document comparisons).
* Test augmentation library for Go: [https://pkg.go.dev/gotest.tools/assert](https://pkg.go.dev/gotest.tools/assert); also useful in tests to compare compound values: [google/go-cmp](https://github.com/google/go-cmp)
* If you want to test large data structures, snapshot testing may work: save
  expected output once, then compare against that snapshot afterwards
(snapshotting is also usable for frontend, e.g. making sure your screen did not
change by comparing a rendering to a previous version in your test suite)
* Writeup on generics in Go: [Go Generics - A Quick Overview](https://www.klingt.net/articles/go-generics-a-quick-overview.html)


Video recommendations:

* [GopherCon 2020: Johan Brandhorst-Satzkorn - A Journey to Postgres Productivity with Go](https://www.youtube.com/watch?v=AgHdVPSty7k)
* [GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps](https://www.youtube.com/watch?v=oL6JBUk6tj0)
* [dotGo 2019 - Kat Zień - Achieving maintainability with hexagonal architecture](https://www.youtube.com/watch?v=vKbVrsMnhDc)
* [David Crawshaw SQLite and Go](https://www.youtube.com/watch?v=RqubKSF3wig)
* Channel: [https://www.youtube.com/c/MarcelDempers](https://www.youtube.com/c/MarcelDempers)

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!




================================================
FILE: posts/meetup-24-invitation.md
================================================
---
title: "Virtual Meetup #24 invitation"
date: 2021-12-09T11:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For virtual [meetup #24](https://www.meetup.com/Leipzig-Golang/events/277710643/) - scheduled
[2021-12-21, 19:00 CET](https://www.meetup.com/Leipzig-Golang/events/277710643/) we're inviting
you to test your knowledge of Go. We're planning a fun quiz and we're going
to have a few prizes, too!

As any language, Go has dark corners and
[gotchas](https://github.com/golang-leipzig/gotchas) but also some lesser known
features.

We're lucky to have [Jetbrains](https://www.jetbrains.com/), [Manning Publications](https://www.manning.com/), [O'Reilly
Media](https://www.oreilly.com/) and [AboutYou](https://www.aboutyou.com) sponsoring vouchers and books for this event.
Additionally, we are giving away Go pins and posters.

[Join us via Google Meet](https://meet.google.com/ous-mtys-wsx).

![](/images/gopher10th-small-50.jpg)

Join us to discuss all things Go and win prizes!

See you!


<!--

TODO: outreach.

https://www.linkedin.com/posts/martin-czygan-58348842_security-golang-leipzig-activity-6858703511115358208-gGa4
https://twitter.com/cvvfj/status/1452982081198362635

-->



================================================
FILE: posts/meetup-24-wrapup.md
================================================
---
title: "Virtual Meetup #24 wrap-up"
date: 2021-12-22T01:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Quiz night!

Thanks everyone for joining our quiz night at virtual meetup #24, Dec 21, 2021;
we got through 16 of our 24 prepared questions - from easy to hard. Most prizes
are already on their way.

A special thanks 💕 to our sponsors:

* [O'Reilly Media](https://www.oreilly.com/pub/cpc/323592)
* [Manning Publications](https://manning.com)
* [About You](https://www.aboutyou.com) (check out [jobs](https://corporate.aboutyou.de/en/jobs/senior-golang-developer))
* [Jetbrains](https://www.jetbrains.com/)

Happy holidays!

![](/images/meetup-24-prizes.png)

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!




================================================
FILE: posts/meetup-25-invitation.md
================================================
---
title: "Virtual Meetup #25 invitation"
date: 2022-02-15T13:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Join us for [meetup #25](https://www.meetup.com/Leipzig-Golang/events/282941887/) Feb 22, 2022
19:00 CET via Google Meet:
[https://meet.google.com/fqi-juff-zwy](https://meet.google.com/fqi-juff-zwy).

We'll take a closer look at the [upcoming Go 1.18](https://tip.golang.org/doc/go1.18) release, especially [generics](https://tip.golang.org/doc/go1.18#generics).

Thanks to the generous support from [JetBrains](https://www.jetbrains.com/) and
[Manning Publications](https://www.manning.com/), we can share a JetBrains
personal subscription and an ebook - [100 Go Mistakes and How to
Avoid Them](https://www.manning.com/books/100-go-mistakes-and-how-to-avoid-them) - with our participants.

Join us to discuss all things Go.


<!--

TODO: outreach.

* https://www.linkedin.com/posts/martin-czygan-58348842_leipzig-golang-meetup-23-activity-6868910290419929089-7pl6

-->



================================================
FILE: posts/meetup-25-wrapup.md
================================================
---
title: "Virtual Meetup #25 wrap-up"
date: 2022-03-06T01:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Go 1.18 and generics

[Meetup #25](https://www.meetup.com/Leipzig-Golang/events/282941887/) was
virtual and we were glad to have an international audience again.

We had a great presentation about the upcoming [Go 1.18](https://tip.golang.org/doc/go1.18) release, including generics and fuzzing:

* [Go 1.18 with some fuzzing and a focus on generics](https://www.klingt.net/articles/go-1-18-with-some-fuzzing-and-a-focus-on-generics.html)

As always, Go 1.18 will include lots of smaller tweaks and improvements, like a
new [debug/buildinfo](https://pkg.go.dev/debug/buildinfo) package, which

> provides access to information embedded in a Go binary about how it was built,

or [MaxBytesHandler](https://pkg.go.dev/net/http@master#MaxBytesHandler), a
middleware to protect e.g. against denial-of-service type attacks.

You can [read the blog
post](https://www.klingt.net/articles/go-1-18-with-some-fuzzing-and-a-focus-on-generics.html)
to take a deeper dive.

## Misc

* the influencial [How to become a Hacker](http://www.catb.org/~esr/faqs/hacker-howto.html) rev 1.52 notes (2020-01-03):

> Go makes a place as a plausible learning language, displacing Java. [...]

And further:

> A better alternative to Java is to learn Go. This relatively new language is
> pretty easy to move to from Python, and learning it give you a serious leg up
> on the possible next step, which is learning C. Additionally, one of the
> unknowns about the next few years is to what extent Go might actually
> displace C as a systems-programming language. There is a possible future in
> which that happens over much of C's traditional range.

Other programmers reflecting and discussing this topic:
[HN23377186](https://news.ycombinator.com/item?id=23377186),
[LO](https://lobste.rs/search?q=%22how+to+become+a+hacker%22&what=stories&order=newest), ...

* Go 1.18 adds a new environment variable, `GOAMD64`, which splits support
  for 64-bit x86 processors into [4 different levels](https://github.com/golang/go/wiki/MinimumRequirements#amd64), currently - unlocking
various optimizations. Pop quiz: Do you know, which instruction has also been
named [The NSA instruction](https://vaibhavsagar.com/blog/2019/09/08/popcount/)?
Hint: it belongs to "v2" and has to do with the [Hamming weight](https://en.wikipedia.org/wiki/Hamming_weight) of a string
* [sync.Pool](https://pkg.go.dev/sync#Pool) helps to reduce GC pressure, by allowing reuse of allocated memory, akin to a [free list](https://en.wikipedia.org/wiki/Free_list)
* we gave away a [Jetbrains](https://www.jetbrains.com/) Personal Subscription and a copy of [100 mistakes in
  Go and how to avoid
them](https://www.manning.com/books/100-go-mistakes-and-how-to-avoid-them) --
thank you, sponsors!

----

🇺🇦 &mdash; and one more thing: нет войны! Stop the
[War](https://en.wikipedia.org/wiki/2022_Russian_invasion_of_Ukraine)! -- to help locally: [Leipzig helps Ukraine](https://leipzig-helps-ukraine.de).


----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!




================================================
FILE: posts/meetup-26-invitation.md
================================================
---
title: "Virtual Meetup #26 invitation"
date: 2022-04-25T07:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Join us for [meetup #26](https://www.meetup.com/Leipzig-Golang/events/282941906/) Apr 26, 2022
19:00 CEST via Google Meet:
[https://meet.google.com/weh-dtvn-gpk](https://meet.google.com/weh-dtvn-gpk).

We'll have two lightning talks:

* Calculating Type Signatures
* The rsync for the cloud era: Rclone

Other lightning talks and project discussion are welcome - join us to discuss all things Go.


<!--

TODO: outreach.


-->



================================================
FILE: posts/meetup-26-wrapup.md
================================================
---
title: "Virtual Meetup #26 wrap-up"
date: 2022-04-27T01:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Type Signatures and Cloud Storage

[Meetup #26](https://www.meetup.com/Leipzig-Golang/events/282941906/) was
virtual again and we were glad to meet Gophers from Leipzig and beyond. We had a two short talks and code walkthroughs on type signatures and rclone, a
cloud storage tool.

### Type Signatures

How would you generate a unique fingerprint for a type? A fingerprint that would change, even
if the name of the type stays the same, but e.g. fields in a struct are renamed, added or removed?

The term [Type Signature](https://en.wikipedia.org/wiki/Type_signature) is
often used in the context of functions and methods and contains name and
parameters of a function.

In Java, we have [serialVersionUID](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html):

> If a serializable class does not explicitly declare a `serialVersionUID`, then
> the serialization runtime will calculate a default `serialVersionUID` value for
> that class based on various aspects of the class, as described in the
> Java(TM) Object Serialization Specification. However, it is strongly
> recommended that all serializable classes explicitly declare `serialVersionUID`
> values, since the default `serialVersionUID` computation is highly sensitive to
> class details that may vary depending on compiler implementations, and can
> thus result in unexpected InvalidClassExceptions during deserialization.

In case of struct types, one way would be to serialize the zero value of
the type and compute some hash, e.g.
[FNV](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function)
or [other](https://pkg.go.dev/hash#section-directories).

### Cloud storage tool: rclone

[Rclone](https://rclone.org/) is a

> command-line program to manage files on cloud storage. It is a feature-rich
> alternative to cloud vendors' web storage interfaces. Over 40 cloud storage
> products support rclone including S3 object stores, business & consumer file
> storage services, as well as standard transfer protocols.

Beside file transfers rclone allows to mount filesystems, analyze disk usage
(similar to [ncdu](https://dev.yorhel.nl/ncdu)) and expose cloud storage
providers with classic protocols like FTP, webdav or http.

Find out more: [The rsync for the cloud era: Rclone](https://github.com/miku/rclone-lightning-talk).


## Misc

* rclone does not seem to support [upspin](https://upspin.io/) (nor [ipfs](https://github.com/rclone/rclone/issues/128), for that matter)
* in 2022 go is still niche!
  [152](https://web.archive.org/web/20220427105818/https://www.stepstone.de/5/ergebnisliste.html?what=golang&searchOrigin=Homepage_top-search)
vs
[3420](https://web.archive.org/web/20220427105843/https://www.stepstone.de/5/ergebnisliste.html?what=java&searchOrigin=Homepage_top-search)
jobs for "golang" vs "java" (are you looking for a "golang" job? check out: [aboutyou.de/jobs](https://corporate.aboutyou.de/en/our-jobs))
* for more unusual uses of [reflect](https://pkg.go.dev/reflect) ([laws](https://go.dev/blog/laws-of-reflection)) take a look at: [https://github.com/kstenerud/go-subvert](https://github.com/kstenerud/go-subvert)
* tricky things: [Go interfaces, the tricky parts](https://www.timr.co/go-interfaces-the-tricky-parts/), [Go Gotchas](https://github.com/golang-leipzig/gotchas)
* new things: [Go 1.18 with some fuzzing and a focus on generics](https://www.klingt.net/articles/go-1-18-with-some-fuzzing-and-a-focus-on-generics.html)
* large changes in Go 1.18 like generics and fuzzying are seemingly not used by all projects immediately (example: [mockery](https://github.com/vektra/mockery))
* postgres go driver: [lib/pq](https://github.com/lib/pq), [jackc/pgx/v4](https://github.com/jackc/pgx/tree/v4); a new kind of ORM for Go: [bun](https://bun.uptrace.dev)
* for quick online tools: [CyberChef](https://gchq.github.io/CyberChef/)
* more interactive online things: [https://messwithdns.net](https://messwithdns.net)
* sad, but true as ever: [https://xkcd.com/2347](https://xkcd.com/2347) (discussing [jq](https://stedolan.github.io/jq/))
* tiny demo: we had a short demo of a Go program called *runpad*, collaborative code editing - related to [mob programming](https://mob.sh)

![](/images/runpad-screenie.png)

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!




================================================
FILE: posts/meetup-27-invititation.md
================================================
---
title: "Virtual Meetup #27 invitation"
date: 2022-05-09T13:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For [meetup #27](https://www.meetup.com/Leipzig-Golang/events/285798083/) &mdash; on May 10, 2022 19:00 CEST &mdash; we'll have an interactive coding session around [Go generics](https://go.dev/blog/intro-generics).

We start with a problem and will develop two versions, one with and one without generics.

For a refresher on Generics see:

* [refs/spec](https://golang.org/ref/spec#Type_parameter_declarations)
* [https://go.dev/doc/tutorial/generics](https://go.dev/doc/tutorial/generics)
* [https://www.klingt.net/articles/go-1-18-with-some-fuzzing-and-a-focus-on-generics.html](https://www.klingt.net/articles/go-1-18-with-some-fuzzing-and-a-focus-on-generics.html)
  (see also: [#25](https://golangleipzig.space/posts/meetup-25-wrapup/))

Join us to discuss all things Go via Google Meet: [https://meet.google.com/wxm-argz-hqh](https://meet.google.com/wxm-argz-hqh)


<!--

TODO: outreach.

-->



================================================
FILE: posts/meetup-27-wrapup.md
================================================
---
title: "Virtual Meetup #27 wrap-up"
date: 2022-05-11T10:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Algorithm Challenge

[Meetup #27](https://www.meetup.com/Leipzig-Golang/events/285798083/) took
place on 2022-05-10 19:00 CEST and was virtual again and we had an interesting
problem-solving live-coding challenge.

Slides and code: [gitlab.com/telo_tade/prefix_suffix_arrays](https://gitlab.com/telo_tade/prefix_suffix_arrays)

### Problem

> You are given a list of numbers. Find its longest slice that sums to zero.


First, clarify:

* Is it a consecutive list of numbers?
* What kind of numbers, and how many?

We collaboratively went from a naive *O(n^3)* solution to a slightly improved
*O(n^2)* one using an auxiliary data structure: a [prefix sum
array](https://en.wikipedia.org/wiki/Prefix_sum).

![](/images/Prefix_sum_16.svg)

Takeaways:

* Any auxiliary data structure that takes *O(n)* to build can be considered
  *free*, as most of the time a problem requires to iterate over all the data
  at least once anyway.
* Building a prefix sum array requires *O(n)* and is simple to build, e.g. with
  a recursive formulation.

The key insight may become obvious in an example:

```
input:      [1, 2, 3,  4, -3, -1,  9]
prefix sum: [1, 3, 6, 10,  7,  6, 15]
```

Two elements in the prefix array that have the same value (e.g. 6) allow us to
determine a subsequence that sums to zero.

A final pass through the prefix sum array allows to keep track of repeated
numbers and find the longest sequence. If you iterate throught the prefix sum
array from front and back simultaneously, you can stop at the first occurence
(same time complexity, still).

We implemented a version that defined a type set for numbers; similar to the
ones found in
[golang.org/x/exp/constraints](https://pkg.go.dev/golang.org/x/exp/constraints).

In this case, a non-generic version may use reflection and be slower and more
inconvenient to write.

Find out more at:
[gitlab.com/telo_tade/prefix_suffix_arrays](https://gitlab.com/telo_tade/prefix_suffix_arrays);
we enjoyed the interactive format. If that's something for you too, check out
Hamburg Whiteboard Coders meetup (Update: `https://www.meetup.com/hamburg-whiteboard-coders/` Meetup group has been deleted).

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!




================================================
FILE: posts/meetup-28-invititation.md
================================================
---
title: "Virtual Meetup #28 invitation"
date: 2022-06-20T12:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For [meetup #28](https://www.meetup.com/leipzig-golang/events/282941935/) &mdash; on Jun 21, 2022 19:00 CEST &mdash; we'll have two lightning talks:

* *Never forget to handle errors, rediscovered the 1000th time* -- Leandro Santiago from [lightmeter.io](https://lightmeter.io/)
* A glance at *glamorous command line apps* with [charm](https://charm.sh) -- [Martin Czygan](https://github.com/miku)

![](/images/leipzig-gophers-28-charm.png)

Join us to discuss all things Go via Google Meet: [https://meet.google.com/mpb-ypdi-est](https://meet.google.com/mpb-ypdi-est) - see you!


<!--

TODO: outreach.

-->



================================================
FILE: posts/meetup-28-wrapup.md
================================================
---
title: "Virtual Meetup #28 wrap-up"
date: 2022-06-22T14:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Errors and Glamour

[Meetup #28](https://www.meetup.com/leipzig-golang/events/282941935/) took
place on 2022-06-21 19:00 CEST virtually and was one of our most visited meetup to date - thank you all for dropping by.

We had a short presentation *Never forget to handle errors, rediscovered the
1000th time* by [Leandro](https://www.linkedin.com/in/leandrosansilva/) from
[Lightmeter](https://lightmeter.io/) ([gitlab](https://gitlab.com/lightmeter/),
[job](http://web.archive.org/web/20230619014526/https://www.ycombinator.com/companies/lightmeter/jobs/PB5qMli-devops-engineer))
about a few ways to handle errors in Go.  The compiler does not complain about
unchecked errors, but some [linters do](https://github.com/kisielk/errcheck).

The presentation can be found here:
[presentation.md](https://gitlab.com/leandrosansilva/talks/-/blob/master/errors-golang/presentation.md)
-- Thanks [Leandro](https://www.linkedin.com/in/leandrosansilva/) for your
great input!

A discussion about errors reminded us that as a first measure, errors need to be
handled, actually. There's even some research on that - e.g. compiled here into
Software Engineering's Greatest Hits:
[https://youtu.be/HrVtA-ue-x0?t=595](https://youtu.be/HrVtA-ue-x0?t=595).

We had another input talk about [Text User
Interfaces](https://github.com/miku/glamline), using the
[charm](https://github.com/charmbracelet/) libraries as example. Text
interfaces are nice (and retro) but their widespread adoption is debatable.
Nonetheless, these interface can be efficient and pleasant to use.

The presentation showed some examples, e.g.
[glow](https://github.com/charmbracelet/glow) for reading markdown:

```shell
$ glow https://tinyurl.com/m-28-wp
```

or a stock [ticker app](https://github.com/achannarasappa/ticker):

![](/images/ticker.png)

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!




================================================
FILE: posts/meetup-29-invitation.md
================================================
---
title: "Summer Drinkup #29 invitation"
date: 2022-06-29T13:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Summer's getting [hot](http://web.archive.org/web/20220619123725/https://www.mdr.de/nachrichten/deutschland/panorama/hitzewelle-efim-rekord-sachsen-anhalt-thueringen-100.html), so let's meet AFK for cold drinks on [Jul 14, 2022 19:00
CEST](https://www.meetup.com/leipzig-golang/events/286871302) at [Soltmann Bar](https://www.soltmann-bar.de/)
([OSM](https://www.openstreetmap.org/node/814769372)). We'll have some [Go swag](https://go.dev/blog/10years) to give away!

[![](/images/water020.gif)](https://gifcities.org/?q=water)

We have no specific agenda. We hope for good weather and look forward to meet you all in person, after all.

See you!



================================================
FILE: posts/meetup-29-wrapup.md
================================================
---
title: "Summer Drinkup #29 wrap-up"
date: 2022-07-17T14:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## All things Go and beyond

We met on 2022-07-14 at [Soltmann Bar](https://www.soltmann-bar.de/) and it was great to see
everyone in person and also to welcome new Gophers.

In September, we hope to follow up with an [in-person meetup](https://www.meetup.com/leipzig-golang/events/286871365/) featuring a
presentation from [immudb](https://github.com/codenotary/immudb):

> immudb is database with built-in cryptographic proof and verification. It can
> track changes in sensitive data and the integrity of the history will be
> protected by the clients, without the need to trust the server.

In case you did not know: [Immutability changes
everything](https://www.cidrdb.org/cidr2015/Papers/CIDR15_Paper16.pdf) ☯️

Have a pleasant summer and see you in fall!

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!




================================================
FILE: posts/meetup-3-invitation.md
================================================
---
title: "Meetup #3 invitation"
date: 2019-04-04T13:15:00+02:00
draft: false
tags:
- announcement
- meetup
---

[Meetup #3](https://www.meetup.com/Leipzig-Golang/events/260338152/)
is scheduled for Friday, April 12, 2019, 19:00 CEST at
[Basislager](https://www.basislager.co/).

We will take a closer look at [Go
modules](https://github.com/golang/go/wiki/Modules) for dependency management.
We also have one potential proposal for a lightning talk with the cryptic title
"Ramen Linux".

As always, please bring your own code, projects, ideas, Go and Cloud-Native questions and let's discuss them. See you there.





================================================
FILE: posts/meetup-3-wrapup.md
================================================
---
title: "Meetup #3 wrap-up"
date: 2019-04-14T23:15:00+02:00
draft: false
tags:
- meetup
- summary
---

[Meetup #3](https://www.meetup.com/Leipzig-Golang/events/260338152/)
took place on Friday, April 12, 2019, 19:00 CEST at
[Basislager](https://www.basislager.co/). We are now officially part of the [Go
Developer Network](https://www.meetup.com/pro/go/) (GDN, currently 103 groups with 47418 members in 37 countries), which was [announced
in March 2019](https://blog.golang.org/go-developer-network).

> The GDN is a collection of Go user groups working together with a shared
> mission to empower developer communities with the knowledge, experience, and
> wisdom to build the next generation of software in Go.

{{< h2 >}}Meetup topics{{< /h2 >}}

We took a closer look at [Go
modules](https://github.com/golang/go/wiki/Modules) for dependency management
by highlighting a few passages from the [Go and versioning design
documents](https://research.swtch.com/vgo). The
[repository](https://github.com/golang-leipzig/gomodintro) and
[Slides](https://github.com/golang-leipzig/gomodintro/blob/master/Slides.md)
([PDF](https://github.com/golang-leipzig/gomodintro/blob/master/Slides.pdf))
are online.

Furthermore, we had a demonstration of some strange behaviour in the
[gorilla/handlers](https://github.com/gorilla/handlers) package:
[gorilla/handlers.CompressHandler](https://github.com/gorilla/handlers/blob/ac6d24f88de4584385a0cb3a88f953d08a2f7a05/compress.go#L57-L64)
might gzip twice! If you want to see the bug in action,
[klingtnet](https://github.com/klingtnet) got you covered:

* [spreadshirt/gorilla-handlers-double-gzip-bug](https://github.com/spreadshirt/gorilla-handlers-double-gzip-bug)

Interestingly, the
[nytimes/gziphandler](https://github.com/nytimes/gziphandler) does not exhibit
the double compression behavior. The solution becomes a bit clearer, when you take into account,
that each HTTP middleware will act on its own and has limited means to pass
information to another handler (e.g. via HTTP headers). If the middleware acts on a
header (e.g.
[Accept-Encoding](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding)),
then it can choose to modify the request (it's [a
pointer](https://golang.org/pkg/net/http/#HandlerFunc.ServeHTTP), in contrast
to the response writer).

{{< h2 >}}From Go to Cloud to Linux{{< /h2 >}}

Clouds and Cloud-Native technologies would be nothing without Linux. The [Linux
Meetup Leipzig](https://www.meetup.com/Linux-Meetup-Leipzig/) hosts interesting
talks, e.g. a series on container technologies (by [Sascha
Grunert](https://github.com/saschagrunert)) or on [tunnels and
honeypots](https://www.meetup.com/Linux-Meetup-Leipzig/events/260563903/).
Since there is overlap in topics, we might organize a joint event in the
future.

{{< h2 >}}Postponed topics{{< /h2 >}}

* worker pool implementation benchmarks (from [#2](https://golangleipzig.space/posts/second-meetup-wrapup/))
* Ramen Linux lightning talk (Update: `https://ramenlinux.com` is no more)

{{< h2 >}}References{{< /h2 >}}

* [github.com/golang-leipzig/gomodintro](https://github.com/golang-leipzig/gomodintro)
* [github.com/spreadshirt/gorilla-handlers-double-gzip-bug](https://github.com/spreadshirt/gorilla-handlers-double-gzip-bug)
* The [gorilla toolkit](https://www.gorillatoolkit.org/)
* [github.com/nytimes/gziphandler](https://github.com/nytimes/gziphandler)

The tool for inspecting Go binaries and list their deps is called [goversion](https://github.com/rsc/goversion):


    $ go get -u rsc.io/goversion


### Misc

* [Lightning Talk: Brad Fitzpatrick - The nuclear option, go test -run=InQemu](https://www.youtube.com/watch?v=69Zy77O-BUM) (2018)
* A blog post by Russ Cox on the [software dependency
  problem](https://research.swtch.com/deps), which reflect on the many
different ways, languages manage dependencies today.

> Dependency managers now exist for essentially every programming language.
> Maven Central (Java), Nuget (.NET), Packagist (PHP), PyPI (Python), and
> RubyGems (Ruby) each host over 100,000 packages. The arrival of this kind of
> fine-grained, widespread software reuse is one of the most consequential
> shifts in software development over the past two decades. And if we’re not
> more careful, it will lead to serious problems.




================================================
FILE: posts/meetup-30-invitation.md
================================================
---
title: "Hybrid Meetup #30 invitation"
date: 2022-09-09T11:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

## immudb

For [meetup #30](https://www.meetup.com/leipzig-golang/events/286871365/)
&mdash; on Sep 20, 2022 19:00 CEST &mdash; we're thrilled to welcome [Dennis
Zimmer](https://www.linkedin.com/in/denniszimmer) and [Bartłomiej
Święcki](https://github.com/byo) from [Codenotary](https://codenotary.com/),
who will talk about their open source database project
[immudb](https://immudb.io/).

[![](/images/immudb-mascot-small-30.png)](https://github.com/codenotary/immudb)

> immudb is a ledger database that has been developed with performance,
> scalability and versatility in mind [...]

> Data stored in immudb is cryptographically coherent and verifiable. Unlike
> blockchains, immudb can handle millions of transactions per second, and can
> be used both as a lightweight service or embedded in your application as a
> library. immudb runs everywhere, on an IoT device, your notebook, a server,
> on-premise or in the cloud.

Also check out Bartłomiej's talk at FOSDEM 2022: [Don't trust us, trust the
math behind immudb: How immudb protects safety critical
data](https://fosdem.org/2022/schedule/event/safety_dont_trust_us_trust_the_math_behind_immudb/).

To quote [Pat Helland](https://twitter.com/pathelland) in [Immutability Changes Everything](https://www.cidrdb.org/cidr2015/Papers/CIDR15_Paper16.pdf) (2015):

> There is an inexorable trend towards storing and sending immutable data. We
> need immutability to coordinate at a distance and we can afford immutability,
> as storage gets cheaper.

## Hybrid Meetup

This meetup will be hybrid:

1. You can join us online via [Zoom](https://us06web.zoom.us/j/87886291736?pwd=aXRFdFBvVHdQSzg0MzVkaGovNnByZz09)
2. You can join us in person at [Lancaster University Leipzig Campus](https://www.google.com/search?channel=fs&client=ubuntu&q=lancaster+leipzig) &mdash; [Nikolaistraße 10, 04109 Leipzig](https://www.openstreetmap.org/node/7925192825#map=19/51.34107/12.37820)

Perks of attending our in-person meetup at Lancaster University Leipzig Campus:

We are giving away a copy of [Cloud Native
Go](https://www.oreilly.com/library/view/cloud-native-go/9781492076322/) -
courtesy of [O'Reilly Media](https://www.oreilly.com/pub/cpc/323592) as well as
one [Zimaboard](https://www.zimaboard.com/), the *world’s first hackable single
board server*,  courtesy of [Codenotary](https://codenotary.com/)!

![](/images/meetup_30_goodies_tile.png)




[Join us](https://www.meetup.com/leipzig-golang/events/286871365/) to discuss all things Go and immutability. See you!

----

Note: We changed the location since a WW2 bomb has been found close to our
original meetup location (Basislager):
[https://www.mdr.de/nachrichten/sachsen/leipzig/bombe-fund-sperrkreis-evakuierung-polizei-100.html](https://www.mdr.de/nachrichten/sachsen/leipzig/bombe-fund-sperrkreis-evakuierung-polizei-100.html).


<!--

TODO: outreach.

* [x] https://twitter.com/embano1/status/1568208137982722049
* [x] slack
* [x] https://www.linkedin.com/posts/martin-czygan-58348842_hybrid-meetup-30-invitation-activity-6975911656400764928-CCBm?utm_source=share&utm_medium=member_desktop

-->



================================================
FILE: posts/meetup-30-wrapup.md
================================================
---
title: "Hybrid meetup #30 wrap-up"
date: 2022-09-23T14:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Secure data with immudb - a fast, immutable database

Leipzig Gophers Hybrid Meetup #30 took place [2022-09-20 19:00
CEST](https://www.meetup.com/leipzig-golang/events/286871365/) at [Lancaster
University Leipzig](https://www.lancasterleipzig.de/) Campus.

We had a great presentation by [Dennis
Zimmer](https://www.linkedin.com/in/denniszimmer) and [Bartłomiej
Święcki](https://www.linkedin.com/in/bswiecki/)
([GitHub](https://github.com/byo)) from [CodeNotary](https://codenotary.com/)
about their cutting edge, open source, immutable database project
[immudb](https://immudb.io/).

Presentation slides are available here:

[![](/downloads/codenotary-immudb_Sep-22_dz_1.pptx_cover-50.jpg)](https://golangleipzig.space/downloads/codenotary-immudb_Sep-22_dz_1.pptx.pdf)

Originally, the CodeNotary team looked at blockchains to implement the idea of
tamperproof data store - but found that they could build something more performant.
This work resulted in [immudb](https://immudb.io), a lightweight, high-speed
immutable database which is written in Go and uses
[Merkle-Trees](https://en.wikipedia.org/wiki/Merkle_tree) at its core.

Starting with a key-value database, immudb by now supports a dialect and subset
of SQL as well and can speak the Postgres [wire
protocol](https://www.postgresql.org/docs/current/protocol.html). Some
challenges include the immutable representation of statements like `ALTER
TABLE` and the like.

The project takes advantage of Go's excellent deployment story and is set up in
a few minutes. Currently, [SDKs](https://github.com/codenotary/immudb#how-to-integrate-immudb-in-your-application) are available for
Java, Go, .NET, Python and nodejs - which makes integration in applications
much simpler (see also
[client examples](https://github.com/codenotary/immudb-client-examples)).

To ensure the validity of the data, clients and server work together: Clients
can keep track of the state of the database (which takes only a few bytes) and
validate against the server.

To learn more about the project and the internals of immudb, please also check
out the FOSDEM 2022 talk by Bartłomiej Święcki: [Don't trust us, trust the math
behind immudb: How immudb protects safety critical data (with math and
cryptography)](https://archive.fosdem.org/2022/schedule/event/safety_dont_trust_us_trust_the_math_behind_immudb/) and the paper: [immudb: A Lightweight, Performant Immutable
Database](http://codenotary.s3.amazonaws.com/Research-Paper-immudb-CodeNotary_v3.0.pdf).

Apart from the tech-talk and discussion, we gave away goodies: A
[Zimaboard](https://www.zimaboard.com/), courtesy of
[CodeNotary](https://codenotary.com/) and a copy of [Cloud Native
Go](https://learning.oreilly.com/library/view/cloud-native-go/9781492076322/),
courtesy of [O'Reilly Media](https://www.oreilly.com/pub/cpc/323592).

We may feature a project built with immudb and the winner of the Zimaboard in
the future and hope *Cloud Native Go* will be a page turner!

![](/images/meetup-30-tile.png)


## Misc

* Thanks to [Lancaster University Leipzig](https://www.lancasterleipzig.de/) for providing a meetup space on a short notice (change of plans
caused by a [bomb
find](http://web.archive.org/web/20220923115054/https://www.mdr.de/nachrichten/sachsen/leipzig/bombe-entschaerft-evakuierung-sperrkreis-polizei-100.html)
near [Basislager](https://www.basislager.co/) - our original meetup location).
* Security of systems can increase, when the number of witnesses go up. A
  curious example: The New York Times has been hiding a blockchain since 1995,
apparently: [The World’s Oldest Blockchain Has Been Hiding in the New York
Times Since
1995](https://www.vice.com/en/article/j5nzx4/what-was-the-first-blockchain)

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!





================================================
FILE: posts/meetup-31-invitation.md
================================================
---
title: "Hybrid Meetup #31 invitation"
date: 2022-10-13T13:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

## Clouds, Monsters and Streams

For meetup #31
&mdash; on [Oct 18, 2022 19:00 CEST](https://www.meetup.com/leipzig-golang/events/282941951/) &mdash; we're happy to have (remote) guests
from Berlin! We'll have a short talk and demo by personal cloud builders
[deta.sh](https://www.deta.sh/): *The personal cloud and the monster that makes
it*.

[![](/images/flying-20.gif)](https://www.deta.sh/)

We're excited to find out, what makes deta fly!

Depending on time and interest, we have two other lightning talk registrations:

* *Reading the last bytes of a stream in Go* -- [blog post](https://www.klingt.net/articles/reading-the-last-bytes-of-a-stream-in-go.html)
* ~~A quick summary of *[Cloud Native Go](https://learning.oreilly.com/library/view/cloud-native-go/9781492076322/)* ([O'Reilly Media](https://www.oreilly.com/pub/cpc/323592), 2021)~~ (postponed)


## Hybrid Meetup

This meetup will be hybrid:

1. You can join us online via [Google Meet](https://meet.google.com/vxs-hhus-aoe)
2. You can join us in person at [Basislager Leipzig](https://www.basislager.co/) &mdash; [Peterssteinweg 14, 04107 Leipzig](https://www.openstreetmap.org/node/3504864558), [Google Maps](https://goo.gl/maps/RZ7DRiqZSnWTTBwJA)

Perks of attending our in-person meetup at Basislager Leipzig:

* free drinks (limited, FIFO)
* Go swag: [pins and posters](https://go.dev/blog/10years)


[Join us](https://www.meetup.com/leipzig-golang/events/282941951/) to discuss all things Cloud and Go. See you!


<!--

TODO: outreach.

* [ ] slack

-->



================================================
FILE: posts/meetup-31-wrapup.md
================================================
---
title: "Hybrid Meetup #31 wrap-up"
date: 2022-10-22T13:00:31+02:00
draft: false
tags:
- summary
- meetup
---

## Personal Cloud

On [2022-10-18 19:00 CEST][meetup] we had our #31 meetup, this time at [Basislager Coworking][basislager] and with a hybrid setup (that still needs some improvement, but we're getting there).

[Max Eusterbrock][max] and his colleague [Aavash Shrestha][aavash] told us about [_The personal cloud and the monster that makes it_][slides].  In this presentation they gave us a preview on one of their new platforms that provides one-click hosting of applications, which they demonstrated with the deployment of a note taking service *knotro*.  One of the great things about this new platform was that anyone is able to install services, without requiring preliminary knowledge on cloud services, and that the client also owns the data that is produced by the installed service.  This is in contrast to common cloud services where you just create an account and all your data is owned and stored by whoever runs the service.  Aavash gave us a deep dive on the architecture of the new platform, explaining how they isolate workloads, and also how they designed it to easily scale with increased load.

## Misc

One of our meetup attendees asked about creating PDF files in Go, which is a potential topic for a future meetup, but because of the lack of experience with this domain we could just recommend an article that was featured in a recent [golangweekly][goweekly] issue called [How To Create a PDF in Go: A Step-By-Step Tutorial][gopdf] ([medium](https://medium.com/the-godev-corner/how-to-create-a-pdf-in-go-157355429a94)).

Also, someone stumbled upon a very common [Go gotcha][gotchas] which is about [value references in range loops][gofaq].  There was a [Go language proposal by Russ Cox][proposal], just a couple of days ago, to implicitly redefine loop variables.  Assume we have the following code

```go
xs := []*string{}
for _, v := range []string{"a", "b", "c"} {
    xs = append(xs, &v)
}
```

what do you think will be the value of xs after the loop?  It's not what most people would expect, that is `["a", "b", "c"]`.  To get the expected output you need to redefine the loop variable

```go
xs := []*string{}
for _, v := range []string{"a", "b", "c"} {
    v := v
    xs = append(xs, &v)
}
```

which is not obvious ([playground](https://go.dev/play/p/OpE2m09Q-OP)).

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!



[slides]: /downloads/deta-leipzig-gophers-31-slides.pdf
[meetup]: https://www.meetup.com/leipzig-golang/events/282941951/
[basislager]: https://www.basislager.co/
[deta]: https://www.deta.sh/
[max]: https://de.linkedin.com/in/xeust
[aavash]: https://de.linkedin.com/in/aavshr
[knotro]: https://knotro.com/getting-started/deploy-your-app
[goweekly]: https://golangweekly.com
[gopdf]: https://scribe.rip/the-godev-corner/how-to-create-a-pdf-in-go-157355429a94
[gotchas]: https://github.com/golang-leipzig/gotchas
[proposal]: https://github.com/golang/go/discussions/56010
[gofaq]: https://go.dev/doc/faq#closures_and_goroutines



================================================
FILE: posts/meetup-32-invitation.md
================================================
---
title: "Hybrid Meetup #32 invitation"
date: 2022-11-09T13:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

## Gridfuse x Leipzig Gophers

For meetup #32 on Tuesday [Nov 29, 2022 19:00
CET](https://www.meetup.com/leipzig-golang/events/282941959/) we're thrilled to
collaborate with [Gridfuse](https://gridfuse.com/), a start-up in the heart of Leipzig!

[Jörg](https://www.linkedin.com/in/j%C3%B6rg-werner-b49798105/) from Gridfuse
will give a presentation on how they use
[telegraf](https://www.influxdata.com/time-series-platform/telegraf/)
([code](https://github.com/influxdata/telegraf)) to persist timeseries data in
[influxdb](https://github.com/influxdata/influxdb) and will also talk about
their open source contributions to the telegraf [nats](https://en.wikipedia.org/wiki/NATS_Messaging) plugin.

> Gridfuse is a 2022-founded start-up that has made it its mission to swift
> the balance of power in the energy domain. The share of Renewables needs to
> increase and we want to build the technological base for this!

> Gridfuse is a team of 14+ tech- and energy experts who want to build software,
that has a positive impact on current and future generations!

[![](/images/linecurve.gif)](https://gifcities.org/)

## Hybrid Meetup

This meetup will be hybrid:

1. You can join us in person at the [Gridfuse](https://www.gridfuse.com/) office within [Design Offices Leipzig](https://www.designoffices.de/standorte/buero-mieten-leipzig/leipzig-post), located [Augustusplatz 1-4, 04109 Leipzig](https://www.openstreetmap.org/node/7230218702), [Google Maps](https://goo.gl/maps/VeSEcUGvUjZRCcUK8) -- The office is on the 2nd floor, please [follow the directions](/downloads/Directions_Meetup_Gridfuse.pdf).
2. You can join us online via [meet.jit.si/LeipzigGophers32](https://meet.jit.si/LeipzigGophers32)

Perks of attending our in-person meetup at Gridfuse offices:

* drinks and 🍕
* Go swag: stickers, [pins and posters](https://go.dev/blog/10years)


[Join us](https://www.meetup.com/leipzig-golang/events/282941959/) to discuss all things time series, energy and Go. See you!


<!--

TODO: outreach.

* [x] https://gophers.slack.com/archives/C152YB9UZ/p1669380581663709 (5784)
* [x] https://www.linkedin.com/feed/update/urn:li:share:7000773081384284161/ (900+ as of 2022-11-25)

-->



================================================
FILE: posts/meetup-32-wrapup.md
================================================
---
title: "Hybrid Meetup #32 wrap-up"
date: 2022-11-30T13:00:31+02:00
draft: false
tags:
- summary
- meetup
---

## Gridfuse x Leipzig Gophers


Leipzig Gophers #32 took place on [2022-11-29 19:00 CET][meetup] and we had a
great meetup at [Gridfuse'](https://gridfuse.com/) new office in the heart of
Leipzig. Gridfuse was founded in 2022 and builds software to bundle renewable
energy sources (wind, solar, ...) to react to market prices - in Germany and
Europe.

Predicting future energy prices is one key component, and renewables pose their own set
of challenges since they depend more on external factors (like the
weather, [and more](https://fatcat.wiki/release/rayqayptajhptbxx2al6s3wuy4)...). Bundling (many smaller) assets is important, too -- e.g. 1-20MW is a relevant target range.

Affected by the [European energy crisis
2022](https://www.consilium.europa.eu/en/infographics/eu-measures-to-cut-down-energy-bills/)
the previously used gas-powered plants, which stabilized the grid, are
faded out - and the need to attain the same stabilization goals with renewable energy sources
becomes much more urgent.

Gridfuse choose Go, since a few components like influxdb and NATS use Go, but
also because of the overall good performance profile of the language.

[![](/images/gridfuse-gophers-s.png)](https://www.linkedin.com/posts/lisaekern_gridfuse-leipziggophers-leipzigstartup-activity-7003703311040143360-PnjL?utm_source=share&utm_medium=member_desktop)

## Data Collectors and Flows

We heard from [Jörg](https://www.linkedin.com/in/j%C3%B6rg-werner-b49798105/)
about parts of their backend, data collection architecture ([Slides](/downloads/Meetup-Telegraf.pdf)).

Data flows from asset connectors, into [NATS](https://nats.io/), then
via [telegraf](https://docs.influxdata.com/telegraf/v1.24/) into
[influxdb](https://www.influxdata.com/).

The telegraf plugin has no capability to parse subjects from NATS messages,
only the payload, so Gridfuse started to implemented this feature and
contributed it to upstream:
[influxdata#12274](https://github.com/influxdata/telegraf/pull/12274). Subject parsing is similar to [MQTT](https://mqtt.org/).


Running influxdb is an interim solution, as historical data can also be put
into other (more static) storage systems like S3 or relational databases for the use case.

## Energy efficiency of programming languages

We also had a lightning talk about a paper: [Ranking Programming Languages by Energy
Efficiency](https://haslab.github.io/SAFER/scp21.pdf)
([fatcat](https://fatcat.wiki/release/dccqbrxp55fozmzmqytgmgysaq)): [Go energy efficiency](https://github.com/miku/goenergy), and a few areas [where Go shines](https://github.com/miku/goenergy#where-go-shines).

## Thanks!

We'd like to thank [Gridfuse](https://gridfuse.com) for hosting a wonderful tech+social event
and the insights into a fascinating domain - and last but not least the incredible Gopher cookies :)

[![](/images/gridfuse-gopher-cookies-s.png)](https://www.linkedin.com/posts/lisaekern_gridfuse-leipziggophers-leipzigstartup-activity-7003703311040143360-PnjL?utm_source=share&utm_medium=member_desktop)

----

[Join our meetup](https://www.meetup.com/Leipzig-Golang) to get notified of
upcoming events!



[meetup]: https://www.meetup.com/leipzig-golang/events/282941959/



================================================
FILE: posts/meetup-33-invitation.md
================================================
---
title: "Winter Drinkup #33 invitation"
date: 2022-12-02T19:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Meetup #33 on Tuesday [Dec 20, 2022 19:00
CET](https://www.meetup.com/leipzig-golang/events/282941972/) will be an
offline-only (AFK) meetup -- it's getting cold, so we're meeting for warm
drinks at [Cantona Leipzig](https://www.google.com/search?q=cantona+leipzig)
([on OpenStreetMap](https://www.openstreetmap.org/node/243213647)).

[![](/images/christmasxpalm01.gif)](https://gifcities.org/?q=christmas)

[Join us](https://www.meetup.com/leipzig-golang/events/282941959/) to discuss
all things Go, past, future and beyond. See you!


<!--

TODO: outreach.

-->



================================================
FILE: posts/meetup-33-wrapup.md
================================================
---
title: "Winter Drinkup #33 wrap-up"
date: 2022-12-21T20:00:31+02:00
draft: false
tags:
- summary
- meetup
---

## Drinkup Notes

![](/images/cantona_pixel.png)

We met 2022-12-20 19:00 at Café Cantona, with no specific Go agenda, for a
great exchange of ideas and experiences - too many to capture them in a blog
post, so here's just a fraction of the topics we passed (slightly categorized):

## Reading list

* [Grokking Functional Programming](https://www.manning.com/books/grokking-functional-programming) - a very readable introduction to the topic; more academic angles include the classic [Out of the tar pit](https://curtclifton.net/papers/MoseleyMarks06a.pdf) or [Purely Functional Data Structures](https://openlibrary.org/works/OL1863182W/Purely_functional_data_structures) (always nice to [find references to this book in code](https://github.com/golang/go/blob/78fc81070a853d08a71f70fa20b2093f5535e6c5/src/net/http/transport.go#L1256-L1271))
* in 04/2022, a JS version of [SICP](https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs) (1984) came out: [SICP JS edition](https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs,_JavaScript_Edition), there's an [open access version](https://sourceacademy.org/sicpjs/index), too
* [Podman in Action](https://www.manning.com/books/podman-in-action), container tools with a nice Unix backdrop
* the classic, albeit just five year old [DDIA](https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/)
* [100 mistakes in Go and how to avoid them](https://www.manning.com/books/100-go-mistakes-and-how-to-avoid-them) - actionable advice for Go code improvements

## Software General

* [ISO 28500:2017](http://bibnum.bnf.fr/WARC/), aka [WARC](https://web.archive.org/web/20120619151338/http://www.iwaw.net/05/kunze.pdf) is how you can capture the web - and there are many libraries and tools around this format, just to name a few: [Heritrix](https://en.wikipedia.org/wiki/Heritrix), [brozzler](https://github.com/internetarchive/brozzler), [webrecorder](https://github.com/webrecorder), [warcprox](https://github.com/internetarchive/warcprox), [replayweb.page](https://replayweb.page/), [and more](https://github.com/iipc/awesome-web-archiving)

If you have [wget](https://www.gnu.org/software/wget/) ([1.14 or later](https://wiki.archiveteam.org/index.php/Wget_with_WARC_output)) installed, you can already create WARC files yourself:

```shell
$ wget -rkc --warc-file golangleipzig.space --warc-cdx https://golangleipzig.space
```

<!--

```
Opening WARC file ‘golangleipzig.space.warc.gz’.

--2022-12-21 16:26:47--  https://golangleipzig.space/
Resolving golangleipzig.space (golangleipzig.space)... 185.199.110.153, 185.199.109.153
Connecting to golangleipzig.space (golangleipzig.space)|185.199.110.153|:443... connected.
HTTP request sent, awaiting response...

...

$ ls -hgG golangleipzig.space.*
-rw-rw-r-- 1 88K Dec 21 16:27 golangleipzig.space.cdx
-rw-rw-r-- 1 18M Dec 21 16:27 golangleipzig.space.warc.gz

$ wc -l golangleipzig.space.cdx # urls captured
352 golangleipzig.space.cdx

$ shuf -n 3 golangleipzig.space.cdx | awk '{print $1}'
https://golangleipzig.space/images/meetup_30_goodies_tile.png
https://golangleipzig.space/images/christmasxpalm01.gif
https://golangleipzig.space/tags/summary/
```

-->

Since web archiving aims for a complete preservation, the whole HTTP exchange
is recorded - which can be analyzed later. The [HTTP Archive](https://httparchive.org/) creates various reports, e.g. a
[yearly state of the web report](https://almanac.httparchive.org/en/2022/).

* Parquet is a great columnar storage format, with a [few libraries](https://pkg.go.dev/search?q=parquet) in Go, too, e.g. from the [Apache Arrow](https://github.com/apache/arrow/tree/master/go) project

There's a new wave of big data and analytics tools written in [rust](https://www.rust-lang.org/), e.g. the [distributed SQL query engine ballista](https://github.com/apache/arrow-ballista) ([NY statprog meetup recording](https://www.youtube.com/watch?v=ZZHQaOap9pQ&t=397s)), and others

* Did you know? Google BigQuery does not have `MEDIAN` - [workaround](https://www.pascallandau.com/bigquery-snippets/calculate-median/)

## Go

* JSON matcher: [quamina](https://github.com/timbray/quamina)

> Quamina implements a data type that has APIs to create an instance and add
> multiple Patterns to it, and then query data objects called Events to
> discover which of the Patterns match the fields in the Event.

* Go generics utils: [gogu](https://github.com/esimov/gogu)

> Gogu is a versatile, comprehensive, reusable and efficient concurrent-safe
> utility functions and data structures library taking advantage of the Go
> generics. It was inspired by other well established and consecrated
> frameworks like lodash or Apache Commons and some concepts being more closer
> to the functional programming paradigms.

* Functional options [pattern](https://github.com/tmrts/go-patterns/blob/master/idiom/functional-options.md) (we talked about that in
  [#13](https://golangleipzig.space/posts/meetup-13-wrapup/)) has some
advantages over the still widely used technique of passing config structs to
functions.

### A Go interface puzzle

> Declare an interface where it is used, not where it is implemented. Unless
> the interface is well discovered.

Via: [1605116543553019905](https://twitter.com/inancgumus/status/1605116543553019905) -- join the [conversation](https://twitter.com/embano1/status/1605173329836404738) ...

Our take: It's a - slightly subtle - consequence of structural
typing: An interface can be *added later*, in an ad-hoc style, e.g. to facilitate testing
or to establish a protocol of limited scope.

Example: A function only uses `client.Do` for HTTP requests. We can create an ad-hoc interface, so we are able to use the default HTTP client from the standard
library or some third-pary library as well (as long at it has a suitable `Do` method). We can define a Doer:

```go
type Doer interface {
    Do(req *http.Request) (*http.Response, error)
}
```

and let our function work with this `Doer` interface instead of a concrete type.
This interface should be defined where it is used (and not in the net/http
package, for example). On the flipside, sometimes you need central interfaces,
e.g. [io.Reader](https://pkg.go.dev/io#Reader), or a database abstraction
layer, or a [filesystem abstraction
layer](https://github.com/rclone/rclone/blob/5ac8cfee56b58c242c60b8fd319b8a2dd4420c9b/fs/types.go), and so on. These are *well discovered*.

> In a structural setting, a type expression is a closed entity: it carries
> with it all the information that is needed to understand its meaning. In a nominal system, we
> are always working with respect to some global collection of type names and
> associated deﬁnitions. This tends to make both deﬁnitions and proofs more
> verbose.

More on nominal and structural typing can be found in [Chapter
19.3](https://www.cis.upenn.edu/~bcpierce/tapl/contents.pdf#page=5) of [Types
and programming
languages](https://en.wikipedia.org/wiki/Types_and_Programming_Languages)
[TAPL](https://www.cis.upenn.edu/~bcpierce/tapl/).

## Python

* [pip-tools](https://github.com/jazzband/pip-tools) is a small tool for pinning dependencies and predictable builds
* Python in 2022 with [gradual typing](https://en.wikipedia.org/wiki/Gradual_typing) feels like a static language now - a long way since [Static Typing Where Possible, Dynamic Typing When Needed:
The End of the Cold War Between Programming Languages](http://web.archive.org/web/20060111181527/http://pico.vub.ac.be/~wdmeuter/RDL04/papers/Meijer.pdf) (discussed at the time by [LtU](http://web.archive.org/web/20240112074349/lambda-the-ultimate.org/node/834))

## API Design

* [Expanding objects](https://stripe.com/docs/api/expanding_objects) - another example in the wild: [fatcat API](https://api.fatcat.wiki/v0/release/qaa7ysrn5rfbnkjec7rtrkcao4?expand=files) (*List of sub-entities to expand in response. For releases, 'files', 'filesets, 'webcaptures', 'container', and 'creators' are valid.*)
* [Idempotency tool for AWS lambda](https://docs.powertools.aws.dev/lambda/python/2.4.0/utilities/idempotency/)

Related, from [Cloud Native Go](https://www.oreilly.com/library/view/cloud-native-go/9781492076322/) (a book we gave away in [#30](https://golangleipzig.space/posts/meetup-30-wrapup/), courtesy of [O'Reilly Media](https://www.oreilly.com/pub/cpc/323592)), page 168:

> [Holly Cummins](https://hollycummins.com/), the worldwide development community practice lead for the IBM
Garage, famously said that *if cloud native has to be a synonym for anything, it would be idempotent*.

* [Joshua Bloch: Bumper-Sticker API Design](https://www.infoq.com/articles/API-Design-Joshua-Bloch/) ([Slides](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/32713.pdf))


## Cloud

* [Running kubernetes with rootless podman on WSL2](http://web.archive.org/web/20230207204652/https://www.salilmishra.ml/posts/k8s-podman-wsl2/)

> Running Kubernetes with rootless podman is documented on both kind and
> minikube but to get it up and running on [WSL2](https://learn.microsoft.com/en-us/windows/wsl/install) requires some additional tweaks
> as by default WSL2 uses init daemon, instead of systemd and you have to
> enable cgroupv2 explicitly. [...](http://web.archive.org/web/20230207204652/https://www.salilmishra.ml/posts/k8s-podman-wsl2/)

* The perennial question: how can you beat *cloud* infrastructure from a
  developer experience (and economical) standpoint? For example, how can we create a robust, scalabale
queue with less effort than writing e.g. [15 lines in
Go](https://github.com/awsdocs/aws-doc-sdk-examples/blob/5458e2b9fd71abb916bca4ed53d8c1a894e4fe87/go/example_code/sqs/sqs_createqueues.go#L42-L59) (including error handling);
(btw, [SQS](https://aws.amazon.com/blogs/aws/aws-blog-the-first-five-years/)
started in 2004); at some places, [infra works differently](https://archive.org/details/jonah-edwards-presentation) [❤️](https://archive.org/donate/)


## Misc

* Culture: [Visual Studio Code is designed to fracture](https://ghuntley.com/fracture/)
* How to improve as an software engineer? We got some ideas, like keeping a
  (public) technical journal, but are curious about what you think - so [join
our meetup](https://www.meetup.com/Leipzig-Golang) to connect and to get
notified of upcoming events!
* Airtags and Parcel: [DHL "Lost" My AirTag Parcel (but I knew where it was)](https://www.youtube.com/watch?v=W8SER24F0U8)

## Happy holidays!

![](/images/sierpinski50.jpg)




================================================
FILE: posts/meetup-34-invitation.md
================================================
---
title: "Hybrid Meetup #34 invitation"
date: 2023-01-18T16:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For meetup #34 on Tuesday [Feb 21, 2023 19:00
CET](https://www.meetup.com/leipzig-golang/events/290666161/) we'll have a
few lightning talks and experience reports about some upcoming, exciting [Go
1.20](https://tip.golang.org/doc/go1.20) features, e.g. related to
[coverage](https://tip.golang.org/doc/go1.20#cover), [error handling](https://tip.golang.org/doc/go1.20#errors), end-to-end tests in containerized environments and more.

We'll meet

* in person at [Basislager](https://www.basislager.co/), [Peterssteinweg 14, 04107 Leipzig](https://www.openstreetmap.org/node/3504864558)
* and online via [meet.jit.si/LeipzigGophers34](https://meet.jit.si/LeipzigGophers34).

Join us to discuss all things Go 1.20 and beyond.

See you!

----

![](/images/meetup-34-prompt-quiz.png)

> Concurrency is not parallelism as mural painting -- [Stable Diffusion](https://stablediffusionweb.com/)




<!--

TODO: outreach.

* [x] https://www.linkedin.com/feed/update/urn:li:activity:7029457796731428864/
* [x] https://gophers.slack.com/archives/C152YB9UZ/p1676152189258909 (remotemeetup, 5834 members)
* [x] linkedin, reminder: https://www.linkedin.com/posts/martin-czygan-58348842_leipzig-gophers-go-activity-7033787127288983553-5w6z

-->



================================================
FILE: posts/meetup-34-wrapup.md
================================================
---
title: "Hybrid Meetup #34 wrap-up"
date: 2023-02-22T12:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Go 1.20

Hybrid meetup #34 took place [2023-02-21
19:00](https://www.meetup.com/leipzig-golang/events/290666161/) at [Basislager
Leipzig](https://www.basislager.co/) and was all about [Go
1.20](https://tip.golang.org/doc/go1.20) (similar to previous years, where we
looked at Go 1.14, 1.16, 1.18 - [#9](https://golangleipzig.space/posts/meetup-9-wrapup/), [#16](https://golangleipzig.space/posts/meetup-16-wrapup/), [#25](https://golangleipzig.space/posts/meetup-25-wrapup/)).

![](/images/go1.20latest.png)

We had two great presentations:

* A rundown of most novelties in Go 1.20: [Go 1.20
  updates](https://www.klingt.net/articles/go-1-20-what-s-new.html), including many examples -- thanks, [Andreas](https://www.klingt.net/)! ... and
* [Go 1.20 Coverage Profiling Support for Kubernetes Apps](https://www.mgasch.com/2023/02/go-e2e/), a walkthrough on how to use Go 1.20 binary profiling with containerized workloads (with inception style isolation layer qualities) -- thanks, [Michael](https://twitter.com/embano1)!

Some highlights from the release notes:

* [context.WithCancelCause](https://pkg.go.dev/context@master#WithCancelCause) allows to pass a custom error along the cancellation line
* package http gained a wrapper around the `http.ResponseWriter`, called [`http.ResponseController`](https://pkg.go.dev/net/http#ResponseController) allowing for per request timeout controls

Go started to [add support](https://go.dev/doc/pgo) for [Profile-guided optimization](https://en.wikipedia.org/wiki/Profile-guided_optimization), a technique already in place in various technologies.

> As of Go 1.20, benchmarks for a representative set of Go programs show that
> **building with PGO improves performance by around 2-4%**. We expect performance
> gains to generally increase over time as additional optimizations take
> advantage of PGO in future versions of Go. -- [https://go.dev/doc/pgo](https://go.dev/doc/pgo)

A challenge in containerized environments (e.g. [k8s](https://kubernetes.io/))
is that profiling information may be written to emphemeral storage, hence lost,
once the container is torn down.

At the same time, end-to-end (e2e) tests are an important technique to test
software, especially when running in complex enviroments with many interactions
(e.g. with other services, backends, ...). You do not want to mock everything (too tedious), and
[containers](https://cloud.google.com/learn/what-are-containers) are a popular way to isolate components, anyway.

The example project we looked at was a [vSphere](https://github.com/embano1/vsphere) client
library, that uses [e2e
tests](https://github.com/embano1/vsphere/blob/main/.github/workflows/e2e.yaml)
running in a local cluster using [kind](https://kind.sigs.k8s.io/), and
[ko](https://github.com/ko-build/ko) to turn Go programs into images,
[automagically](https://ko.build/) (excellent developer tools, btw).

If you [mount a local
path](https://github.com/embano1/vsphere/blob/545c3a4658b945fcaa1fef4b815cf7e92079fb9f/.github/workflows/e2e.yaml#L57-L68)
into kind, and mount that again [into the
pod](https://github.com/embano1/vsphere/blob/545c3a4658b945fcaa1fef4b815cf7e92079fb9f/test/client_test.go#L221-L231)
running the tests and let the Go binary know, [where to write the cover
information](https://github.com/embano1/vsphere/blob/545c3a4658b945fcaa1fef4b815cf7e92079fb9f/test/client_test.go#L195)
(via [GOCOVERDIR](https://go.dev/testing/coverage/#running)) - you can cover
any environment that has a local filesystem exposed (e.g. your laptop, or CI,
...).

It's not easy, but it works - and impressive as for the [fidelity](https://abseil.io/resources/swe-book/html/ch14.html) of the test
environment.

Quick Github Actions tip: To not exhausting CI limits on GH actions, cancel previous runs on a
PR branch, if you push new commits - see [this
example](https://github.com/embano1/vsphere/blob/545c3a4658b945fcaa1fef4b815cf7e92079fb9f/.github/workflows/e2e.yaml#L9-L12).

Thanks to [Andreas](https://klingt.net) and
[Michael](https://twitter.com/embano1) for the insights.

Go 1.20 continues to add small improvements to the language and ecosystem and
more interesting things are in the pipeline, like the experimental structured
logging [slog](https://pkg.go.dev/golang.org/x/exp/slog).

What's your favorite feature?

[Join our meetup](https://www.meetup.com/Leipzig-Golang/) and let us know!




================================================
FILE: posts/meetup-35-invitation.md
================================================
---
title: "Hybrid Meetup #35 invitation"
date: 2023-04-17T10:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For meetup #35 on Tuesday [Apr 18, 2023 19:00
CET](https://www.meetup.com/leipzig-golang/events/290666173/) we'll have a
lightning talk about [CGO](https://pkg.go.dev/cmd/cgo), which allows to call C code from Go.

We'll meet

* in person at [Basislager](https://www.basislager.co/), [Peterssteinweg 14, 04107 Leipzig](https://www.openstreetmap.org/node/3504864558)
* and online via [meet.jit.si/LeipzigGophers35](https://meet.jit.si/LeipzigGophers35).

Join us to discuss all things Go and CGO. Onsite: presenters' laptop [NumCPU](https://pkg.go.dev/runtime#NumCPU) free drinks!

See you!

----

![](/images/cgoisnotgo.png)

> "[cgo is not go](https://go-proverbs.github.io/)" as mural painting -- [Stable Diffusion](https://stablediffusionweb.com/)




<!--

TODO: outreach.

* [ ] slack
* [ ] linkedin

-->



================================================
FILE: posts/meetup-35-wrapup.md
================================================
---
title: "Hybrid Meetup #35 wrap-up"
date: 2023-04-19T01:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Cgo experiments

Hybrid meetup #35 took place [2023-04-18
19:00](https://www.meetup.com/leipzig-golang/events/290666173/) at [Basislager
Leipzig](https://www.basislager.co/) and was all about [Cgo](https://pkg.go.dev/cmd/cgo).

Cgo allows to bridge C and Go. From C, we can connect to other languages, like
C++, too. Use cases are legacy code or performance. Implementing a
[pseudo-random
walk](https://github.com/miku/cgosamples/blob/06f9ab34f0aef71f865872bfcfd391a01a626a0d/x/xcgoloop/main.go#L1-L95)
(using an [LCG](https://en.wikipedia.org/wiki/Linear_congruential_generator)) in
both Go and C shows that C can be up to 4x faster for this particular task.

```
 C               1         -1 29.553µs
GO               1         -1 84.303µs
 C            1000        -12 41.799µs
GO            1000         26 107.295µs
 C         1000000      -1810 22.837387ms
GO         1000000         -2 83.182797ms
 C      1000000000      15894 6.25975724s
GO      1000000000     -44632 25.620427056s
```

One example was concerned with wrapping
[ggml](https://github.com/ggerganov/ggml), a lightweight *tensor library for
machine learning* -
[xcgoggml](https://github.com/miku/cgosamples/tree/main/x/xcgoggml). A
threading [mystery
remains](https://github.com/miku/cgosamples/tree/main/x/xcgothreads).

Experiment details can be found here: [https://github.com/miku/cgosamples](https://github.com/miku/cgosamples)

## Zig cross-compilation

The zig compiler (LLVM) can build real staticly linked binaries from a Go
project with C dependencies, such as sqlite3. Example repo:
[https://github.com/klingtnet/cross-compile-with-zigcc](https://github.com/klingtnet/cross-compile-with-zigcc).


## Misc

* Cgo is a not Go, many guarantees are given up, maintenance of mixed C and Go
  code is much more difficult - rather than use CGO, maybe a grpc or other
interface may keep C and Go world better separated
* To wrap C++, we need to create a C [façade](https://en.wikipedia.org/wiki/Facade_pattern)
* Go has a nice [ast](https://pkg.go.dev/go/ast)
* GRPC performance in Go may suffer, if interfaces are used (due to overhead of reflection)
* [oapi-codegen](https://github.com/deepmap/oapi-codegen) is an openapi code generator for Go (and an alternative to the [swagger tool](https://github.com/OpenAPITools/openapi-generator))
* Go's type system can be limiting, when working with Web APIs or SDKs
* [Simple Markup Language](https://www.simpleml.com/)
* [Parsec](https://hackage.haskell.org/package/parsec), [Participle](https://github.com/alecthomas/participle)
* [YAML/HELL](https://ruudvanasseldonk.com/2023/01/11/the-yaml-document-from-hell)
* Using symbols straight from a dynamic library via [dlopen](https://stackoverflow.com/a/27510758/89391)
* A rundown of a benchmark across Python, C, and BLAS, for a HPC and competetive programming blog: [https://en.algorithmica.org/hpc/complexity/languages/](https://en.algorithmica.org/hpc/complexity/languages/)
* Unbuffered terminal output in Go is slow.  Try to wrap `os.Stdout` in a `bufio.Writer` if you need to print a lot of text.

We also briefly discussed
[LLMs](https://en.wikipedia.org/wiki/Large_language_model), as we ran
[alpaca](https://crfm.stanford.edu/2023/03/13/alpaca.html) [model
ggml-alpaca-7b-q4.bin](https://huggingface.co/Sosaka/Alpaca-native-4bit-ggml/blob/main/ggml-alpaca-7b-q4.bin) in the
background, which wrote some simple SQL and thought of a haiku about the Go programming language:

![](/images/578575.gif)

Did you find a nice haiku?

[Join our meetup](https://www.meetup.com/Leipzig-Golang/) and let us know!




================================================
FILE: posts/meetup-36-invitation.md
================================================
---
title: "Hybrid Meetup #36 invitation"
date: 2023-05-24T10:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For meetup #36 on Tuesday [Jun 20, 2023 19:00
CET](https://www.meetup.com/leipzig-golang/events/290666177/) we're thrilled to
welcome [André Eriksson](https://www.linkedin.com/in/erikssonandre/), software engineer and founder
of [Encore](https://encore.dev), a startup building the next generation
platform for rapid backend development.

> Building cloud-native backends and distributed systems can involve large
amounts of complexity and repetitive boilerplate.

Encore is a backend development platform and infrastructure SDK designed to
simplify building such backend. Encore provides a declarative approach to
managing cloud infrastructure directly in application code, based on static
analysis. It also helps reduce cloud costs and improve cloud security.

Encore is built in Go (and for Go) and is open-source at
[github.com/encoredev/encore](https://github.com/encoredev/encore). In
the presentation we'll go over the problems it solves, how the developer
experience is like, and how it works under the hood.

Find out more at:

* [encore.dev](https://encore.dev/) ([demo video](https://www.youtube.com/watch?v=IwplIbwJtD0))
* [github.com/encoredev/encore](https://github.com/encoredev/encore) ([example projects](https://github.com/encoredev/examples))

André shared his thoughts on software development, cloud and distributed systems
in an inspiring talk at [Gophercon UK 2021: Software development reimagined](https://www.youtube.com/watch?v=OrncUmqSJKU).

We'll meet:

* in person at [Basislager](https://www.basislager.co/), [Peterssteinweg 14, 04107 Leipzig](https://www.openstreetmap.org/node/3504864558)
* and online via [Google Meet](https://meet.google.com/zht-yuxt-zfo) (please note that we'll plan to record the talk and publish it on youtube)

Join us for a unique opportunity to discuss all things distributed systems,
developer experience, microservices and cloud infrastructure complexities.
Onsite: free drinks!

Extra:

We'll be giving away a paperback copy of [Distributed Services with
Go](https://pragprog.com/titles/tjgo/distributed-services-with-go/) (2021, [4.6 ⭐](https://www.amazon.de/-/en/Travis-Jeffery/dp/1680507605))
among the on-site participants, courtesy of [O'Reilly Media](https://www.oreilly.com/pub/cpc/323592).

See you!

![](/images/36-complexity-14.jpg)

> "declarative infrastructure" as futurist painting -- [Stable Diffusion](https://stablediffusionweb.com/)




<!--

TODO: outreach.

* [x] slack: https://gophers.slack.com/archives/C152YB9UZ/p1686821921439959
* [x] linkedin: https://www.linkedin.com/posts/martin-czygan-58348842_cloud-native-microservices-activity-7074867014661484544-KJzC
* [x] developer group leipzig: https://www.meetup.com/developer-group-leipzig/discussions/6755397672170916/chat/, plus: separate event: https://www.meetup.com/de-DE/developer-group-leipzig/events/294223386/
* [x] le-sw-cr: https://www.meetup.com/le-software-craft-community/discussions/6755397672172038/chat/
* ... sent message to TW, BN


Are you interested in cloud-native development, #microservices and #distributed
system? Do you aim to ship secure and cost-effective cloud-native backends? Do you care about developer experience?

Then please join us at Leipzig #Gophers Meetup #36 on Tue, June 20, 2023 19:00
CEST where we're thrilled to have @AndreErikson from @Encore talking about
simplifying cloud-native backend development and deployment.

Encore provides a declarative approach to managing cloud infrastructure, is built in Go (and for Go) and is open-source.

This is a hybrid (in-person and online) meetup, so you can join us directly via
Google Meet: https://meet.google.com/zht-yuxt-zfo or at @Basislager Leipzig.

We provide free drinks at the event and will be giving away a copy of Distributed Services in Go (https://pragprog.com/titles/tjgo/distributed-services-with-go/), courtesy of @OReillyMedia!



-->



================================================
FILE: posts/meetup-36-wrapup.md
================================================
---
title: "Hybrid Meetup #36 wrap-up"
date: 2023-06-30T10:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Cut Cloud Complexity with Encore

Hybrid meetup #36 took place [2023-06-20
19:00](https://www.meetup.com/leipzig-golang/events/290666177/) at [Basislager
Leipzig](https://www.basislager.co/).

We had a great presentation from [André
Eriksson](https://www.linkedin.com/in/erikssonandre/) about
[Encore](https://encore.dev/) - a platform written in Go and for Go for
radically simplifying cloud-native backend development.

Beside motivation and overview, André [live-coded](https://youtu.be/yYEXDmy3zUA?t=1824) an [uptime monitoring
service](https://github.com/encoredev/examples/tree/main/uptime), ran it
locally and deployed it onto Google Cloud within a few minutes. A [recording of
the talk](https://youtu.be/yYEXDmy3zUA) is available on YouTube!

[![](/images/36-yt-thumb.png)](https://youtu.be/yYEXDmy3zUA)

A few more takeaways from the talk and discussion:

* most of Encore is open source: [github.com/encoredev](https://github.com/encoredev/)
* Encore can be cloud agnostic by focussing on the 80% cases, that most cloud applications need: see [primitives](https://encore.dev/docs/primitives) and [production infrastructure](https://encore.dev/docs/deploy/infra#production-infrastructure)
* Encore does code to code transformations via static analysis and leverages Go's static typing to make working with services save and efficient
* currently, the large cloud providers are supported but on-premise deployments [are possible](https://encore.dev/docs/how-to/import-kubernetes-cluster) (via k8s)
* Go is a language made for tools, with a [regular grammar](https://go.dev/talks/2009/go_talk-20091030.pdf#page=14), which makes it easier to write code that manipulates Go code

Find out more:

* quick video showing [Encore in action](https://www.youtube.com/watch?v=IwplIbwJtD0)
* more [example projects](https://github.com/encoredev/examples)

Some more insights from the Q&A:

* static analysis of Go code is easier that static analysis of Python code
* a large number of projects need only core cloud primitives
* Encore app can be deployed side by side existing infrastructure, and can share access to resources, e.g. message brokers

The space of tools to reduce cloud complexity for developers is becoming larger, with
projects in this space being [ampt](https://getampt.com/), [Terraform,
Pulumi](https://encore.dev/docs/other/vs-terraform) and others. One open source kit in the cloud-agnostic realm is the [Go Cloud Development
Toolkit](https://gocloud.dev/), which also aimed at *providing commonly used,
vendor-neutral generic APIs that you can deploy across cloud providers*.

Thanks again to [André](https://www.linkedin.com/in/erikssonandre/) for taking the time to demo an amazing project.

----

Have you reduced the complexity of your deployments? Then you can [join our meetup](https://www.meetup.com/Leipzig-Golang/) in the time you saved.




================================================
FILE: posts/meetup-37-notice.md
================================================
---
title: "Meetup #37 notice"
date: 2023-09-28T01:00:00+02:00
draft: false
tags:
- summary
- meetup
---

## Free Form Meetup #37

Since starting Leipzig Gophers almost four years ago we always aimed at
connecting people and to learn about interesting Go projects and we had a lot
of fun organizing that. Meetup #37 on 2023-09-26 aimed to be a free-form event,
that is an event without a defined agenda with an opportunity to meet and
discuss.

We'll try to sharpen the free-form event format in the future.




================================================
FILE: posts/meetup-38-invitation.md
================================================
---
title: "Hybrid Meetup #38 invitation"
date: 2023-11-09T10:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For meetup #38 on Tuesday [Nov 21, 2023 19:00
CET](https://www.meetup.com/leipzig-golang/events/290666185/) we're excited to
collaborate with [CHECK24](https://www.check24.de/), which will host this
meetup at their Leipzig office, located at [Tröndlinring 3, 04105
Leipzig](https://maps.app.goo.gl/hWKDzUNSYuHcRCew6). CHECK24 uses Go in
production at scale.

We're having two presentations:

* Fabian will present about a Go project developed at CHECK24
* Martin (Leipzig Gophers) will give a lightning talk about running and using large-language models ([LLM](https://en.wikipedia.org/wiki/Large_language_model)) locally with the help of Go tools (following up on some topics discussed in [#35](https://golangleipzig.space/posts/meetup-35-wrapup/))

We'll meet:

* in person at [CHECK24 Leipzig Office](https://maps.app.goo.gl/hWKDzUNSYuHcRCew6), [Tröndlinring 3, 04105 Leipzig](https://maps.app.goo.gl/hWKDzUNSYuHcRCew6) -- directions provided at the entrance
* and online via [Jitsi](https://meet.jit.si/LeipzigGophers38)

Join us for a unique opportunity to discuss Go in production at scale!

Note: By attending this event you agree to be photographed.

See you!

PS: Free drinks and 🍕!

----

![](/images/622323.gif)


<!--

TODO: outreach.

* [ ] slack: XXX
* [ ] linkedin: https://www.linkedin.com/posts/florianbr%C3%A4utigam_golang-meetup-check24-activity-7128725965752414209-pdJU?utm_source=share&utm_medium=member_desktop
* [ ] linkedin: XXX

-->



================================================
FILE: posts/meetup-38-wrapup.md
================================================
---
title: "Hybrid Meetup #38 wrap-up"
date: 2023-11-22T22:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## A cache is worth a thousand searches

Hybrid meetup #38 took place [2023-11-20
19:00](https://www.meetup.com/leipzig-golang/events/290666185/) at
[CHECK24](https://check24.de) Leipzig Office.

We had a great presentation from
[Fabian](https://www.linkedin.com/in/fabian-g%C3%A4rtner-913584141/) about
building a mission critical query caching database (MemoryDB) in Go and the
challenges involved.

One challenge is the variety of query parameters and nearly overlapping
values and ranges. A key for performance is to express various parameter values (e.g.
date boundaries) with the help of [BitMaps](https://en.wikipedia.org/wiki/Bit_array),
e.g. [Roaring Bitmaps](https://r-libre.teluq.ca/1402/1/1709.07821.pdf).

> Bitmap indexes are commonly used in databases and search engines. By
> exploiting bit-level parallelism, they can significantly accelerate queries. -- [RoaringBitmap.pdf](https://r-libre.teluq.ca/602/1/RoaringBitmap.pdf)

Among other things, the project also uses [tableflip](https://github.com/cloudflare/tableflip) - a library that allows you to

> update the running code and / or configuration of a network service, without disrupting existing connections.

A very practical concern has been the struct design for GC-friendlyness. Pop
quiz:

* Is the following struct GC-friendly?
* When would it become a problem?
* What could be improved?

```go
// Offer, abridged.
type Offer struct {
    HomeAirport        *Airport
    DestinationAirport *Airport
    Hotel              *Hotel
    RoomType           string
    MealType           string
    Airline            string
    DepartureTime      time.Time
    ReturnTime         time.Time
}
```

If possible, one can try to use stack allocated values (note: Go
[ref/spec](https://go.dev/ref/spec) never mentions to stack or heap, as these
concepts are abstracted by the language):

```go
// Offer, reduced, abridged.
type Offer struct {
    HomeAirportID        int
    DestinationAirportID int
    HotelID              int
    RoomType             RoomTypeEnum
    MealType             MealTypeEnum
    AirlineID            int
    DepartureTime        int64
    ReturnTime           int64
}
```

This is now a much more compact, GC-friendly struct that will require
additional object lookups for respective identifiers but would reduce GC load
significantly, when dealing with millions of objects. Simple, effective.

[![](/images/meetup-38-pic-sketch.jpg)](https://www.linkedin.com/posts/florianbr%C3%A4utigam_golang-meetup-golangmeetup-activity-7138814464618860544--Xe2)

## Testdriving [OLLAMA](https://ollama.ai)

A lightning talk was concerned with [Testdriving
OLLAMA](https://github.com/miku/localmodels) - a packaging tool for large
language model files. Ollama is inspired by docker and allows to wrap LLM
customizations (parameters, context) into a easy to distribute format.

Thanks to projects like [LLAMA](https://ai.meta.com/llama/) and
[llama.cpp](https://github.com/ggerganov/llama.cpp) it is possible to
experiment with LLMs on everyday hardware, e.g. a 15W TDP [2017
CPU](https://www.intel.com/content/www/us/en/products/sku/122589/intel-core-i78550u-processor-8m-cache-up-to-4-00-ghz/specifications.html).

[![](/images/three-genai-haiku.png)](https://golangleipzig.space/meetup-38-llm-haiku/meetup-38-llm-haiku.pdf)

## Thanks!

Thanks [CHECK24](https://check24.de) for hosting Leipzig Gophers November 2023
Meetup, [Fabian](https://www.linkedin.com/in/fabian-g%C3%A4rtner-913584141/) for the
great talk and [Florian](https://www.linkedin.com/in/florianbr%C3%A4utigam/)
for the excellent event organisation.

----

Are you using an interesting data structure like bitmaps to improve
performance? Then [join our meetup](https://www.meetup.com/Leipzig-Golang/) and
tell us about it!




================================================
FILE: posts/meetup-39-invitation.md
================================================
---
title: "🎄 Drinkup #39 invitation"
date: 2023-11-23T15:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For meetup #39 on Tuesday [Dec 19, 2023 19:00
CET](https://www.meetup.com/leipzig-golang/events/290666187/) we will meet at
[Cantona Leipzig](https://www.google.com/search?q=cantona+leipzig) ([OSM](https://www.openstreetmap.org/node/243213647)) for drinks.

[![](/images/crismas_tree_screensaver.gif)](https://gifcities.org/?q=christmas)

[Join us](https://www.meetup.com/leipzig-golang/events/290666187/) to discuss
all things Go, cloud, AI, past, future and beyond. See you!


<!--

TODO: outreach.

-->



================================================
FILE: posts/meetup-39-wrapup.md
================================================
---
title: "🎄 Drinkup #39 wrap-up"
date: 2023-12-20T20:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Drinkup notes

Meetup #39 took place
[2023-12-19](https://www.meetup.com/leipzig-golang/events/290666187/) at
[Cantona Leipzig](https://www.google.com/search?q=cantona+leipzig) and these
were just some of the talking points.

* without extra libraries, schema validation in JSON is minimalistic (e.g. [json schema](https://json-schema.org/)); could [cue](https://cuelang.org/docs/usecases/validation/) help?
* [malloy](https://www.malloydata.dev/) is an experimental data modeling language over relational stores
* [direnv](https://direnv.net/) is a nice shell helper for 12-factor-style appu
* time is not just a line, it's [bound](https://github.com/aws/clock-bound) (cf. [chrony](https://chrony-project.org/))
* test your latencies: [aws](https://aws-latency-test.com/), [gcp](https://gcping.com/), or just the [internet](http://gfblip.appspot.com/)
* eventbridge/kubernetes at [serverless office hours](https://www.youtube.com/watch?v=MQjNZxo1TO0)
* interesting, dedicated code assistant for ansible: [Ansible Lightspeed](https://www.redhat.com/en/technologies/management/ansible/ansible-lightspeed)

Next year will probably bring yet another wave of hyper-focussed LLM-based code
comprehension tools (beside hyper-focussed niche, local, custom-trained LLMs
for dedicated tasks, in general).

## Happy holidays!

![](/images/gentree.png)

Image credit: [stable-diffusion-v1-5](https://huggingface.co/runwayml/stable-diffusion-v1-5)



================================================
FILE: posts/meetup-4-invitation.md
================================================
---
title: "Meetup #4 invitation"
date: 2019-05-13T11:45:00+02:00
draft: false
tags:
- announcement
- meetup
---

[Meetup #4](https://www.meetup.com/Leipzig-Golang/events/261418733/)
is scheduled for Friday, May 17, 2019, 19:00 CEST at
[Basislager](https://www.basislager.co/).

Hello, 世界! For meetup #4 we will have a presentation
[Philipp](https://github.com/philippgille), about the Lightning Network by
especially about a Go middleware that allows to monetize Web APIs on a
per-request basis. Without accounts, credit cards, payment providers - in a
pure P2P fashion. We will have a short refresher on Bitcoin as well.

As always are also looking for lightning talks, presentations or other kinds of
inputs. Please feel free to notify us before (e.g. in comments) or just drop
by.

----

Hallo, 世界! In Meetup #4 schauen wir uns eine Go middleware für micropayments
genauer an:

Lightning Network - eine Vorstellung einer Go Middleware, mit der sich Web APIs
per Micropayments auf pro-Request-Basis monetarisieren lassen. Ohne Accounts,
ohne Kreditkartendaten, ohne Credits, ohne Payment Provider, rein P2P. Mit
kleinem Refresher zu Bitcoin. Vorgestellt von
[Philipp](https://github.com/philippgille).

Außerdem sind Lightning Talks, Präsentationen, Erfahrungsberichte, Buch/Paper
Rezension und sonstiges immer willkommen. Wer etwas vorstellen möchte, kann das
gern etwas mitbringen.





================================================
FILE: posts/meetup-4-wrapup.md
================================================
---
title: "Meetup #4 wrap-up"
date: 2019-05-17T22:00:00+02:00
draft: false
tags:
- summary
- meetup
---

{{< h2 >}}Lightning Network Micropayments{{< /h2 >}}

Go is popular in the crypocurrency space. The well-rounded standard library and
great support for networking applications might be one reason. In [Meetup
#4](https://www.meetup.com/Leipzig-Golang/events/261418733/)
[Philipp](https://github.com/philippgille) presented an introduction to
Bitcoin, [Lighting Network](https://en.wikipedia.org/wiki/Lightning_Network)
and a Go project, that makes micropayments for API usage really simple:
[ln-paywall](https://github.com/philippgille/ln-paywall).

The presentation is [available as PDF](https://golangleipzig.space/downloads/ln-paywall.pdf).

An http middleware takes care of creating
[invoices](https://github.com/lightningnetwork/lightning-rfc/blob/master/11-payment-encoding.md)
per request, a complete example can be implemented in [a few
lines](https://github.com/philippgille/ln-paywall/blob/78fd1dfbf10f549a22f4f30ac7f68c2a2735e989/examples/ping/handlerfunc/main.go).
Middleware
[implementations](https://github.com/philippgille/ln-paywall/tree/master/examples/ping)
are available for [echo](https://echo.labstack.com/),
[gin](https://github.com/gin-gonic/gin) and other frameworks.  You can
experiment on testnet and with a [test wallet](http://web.archive.org/web/20240311221624/https://htlc.me/) or build you own
private chain, although this a bit more involved.

[Philipp](https://github.com/philippgille) also wrote
[gokv](https://github.com/philippgille/gokv), a key value store that abstracts
away over twenty local and cloud based implementations.

![](/images/go-bitcoin-books-web.jpg)

{{< h2 >}}The zero value in the wild{{< /h2 >}}

Cloud providers SDK API differ in style, this might play a role in the decision
for a cloud provider as well.

Go has the concept of a [zero value](https://golang.org/ref/spec#The_zero_value):

> Each element of such a variable or value is set to the zero value for its
> type: false for booleans, 0 for numeric types, "" for strings, and nil for
> pointers, functions, interfaces, slices, channels, and maps. This
> initialization is done recursively, so for instance each element of an array
> of structs will have its fields zeroed if no value is specified.

While in general this is a useful feature, you lose the distinction between an
uninitialized and an empty value. One example for this can be found in an older
issue in the [Go Amazon SDK](https://github.com/aws/aws-sdk-go-v2):
[#114](https://github.com/aws/aws-sdk-go/issues/114).

> One big issue migration to this SDK from other community SDKs is that most of
> the string types are represented as string pointers. This make porting
> existing code difficult. Also, simple initialization become cumbersome ...

{{< h2 >}}Open Source, Companies and Sustainability{{< /h2 >}}

Many companies love open source, fewer like to take an active role in
development and maintenance of free software. However, there are many good
reasons to do so:

* a chance to improve software quality
* allow engineers to build a portfolio
* excellent way to attract the developers you want
* contribute to the strength of software ecosystems

The Go world is no different than others in this respect. Some developers of
great open source tools (e.g.
[Fatih Arslan](https://arslan.io/2018/10/09/taking-an-indefinite-sabbatical-from-my-projects/)) take sabbaticals,
others projects may go unmaintained.

One initiative for Go is [gof.rs](http://web.archive.org/web/20230610074335/https://gof.rs/):

> The Gofrs (pronounced Gophers) is a community-formed group working together
> to better the entire Go ecosystem. Some of these efforts include picking up
> the maintenance of projects that are widely used or have large impact, as
> well as to consider new solutions to problems that arise as the number of Go
> programmers continues to grow.

> We initially formed in the summer of 2018 to take one of the most popular
> UUID packages in the Go ecosystem,
> [github.com/satori/go.uuid](https://github.com/gofrs/uuid), and have started
> to look at contributing to more projects.

{{< h2 >}}References{{< /h2 >}}

* [Presentation Slides: Go middleware for monetizing your API on a per-request basis with the Bitcoin Lightning Network](https://golangleipzig.space/downloads/ln-paywall.pdf)
* Lightning paywall: [ln-paywall](https://github.com/philippgille/ln-paywall)
* Key-value store abstraction layer: [gokv](https://github.com/philippgille/gokv)
* [HTTP 402](https://httpstatuses.com/402)
* [The zero value](https://golang.org/ref/spec#The_zero_value)
* [The Gofrs](http://web.archive.org/web/20230610074335/https://gof.rs/)




================================================
FILE: posts/meetup-40-invitation.md
================================================
---
title: "Hybrid Meetup #40 invitation"
date: 2024-01-11T15:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Happy 2024! For meetup #40 on Tuesday [Jan 30, 2024 19:00
CET](https://www.meetup.com/leipzig-golang/events/298481328/) we are thrilled
to have [Bill Kennedy](https://twitter.com/goinggodotnet), Gopher Pioneer and Managing Partner at [Ardan Labs](https://www.ardanlabs.com/)
joining us (*remotely*) to talk about *Domain Driven, Data Oriented Design*.

Domain driven design has been *tackling complexity in the heart of software*
since Eric Evans' [classic 2003
book](https://www.betterworldbooks.com/search/results?q=Domain-Driven%20Design%3A%20Tackling%20Complexity%20in%20the%20Heart%20of%20Software%20evans),
while emphasizing data in programming has many facets, from [caring about
caches](https://en.wikipedia.org/wiki/Data-oriented_design), over treating data
as first-class citizen (cf. [Data Oriented
Programming](https://www.manning.com/books/data-oriented-programming)) to
design challenges in data-intensive applications (cf.
[DDIA](https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/)).

We are excited to dive into these topics will Bill!

Join us in person at [Basislager Leipzig](https://www.basislager.co/) or online
from anywhere with Google Meet:
[https://meet.google.com/fet-deeo-gtx](https://meet.google.com/fet-deeo-gtx).

See you!

----

[Join us](https://www.meetup.com/leipzig-golang/events/298481328/) to discuss
all things Go, domain driven design and data!


<!--

TODO: outreach.

* [x] linkedin: https://www.linkedin.com/posts/martin-czygan-58348842_gophers-activity-7156623766259687424-1SZV
* [x] slack: https://gophers.slack.com/archives/C152YB9UZ/p1706272347160899

-->



================================================
FILE: posts/meetup-40-wrapup.md
================================================
---
title: "Hybrid Meetup #40 wrap-up"
date: 2024-01-31T10:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Domain Driven Data Oriented Design

Hybrid Meetup #40 took place
[2024-01-30](https://www.meetup.com/leipzig-golang/events/298481328/) at
[Basislager Leipzig](https://www.basislager.co/) and we had a great
presentation by [Bill Kennedy](https://twitter.com/goinggodotnet) from [Ardan Labs](https://www.ardanlabs.com/) about Domain Driven Data
Oriented Design. A recording of the talk is available at our [YouTube Channel](https://www.youtube.com/@golangleipzig1131).

[![](/images/meetup-40-youtube-thumb.png)](https://youtu.be/zuLsdP3i8sQ)

All code shown in the talk is available at:
[ardanlabs/service](https://github.com/ardanlabs/service).

Just a few notes from the talk:

* [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) is boilerplate
* [domain-driven design](https://en.wikipedia.org/wiki/Domain-driven_design) comes with a cost but can help to keep larger projects structured and maintainable
* one way to limit data exposure per domain is to create [a relational view](https://en.wikipedia.org/wiki/View_(SQL)) per domain
* example of an opaque type from the repo is
  [`user.Role`](https://github.com/ardanlabs/service/blob/387cc15defe9c9e01ca130118c8e01ed1a164844/business/core/user/role.go#L17-L20) - it could be a string, but we limit its usage by using a parse function to
ensure validity
* code that reads code to generate docs: [webapi.go](https://github.com/ardanlabs/service/blob/387cc15defe9c9e01ca130118c8e01ed1a164844/app/tooling/docs/webapi/webapi.go)

Thanks again to Bill for sharing his perspective on domain driven design and
how it could be applied in Go.

## Misc

* Go has first-class self-parsing support in the
  [ast](https://pkg.go.dev/go/ast) package, with the canonical example of code
working on code being [go
fmt](https://cs.opensource.google/go/go/+/refs/tags/go1.21.6:src/cmd/gofmt/gofmt.go);
in [#36](https://golangleipzig.space/posts/meetup-36-wrapup/) we learned about
[encore.dev](https://github.com/encoredev/encore), which makes extensive use of
the Go AST to infer and validate a complete service topology
* [Parse, don't
  validate](https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/)
(Haskell ahead) - how to use data structures to make illegal state
unrepresentatable and more
* an [opaque type](https://en.wikipedia.org/wiki/Opaque_data_type) for [time](https://github.com/golang/go/blob/ae457e811d44261801bda261731b5006d629930d/src/time/time.go#L135-L156) in the
  standard library helped with switching the underlying implementation with the 2017 proposal for [*Monotonic
Elapsed Time Measurements in
Go*](https://go.googlesource.com/proposal/+/master/design/12914-monotonic.md) - an issue that had grave effects: [Other reported software problems associated
with the leap second](https://en.wikipedia.org/wiki/Leap_second#Other_reported_software_problems_associated_with_the_leap_second)

> Its [Cloudflare's] DNS resolver implementation incorrectly calculated a
> negative number when subtracting two timestamps obtained from the Go
> programming language's [time.Now()](https://pkg.go.dev/time#Now) function,
> which then used only a real-time clock source. This could have been avoided
> by using a monotonic clock source, which has since been added to Go [1.9](https://go.dev/doc/go1.9#monotonic-time).

## [CGMR](https://en.wikipedia.org/wiki/Central_German_Metropolitan_Region) and beyond

* on [2024-02-26](https://www.meetup.com/webwirtschaft/events/298927799), there will be an *Intro to Go* (golang) talk by [Karl](https://karlbreuer.com/) at [webmontag Halle](https://webwirtschaft.net/webmontag/), at [Mitteldeutsches Multimediazentrum Halle](https://www.mmz-halle.de/)
* if you are in Hannover, Germany, check out [Hannover Gophers](https://www.meetup.com/de-DE/hannover-gophers/)

[![](/images/clean_475668308_30.webp)](https://www.meetup.com/de-DE/hannover-gophers/)




================================================
FILE: posts/meetup-41-invitation.md
================================================
---
title: "Hybrid Meetup #41 invitation"
date: 2024-02-23T10:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For meetup #41 on Tuesday [Feb 27, 2024 19:00
CET](https://www.meetup.com/leipzig-golang/events/298066352) we'll discuss
what's new in [Go 1.22](https://tip.golang.org/doc/go1.22).

You can join us in person at [Basislager Leipzig](https://www.basislager.co/) (free drinks)
or remotely via [Google Meet](https://meet.google.com/dmu-zsyj-eqh) (BYOD).

See you!

----

[Join us](https://www.meetup.com/leipzig-golang/events/298066352) to discuss
all things Go, and similar things!


<!--

TODO: outreach.

* [x] linkedin: https://www.linkedin.com/posts/martin-czygan-58348842_gophers-activity-7156623766259687424-1SZV
* [x] slack: https://gophers.slack.com/archives/C152YB9UZ/p1706272347160899

-->



================================================
FILE: posts/meetup-41-wrapup.md
================================================
---
title: "Hybrid Meetup #41 wrap-up"
date: 2024-03-01T10:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Go 1.22 and more

Hybrid Meetup #41 took place
[2024-02-27](https://www.meetup.com/leipzig-golang/events/298066352) at
[Basislager Leipzig](https://www.basislager.co/). We reviewed some updates in
[Go 1.22](https://golang.org/doc/go1.22), especially the sharing bug fix in
for [loops](https://go.dev/wiki/LoopvarExperiment) and the enhanced routing pattern.

## Go tools for [genai](https://en.wikipedia.org/wiki/Generative_artificial_intelligence) models

There is no shortage of tooling and applications for LLM and generative AI in
general, and increasingly, these tools abstract the model access away to you
can use remote or local models with the same code (and easily switch between
different providers).

We also briefly looked at [lingoose](https://lingoose.io/), a lightweight LLM
framework, which offers some wrappers around common tasks for generative AI
models, like chat or document adapters for retrieval-augmented generation.

Rough notes: [What RAG?](https://github.com/miku/whatrag)

## The Cutoff

For the record, 2023 may be the cutoff year. The amount of synthetically
generated material will dwarf everything that existed up to that point.

## Misc

* we wondered about some performance implications regarding ARM servers (which
  are becoming available on various cloud providers (e.g. EUR 0.0070/h CAX11 instance at
[Hetzner](https://www.hetzner.com/cloud/)) - anecdata has it that you can run a
complete Go web app stack and get 100-200 requests/s out of a 32-bit 2011 [ARM
Cortex A7](https://de.wikipedia.org/wiki/Arm_Cortex-A#Arm_Cortex-A7) (inside a
[Cubietruck](https://en.wikipedia.org/wiki/Cubieboard#Cubietruck_(Cubieboard3))), consuming about 2W total - cf. [The Progress of the Energy-Efficiency
of Single-board Computers](https://www.netsys.ovgu.de/netsys_media/publications/NetSys_TR_2018_01.pdf)
* there are also tools to [reclaim your
  cloud](https://www.zimaboard.com/blade/) or [run on a 6W N100](https://www.servethehome.com/cwwk-crazy-a-small-6w-tdp-cpu-homelab-super-system/5/)! Specifically, the zimablade runs a
low power 4-core [CPU](https://ark.intel.com/content/www/us/en/ark/products/codename/80644/products-formerly-apollo-lake.html) and can be equipped with 16GB RAM, plus two SATA drives
(back-of-the-envelope costs breakdown would be $128 (SBC), $15 for one 128GB
SATA SSD, a total of $158 or EUR 145 or 20714h of the cheapest (and weaker)
cloud instance; excluding positions like maintenance, bandwidth and energy, the
amorization period of on-prem hardware is somewhere between six months and three
years).

![](/images/41-comp-jungle.png)

## Joke

COBOL is still used, and still may be in the future. Maybe someone can write a
Go-to-COBOL tool, we already would have a name: gobol (this name has also been
suggested by
[gemma](https://huggingface.co/docs/transformers/en/model_doc/gemma) 2B (91bff873f359), when
prompted *how would you name a software project that translates Go (golang) to
COBOL? offer multiple alternatives*)

### Image Credit

Stable Diffusion v1.5 pruned, emaonly; prompt: *a data center, many computers,
located inside a jungle, where cables and branches interweave, style: polaroid* (estimated generation cost: EUR 0.05).



================================================
FILE: posts/meetup-42-invitation.md
================================================
---
title: "Hybrid Meetup #42 invitation"
date: 2024-03-14T22:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For meetup #42 on Tuesday [Apr 30, 2024 19:00
CET](https://www.meetup.com/leipzig-golang/events/298066357) we're excited to again
collaborate with [CHECK24](https://www.check24.de/), which will host this
meetup at their Leipzig office, located at [Tröndlinring 3, 04105
Leipzig](https://maps.app.goo.gl/hWKDzUNSYuHcRCew6). CHECK24 has a diverse tech stack that includes a growing number of Go projects.

We will have two presentations: one about
[SIMD](http://ftp.cvut.cz/kernel/people/geoff/cell/ps3-linux-docs/CellProgrammingTutorial/BasicsOfSIMDProgramming.html)
and [Go](https://github.com/alivanz/go-simd), by Patrick Vahl and one about the
1BRC ([1 Billion Row Challange](https://web.archive.org/web/20241116164008/https://1brc.dev/)) and Go performance tips by [Martin Czygan](https://www.linkedin.com/in/martin-czygan-58348842/).

We'll meet:

* in person at [CHECK24 Leipzig Office](https://maps.app.goo.gl/hWKDzUNSYuHcRCew6), [Tröndlinring 3, 04105 Leipzig](https://maps.app.goo.gl/hWKDzUNSYuHcRCew6) -- directions provided at the entrance
* and online via [Google Meet](https://meet.google.com/dcv-bnyb-vxk)

Join us for an evening dive into high performance computing.

Note: By attending this event you agree to be photographed.

See you!

PS: Free drinks and 🍕!

<!--

TODO: outreach.

* [x] slack:
* [x] linkedin: https://www.linkedin.com/posts/martin-czygan-58348842_leipzig-tech-meetup-activity-7188135308905914368-KYlb

-->



================================================
FILE: posts/meetup-42-wrapup.md
================================================
---
title: "Hybrid Meetup #42 wrap-up"
date: 2024-05-03T10:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Fast Things First

Hybrid Meetup #42 took place
[2024-04-30](https://www.meetup.com/leipzig-golang/events/298066357) at
[CHECK24](https://check24.de) [Leipzig Office](https://www.linkedin.com/feed/update/urn:li:activity:7193158068761706496/) at Altes Landratsamt. We had two
talks that revolved around Go and performance: [Patrick Vahl](https://github.com/Crash129) gave a great
overview about SIMD in Go and what is possible (and not possible), today. Examples from the talk
can be found here:
[Crash129/go-simd-example](https://github.com/Crash129/go-simd-example). A few points from the talk:

* performance gains can be significant
* try to isolate SIMD as much as possible

> The difficulty with a general purpose approach to SIMD [...] is that the performance can be dramatically different on
> different processors. -- [go/issues/53171](https://github.com/golang/go/issues/53171#issuecomment-1142953120)

* Go uses its own assembly syntax as an intermediate representation, more on that in [The Design of the Go Assembler](https://go.dev/talks/2016/asm.slide#1) (2016)
* there are various approaches to SIMD and Go including [avo](https://github.com/mmcloughlin/avo), [gocc](https://github.com/kelindar/gocc), and more - see: [Examples of methods to use SIMD in Go](https://github.com/Crash129/go-simd-example?tab=readme-ov-file#examples-of-methods-to-use-simd-in-go)
* explore the assembly generated for Go programs via [compiler explorer](https://godbolt.org/z/oKvWhxqqn)

While SIMD support is still a topic of discussion, e.g. in [#53171](https://github.com/golang/go/issues/53171), there exist usable approaches today.

[Martin Czygan](https://de.linkedin.com/in/martin-czygan-58348842) took a Go
implementation of the [1BRC](https://web.archive.org/web/20241116164008/https://1brc.dev/) from 4 minutes to 4s, using
fewer allocations, parallel processing and mmap.

![](/images/657582.gif)

Notes: [1brc-in-go](https://github.com/golang-leipzig/1brc-in-go). Please
submit a PR with a variant you found!

Thanks a lot to [CHECK24](https://check24.de) for hosting the event in their
nice office (with a view). Looking forward to our next event together which is
planned for October 2024.



## Misc

* A good use case for [mmap](https://man7.org/linux/man-pages/man2/mmap.2.html) is a parallel processing of read only data (that can be bigger than the physical RAM);
  there is an experimental package in the
[x/exp/mmap](https://pkg.go.dev/golang.org/x/exp/mmap) and a library [edsrzf/mmap-go](https://github.com/edsrzf/mmap-go). The concept of virtual
memory goes back to one of the first super computer
[Atlas](https://en.wikipedia.org/wiki/Atlas_(computer)).
* The [simdjson](https://github.com/simdjson/simdjson) project explores the use of SIMD for record breaking, high performance JSON processing

<!--
https://www.linkedin.com/feed/update/urn:li:activity:7193158068761706496?updateEntityUrn=urn%3Ali%3Afs_feedUpdate%3A%28V2%2Curn%3Ali%3Aactivity%3A7193158068761706496%29
-->



================================================
FILE: posts/meetup-43-invitation.md
================================================
---
title: "Hybrid Meetup #43 invitation"
date: 2024-05-15T14:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For meetup #43 on Tuesday [May 28, 2024 19:00
CET](https://www.meetup.com/leipzig-golang/events/298066360/) we are thrilled
to collaborate again with [Gridfuse](https://gridfuse.com), a renewable energy
startup in the heart of Leipzig with the mission to *help deliver a world where
renewable energy sources become the main source of power on the global grid*.

> By fusing together multiple individual renewable sources through software and
> intelligent algorithms, we unite them into a force that can transform our
> global energy system. -- [Gridfuse](https://gridfuse.com/)

We will have a presentation about a core computational topic with broad applications - finite state machines.

**Ekstatic – a minimal state machine library**

How do you model a state-machine-based workflow in Go? Even though there are
various [FSM](https://xlinux.nist.gov/dads/HTML/finiteStateMachine.html)
implementations available, they suffer from different shortcomings.  This
presentation will introduce a minimalistic go library for defining
(non-)deterministic state machines, that aims to be as simple as powerful and
idiomatic. The following discussion gives room for questions and to explore
benefits, drawbacks, and potential alternatives.

[![](/images/Machine_bret.gif)](https://gifcities.org/)

We'll meet:

* in person at [Gridfuse Office](https://maps.app.goo.gl/Jtcr78iQafZxUtWs6), located at Design Offices Leipzig, [Augustusplatz 1-4, 04109 Leipzig](https://www.openstreetmap.org/node/7230218702) ([Google Maps](https://maps.app.goo.gl/Jtcr78iQafZxUtWs6)) -- [directions](/downloads/Directions_Meetup_Gridfuse.pdf) (PDF), also provided at the building entrance
* and online via [Google Meet](https://meet.google.com/rxp-dbzd-dex)

Join us for an evening dive into Go, computation and energy.

### Schedule

* 18:45 Doors Open
* 19:05 Talk: Ekstatic – a minimal state machine library
* 19:45 Q&A and discussion

See you!

PS: Free drinks and 🍕! Additionally, we are sharing discount codes for a Go
conference in ⚜ 🇮🇹 Florence,
[GOLAB2024](https://golangleipzig.space/posts/golab-2024/)!

PPS: We met at Gridfuse before for [Leipzig Gophers #32](https://golangleipzig.space/posts/meetup-32-wrapup/) and it was awesome.

<!--

TODO: outreach.

https://www.linkedin.com/posts/martin-czygan-58348842_leipzig-golang-renewable-activity-7199745418547609601-Whx0 (800+ followers)
https://gophers.slack.com/archives/C152YB9UZ/p1716553563543059 (#remotemeetup, 6139 members)
https://gophers.slack.com/archives/C1RCF5554/p1716553296930349 (#meetup organizers, 443 members)

-->



================================================
FILE: posts/meetup-43-wrapup.md
================================================
---
title: "Hybrid Meetup #43 wrap-up"
date: 2024-05-29T13:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Finite state machines

Hybrid Meetup #43 took place
[2024-05-28](https://www.meetup.com/leipzig-golang/events/298066360/) at
[Gridfuse](https://gridfuse.com), [Hauptpost](https://de.wikipedia.org/wiki/Hauptpost_(Leipzig)) Leipzig. We had a
great presentation about a lightweight (~200 LOC), open source state machine
library written in Go: [ekstatic](https://github.com/Metamogul/ekstatic) &mdash; presentation [slides (PDF)](https://golangleipzig.space/downloads/ekstatic.pdf)

![](/meetup-43-fsm/crop.png)

The use case in the context of [RAIDA](https://raida.de/) is the modelling of
workflows, composed of a number of steps (and the loose coupling of business
logic with state transistions). The library is flexible, but the limits of the
Go type system require to resort to
[any](https://go.dev/ref/spec#Predeclared_identifiers) (which will defer some
type checks to runtime).

> For convenience, the predeclared type `any` is an alias for the empty
> interface. [[Go 1.18](https://go.dev/ref/spec#Go_1.18)]

The library is open source at
[Metamogul/ekstatic](https://github.com/Metamogul/ekstatic), and contains some
[examples](https://github.com/Metamogul/ekstatic/tree/main/examples) as well. Thanks again, [Jan](https://www.linkedin.com/in/jan-z-255b28225/) for the insights,
and [Gridfuse](https://gridfuse.com/) for hosting another Leipzig Gophers event.


## Misc

* code generation may improve type safety of a generic FSM Go implementation, similar to [sqlc](https://sqlc.dev/) and other libraries
* [railway oriented control flow](https://vimeo.com/113707214), reminding one of [The happy path is left-aligned](https://maelvls.dev/go-happy-line-of-sight/)
* Rust [std::result](https://doc.rust-lang.org/std/result/) in combination with
  the [? operator](https://doc.rust-lang.org/std/result/#the-question-mark-operator-)
makes working with errors easier; there are libraries in Go, like
[alexthomas/types](https://pkg.go.dev/github.com/alecthomas/types/result), that
try emulate that; or even language [proposals](https://github.com/golang/go/issues/19991) (declined at the time)
* another, albeit much more extensive library for workflows (or durable execution) is [temporal](https://temporal.io/), which has a [go](https://learn.temporal.io/getting_started/go/) client as well
* contracts has been tried in various places in software systems, e.g. [design by contract](https://en.wikipedia.org/wiki/Design_by_contract), or [PACT](https://docs.pact.io/) for REST testing
* GraphQL is a nice alternative to representional state transfer (REST); libraries: [gqlgen](https://gqlgen.com/getting-started/) for servers, [gqlgenc](https://github.com/Yamashou/gqlgenc) for clients
* Rob Pike on state machines, 12 years ago: [Lexical Scanning in Go - Rob Pike](https://youtu.be/HxaD_trXwRE), [What is a state? [13:45]](https://youtu.be/HxaD_trXwRE?si=wIGRoDxp78G8eXn4&t=825)

## Monads

A finite state machine consists of states and state *transitions*;
implementationwise, a state may be *any* type, but at the same time we would
benefit from marking a type as a state, hence unifying different actions. A [variant type](https://www.cs.cornell.edu/courses/cs3110/2013sp/lectures/lec04-types/lec04.html) could be a solution, but [Go does not support
variant types](https://go.dev/doc/faq#variant_types) (albeit interfaces and type
switches allow for some unification).

In [essence](https://www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/wadler-essence-fp.pdf),
we would like chainable computation, or workflow composition, which is reminding of monads.

* [the morning paper: Monads for functional programming](https://blog.acolyer.org/2014/11/10/monads-for-functional-programming/)
* [A monad is just a monoid in the category of endofunctors, what's the problem?](https://stackoverflow.com/q/3870088/89391)

Sidenote: For [Leibniz](https://en.wikipedia.org/wiki/Gottfried_Wilhelm_Leibniz), monads
were the essential substance
([1714](https://www.plato-philosophy.org/wp-content/uploads/2016/07/The-Monadology-1714-by-Gottfried-Wilhelm-LEIBNIZ-1646-1716.pdf)),
which *has no parts and is therefore indivisible*. They also were windowless, or immutable.

> The Monads have no windows, through which anything could come in or go out.

A few years earlier, in 1703, Leibniz recognized something else essential: the
binary number system.

[![](/images/Leibniz_binary_system_1703-s.png)](https://www.leibniz-translations.com/static/media/binary.2e9089b038d26b586697.pdf)

> But reckoning by twos, that is, by 0 and 1, as
compensation for its length, is the most fundamental way of reckoning for
science, and offers up new discoveries, which are then found to be useful, even
for the practice of numbers and especially for geometry. The reason for this is
that, as numbers are reduced to the simplest principles, like 0 and 1, a
wonderful order is apparent throughout.





================================================
FILE: posts/meetup-44-invitation.md
================================================
---
title: "Hybrid Meetup #44 invitation"
date: 2024-08-19T13:28:29+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For meetup #44 on Tuesday [Sep 24, 2024 19:00
CET](https://www.meetup.com/leipzig-golang/events/298066362/) we'll
showcase daily development tools.

In this format we'll exchange our favorite tools to do our development tasks, including

 - **Your favorite software tools** that streamline your coding process.
 - **Custom scripts or functions** you’ve written to automate repetitive tasks.
 - **Any hardware or desk setup** that boosts your productivity.
 - **Even non-technical items** that contribute to your coding routine are welcome!

This is intended to be casual and everyone is welcomed to share their tool, no matter how small or big it is.

You can join us in person at [Basislager Leipzig](https://www.basislager.co/)
or remotely via [Jitsi](https://meet.jit.si/LeipzigGophers44) (BYOD).

See you!

<!--

https://www.linkedin.com/posts/martin-czygan-58348842_leipzig-gophers-meetup-44-taking-place-this-activity-7243955424402505728-p_He?utm_source=share&utm_medium=member_desktop
https://gophers.slack.com/archives/C152YB9UZ/p1727102663437109
https://gophers.slack.com/archives/C1RCF5554/p1727102622666649

-->



================================================
FILE: posts/meetup-44-wrapup.md
================================================
---
title: "Hybrid Meetup #44 wrap-up"
date: 2024-09-25T20:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Ideas and Tools

Hybrid Meetup #44 took place
[2024-09-24](https://www.meetup.com/leipzig-golang/events/298066362/) 19:00 at
[Basislager](https://basislager.co) Leipzig. The topic was everyday tools and
libraries, with demos from a few people.

Here's a list of tools presented, mentioned, praised:

* [smart-branches (git)](https://github.com/stackrox/workflow/blob/master/scripts/dev/smart-branch.sh): stacked commits
* git [fixup](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---fixupamendrewordltcommitgt) (git): cleaner history
* [awk](https://www.awk.dev/) and [xargs](https://www.man7.org/linux/man-pages/man1/xargs.1.html), [GNU parallel](https://www.gnu.org/software/parallel/) (cli): data wrangling
* [roxvet](https://github.com/stackrox/stackrox/tree/master/tools/roxvet) (go): example custom code vetting
* [strace](https://strace.io/) (linux): syscalls and more
* [tilt](https://tilt.dev/) (k8s): local k8s env
* [fzf](https://github.com/junegunn/fzf) (cli): fuzzy finder in command line
* [just](https://just.systems), [task](https://taskfile.dev/) (cli): task runner, similar to [make](https://www.gnu.org/software/make/)
* [tmux](https://github.com/tmux/tmux/wiki) (sh): terminal multiplexing
* [btop](https://github.com/aristocratos/btop), [zenith](https://github.com/bvaisvil/zenith) (cli): system monitors
* [git-cal](https://github.com/k4rthik/git-cal) (git): repo stats
* [cobra](https://github.com/spf13/cobra) (go): cli tool scaffold
* [charm](https://charm.sh/libs/) (go): TUI (we also had a [lightning talk](https://github.com/miku/glamline) on charm at [#28](https://golangleipzig.space/posts/meetup-28-wrapup/))
* [direnv](https://direnv.net/) (sh): project management
* [lazyvim](http://www.lazyvim.org/) (vim): editor
* [devspace](https://www.devspace.sh/), [devpod](https://devpod.sh/), [gitpod](https://www.gitpod.io/), and more (ops): dev env
* [asciinema](https://asciinema.org/) (linux): [script(1)](https://en.wikipedia.org/wiki/Script_(Unix)) heir, [agg](https://github.com/asciinema/agg)
* ai tools: good for learning or to sketch out a problem space; less usable code just yet
* [obisidian](https://obsidian.md/) (editor/wiki): a tool to manage your knowledge
* [timefilp](https://timeflip.io/) (tool): tool to efficiently manage time tracking




================================================
FILE: posts/meetup-45-invitation.md
================================================
---
title: "Hybrid Meetup #45 invitation"
date: 2024-10-06T16:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

## Testing in Go

Hello, 世界!

For meetup #45 on Tuesday [Oct 29, 2024 19:00
CET](https://www.meetup.com/leipzig-golang/events/298481354) at
[CHECK24](https://www.check24.de/) Leipzig Office we are lucky to have two great input
presentations and the overarching topic will be **Testing in Go**.

* [Fabian](https://www.linkedin.com/in/fabian-g%C3%A4rtner-913584141/) will take a closer look at **Test Coverage in Go**
* [Jan](https://www.linkedin.com/in/jan-z-255b28225/) will present an open source project: **[timestone](https://github.com/Metamogul/timestone) – deterministic concurrency in go tests**

> The missing ability in Go's standard lib to mock time and concurrency poses a
> significant problem when testing concurrent code. Timestone presents a
> simple, yet versatile solution.

Join us for an insightful evening on one of the pillars of software reliability
and learn about how you can improve your Go projects.

### Schedule

* 18:45 Doors open
* 19:00 Welcome
* 19:10 Talk: Test coverage in Go
* 19:45 Talk: Deterministic concurrency in Go tests

We'll meet:

* in person at [CHECK24 Leipzig Office](https://maps.app.goo.gl/hWKDzUNSYuHcRCew6), [Tröndlinring 3, 04105 Leipzig](https://maps.app.goo.gl/hWKDzUNSYuHcRCew6) ([osm](https://www.openstreetmap.org/relation/1385675)) -- directions provided at the entrance
* and online via [Jitsi](https://meet.jit.si/LeipzigGophers45)

Note: By attending this event you agree to be photographed.

See you!

PS: Free drinks and 🍕, courtesy of [CHECK24](https://www.check24.de/)!

[![](/images/XHCZX6ECHM2M7WTO4PF3ICJINZXXHMC5.gif)](https://golangleipzig.space/images/meetup-45/anim.webm)


<!--

https://www.linkedin.com/posts/martin-czygan-58348842_are-you-interested-in-reliable-and-robust-activity-7256965732721213442-qMtW?utm_source=share&utm_medium=member_desktop
https://gophers.slack.com/archives/C152YB9UZ/p1730196197788929

-->



================================================
FILE: posts/meetup-45-wrapup.md
================================================
---
title: "Hybrid Meetup #45 wrap-up"
date: 2024-11-14T17:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Testing in Go

Hybrid Meetup #45 took place
[2024-10-29](https://www.meetup.com/leipzig-golang/events/298481354/) 19:00 at
[CHECK24](https://check24.de) Leipzig Office at Altes Landratsamt and we were
thrilled to see people joining from Leipzig
[and](https://en.wikipedia.org/wiki/Saxony-Anhalt)
[beyond](https://en.wikipedia.org/wiki/Thuringia), both on site and online. We
had two great input presentations about open source projects in the testing
domain.

### Coverage metrics

[Fabian](https://www.linkedin.com/in/fabian-g%C3%A4rtner-913584141/) analyzed
the Go coverage tool [cmd/cover](https://pkg.go.dev/cmd/cover), listed some of
its shortcomings and demonstrated a tool to address them and to improve some
metrics: [gocoverageplus](https://github.com/Fabianexe/gocoverageplus).

The coverage tool shipped with Go operates on the source code and uses
instrumentation to estimate coverage:

> When generated instrumented code, the cover tool computes approximate
basic block information by studying the source. It is thus more portable than
binary-rewriting coverage tools, but also a little less capable. For instance,
it does not probe inside && and || expressions, and can be mildly confused by
single statements with multiple function literals. -- [cmd/cover](https://pkg.go.dev/cmd/cover)

In the past, go cover had a couple of issues, among them:
[#23883](https://github.com/golang/go/issues/23883),
[#51430](https://github.com/golang/go/issues/51430),
[#58770](https://github.com/golang/go/issues/58770),
[#65570](https://github.com/golang/go/issues/65570),
[#65653](https://github.com/golang/go/issues/65653), ...

Also, there is a currently open proposal:

* [proposal: cmd/cover: support branch coverage](https://github.com/golang/go/issues/70306)

> Adding **branch coverage** would be beneficial, as it would allow developers to
> better understand which branches (conditional paths) in their code are being
> executed during tests, rather than just which lines.

The [gocoverageplus](https://github.com/Fabianexe/gocoverageplus) addresses
some of these shortcomings and also supports
[cobertura](https://gcovr.com/en/stable/output/cobertura.html) output format, as well as complexity metrics.

A short usage demo:

```shell
$ go install github.com/Fabianexe/gocoverageplus@latest
$ go test -cover -coverprofile=c.out
```

Put a [config
file](https://github.com/Fabianexe/gocoverageplus/?tab=readme-ov-file#config)
into your projects folder, then:

```
$ gocoverageplus -i c.out -o p.out
```

Then render the report, e.g. as HTML or to stdout. A nice little TUI for
coverage reports is: [gocovsh](https://github.com/orlangure/gocovsh).

[![](/images/gocovsh.png)](https://github.com/orlangure/gocovsh)

### Go scheduler overlay

We took another look on testing, through the lens of [timestone](https://github.com/Metamogul/timestone),

>  a library to create deterministic and easy-to-understand unit tests for time-dependent, concurrent go code.

It requires modification of existing code (replace go routine invocations with
timestone), but after that, tests can be run in either with the system
scheduler, i.e. [using
goroutines](https://github.com/Metamogul/timestone/blob/7411decd9b3e1e28ef539e2bbb0ebb67b9e059d7/system/scheduler.go#L20-L29)
or a [simulation
scheduler](https://github.com/Metamogul/timestone/blob/7411decd9b3e1e28ef539e2bbb0ebb67b9e059d7/simulation/scheduler.go#L149-L155),
that gives the caller control over the process execution.

By default, Go programs can exhibit non-determinism in a few places, among others in:

* randomized work stealing in the [scheduler](https://github.com/golang/go/blob/8e714281e441f93d2865adb3c5a507fd161314e9/src/runtime/proc.go#L7198)
* randomized map [iteration](https://github.com/golang/go/blob/8b0ac33da8574b74ba50ad727b59fa8679d93e4b/src/internal/runtime/maps/map.go#L141-L142)
* randomized [select clause](https://github.com/golang/go/blob/8e714281e441f93d2865adb3c5a507fd161314e9/src/runtime/select.go#L181)

With [timestone](https://github.com/Metamogul/timestone), it is possible to get
around the scheduling randomness, when this interferes with test results. Check
out some of the examples included in the library, here:
[timestone/examples](https://github.com/Metamogul/timestone/tree/main/examples).


### Misc

* for integration testing, [testcontainers](https://golang.testcontainers.org/)
  can come in handy; you can simulate the actual services your code interfaces
  with, like key-value stores, object stores, search engines, databases, etc. -- a handy, albeit slightly slower, alternative to mock objects
* for a more unusual test setup, see this lightning talk about [running go tests in a VM w/ qemu](https://www.youtube.com/watch?v=69Zy77O-BUM)




================================================
FILE: posts/meetup-46-invitation.md
================================================
---
title: "Hybrid Meetup #46 invitation"
date: 2024-11-15T10:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

## Better software insights

> Metrics with Go and systemd + improved continuous integration

Hello, 世界!

For meetup #46 on Tuesday [Nov 26, 2024 19:00
CET](https://www.meetup.com/leipzig-golang/events/298066372/) at
[Basislager](https://www.basislager.co) Leipzig we will have two great
input presentations related to metrics and continuous integration:

[Leandro](https://www.linkedin.com/in/leandrosansilva/) will tell us how he is
**Getting metrics out of systemd journal with Go** from a current C++ project,
he is working on. Arch wiki has a nice page on [systemd/Journal](https://wiki.archlinux.org/title/Systemd/Journal).

[Fedor](https://www.linkedin.com/in/fedor-dikarev/) will take us on a tour on
how to **Getting more out of your Continuous Integration (CI)**, especially:

* find flaky tests before developers will complain about them,
* find out if your migration will corrupt user data or not before clients will complain about it.

Demos will include code from
[neondatabase/gh-workflow-stats-action](https://github.com/neondatabase/gh-workflow-stats-action/)
and
[neondatabase/create-branch-action](https://github.com/neondatabase/create-branch-action),
which come from the [neon.tech](https://neon.tech/) project, a serverless
postgres database.

Join us for discussions and insights on how to better understand your software
and systems!

### Schedule

* 18:45 Doors open
* 19:00 Welcome
* 19:10 Talk: Getting metrics out of Systemd Journal with Go
* 19:30 Talk: Getting more out of your Continuous Integration (CI)

We'll meet:

* in person at [Basislager](https://www.basislager.co/), [Peterssteinweg 14, 04107 Leipzig](https://www.openstreetmap.org/node/3504864558), [GMaps](https://maps.app.goo.gl/FoC727e5cgpiXLTo9)
* and online via [Jitsi](https://meet.jit.si/LeipzigGophers46)

See you!


<!--

https://www.linkedin.com/posts/fedor-dikarev_hybrid-meetup-46-invitation-activity-7263194440679243776-uT7S
https://www.linkedin.com/posts/martin-czygan-58348842_tonight-join-us-for-leipzig-gophers-hybrid-activity-7267147455928922113-Wo5y

-->



================================================
FILE: posts/meetup-46-wrapup.md
================================================
---
title: "Hybrid Meetup #46 wrap-up"
date: 2024-11-27T13:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Log, Transform, Monitor: Journals, CI and serverless databases

Hybrid Meetup #46 took place
[2024-11-26](https://www.meetup.com/leipzig-golang/events/298481354/) 19:00 at
[Basislager](https://www.basislager.co/) and we had a nice mix of people, both
online and offline, with different backgrounds in addition to two great
presentations.

### Go journald exporter

[Leandro](https://www.linkedin.com/in/leandrosansilva/) motivated the need for
a tool that joins a legacy C++ application with modern event monitoring tool
like [Prometheus](https://github.com/prometheus/prometheus), through systemd,
specifically
[journald](https://man7.org/linux/man-pages/man8/systemd-journald.service.8.html):
[go-journald-exporter](https://gitlab.com/leandrosansilva/go-journald-exporter).

journald has a [native protocol](https://systemd.io/JOURNAL_NATIVE_PROTOCOL/)
that allows processes to write directly to the log;
[go-journald-exporter](https://gitlab.com/leandrosansilva/go-journald-exporter)
will use [go-systemd](https://github.com/coreos/go-systemd) bindings to seek to
the end of the journal, listen for specific messages and transform them to
prometheus metrics, which the tool exposes through an HTTP endpoint (because Prometheus is
[pull-based](https://prometheus.io/docs/introduction/faq/#why-do-you-pull-rather-than-push)).

This way, a lightweight [tool of a few hundred lines of code](https://gitlab.com/leandrosansilva/go-journald-exporter/), can offer better
visibility into a fleet of legacy applications running in a low resource
environment, where Go is viable and a performant option, too.

> More details [in the slides](/downloads/leipzig-gophers-46-2024-11-26-go-journald-exporter.html).

[![](/images/meetup-46-go-journald-exporter-slides-screenie.png)](/downloads/leipzig-gophers-46-2024-11-26-go-journald-exporter.html)

### From GitHub workflow JSON to postgres to grafana

[Fedor](https://www.linkedin.com/in/fedor-dikarev/) turned GitHub CI run
results (taken from the API, JSON format) into much more comprehensible visual
aggregations with a small tool:
[gh-workflow-stats-action](https://github.com/neondatabase/gh-workflow-stats-action/).

[![](/images/meetup-46-screenie.png)](https://github.com/neondatabase/neon/actions)

It reads data off the GitHub API, populates a postgres database and uses
[grafana
postgres](https://grafana.com/docs/grafana/latest/datasources/postgres/) data
source to aggregate and visualize metrics from CI runs.

For larger projects, GitHub API rate limiting needs to be accounted for, but
it's possible to turn CI output from a larger project into database tables over
a weekend.

As a nice recursive twist, the tool used [neon.tech](https://neon.tech/) to
create a postgres database for storing the workflow run results in the cloud
with one click: you get a [DSN](https://en.wikipedia.org/wiki/Data_source_name) and you are ready to go.
[Neon](https://github.com/neondatabase/neon) splits storage and compute
components of postgres and can unlock lots of useful features this way, like
scaling and branching. With branching, the
[WAL](https://www.postgresql.org/docs/current/wal-intro.html) gets written
forward differently for different branches, which is useful for testing and
staging environments.

On the side: neon.tech is [hiring](https://neon.tech/careers)!

### Thanks for the tools!

[SLOC](https://github.com/XAMPPRocky/tokei) of the tools presented: 484 (go-journald-exporter) and 622
(gh-workflow-stats-action) &mdash; both help to turn streams of diagnostics into
suitable formats for modern monitoring tools and are adaptable in other projects as well.

Thanks again to [Leandro](https://www.linkedin.com/in/leandrosansilva/) and
[Fedor](https://www.linkedin.com/in/fedor-dikarev/) for the inspiring talks and
demos.


### Misc

* kubernetes test grid: [https://testgrid.k8s.io/sig-release](https://testgrid.k8s.io/sig-release)
* another CI tool (written in Go): [concourse](https://concourse-ci.org/)
* more CI tools: [https://argoproj.github.io/cd/](https://argoproj.github.io/cd/), [https://fluxcd.io/](https://fluxcd.io/)
* [CI/CD Observability using OpenTelemetry](https://www.cloudraft.io/blog/cicd-observability-using-opentelemetry)
* go build infrastructure is open source, too: [build](https://github.com/golang/build), using a custom framework to model the different workflow steps leading to release artifacts
* if you are into the classic web, check out the
  [tildeverse](https://tildeverse.org/), e.g.
[https://tilde.club](https://tilde.club),
[https://tilde.town/](https://tilde.town/), ...




================================================
FILE: posts/meetup-47-invitation.md
================================================
---
title: "Winter ❄️  Drinkup #47 invitation"
date: 2024-11-29T22:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

For meetup #47 on Thursday [Dec 19, 2024 19:00
CET](https://www.meetup.com/leipzig-golang/events/298066373) we will meet at
[Cantona Leipzig](https://www.google.com/search?q=cantona+leipzig)
([OSM](https://www.openstreetmap.org/node/243213647)) without agenda, offline only.

[![](/images/snow.gif)](https://gifcities.org/?q=snow)

[Join us](https://www.meetup.com/leipzig-golang/events/298066373) to discuss
all things Go and beyond.


<!--

TODO: outreach.

-->



================================================
FILE: posts/meetup-47-wrapup.md
================================================
---
title: "Drinkup #47 wrap-up"
date: 2024-12-20T10:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Misc

Drinkup #47 took place [2024-12-19](https://www.meetup.com/leipzig-golang/events/298066373) 19:00 at
[Cantona Leipzig](https://www.google.com/search?q=cantona+leipzig).

* LLM coding assistants became so mainstream this year that people are starting to turn them off
  (even if they are given away for free); but new interaction modes like *canvas*
or deeper integration with your *code project* or *IDE* feel a bit like having swimming
fins 🧜
* do you know about software that is usable, used and finished? haha! [tell us about it!](https://github.com/golang-leipzig/software-that-is-finished) -- the [DoD would also listen!](https://media.defense.gov/2019/May/01/2002126690/-1/-1/0/SWAP%20EXECUTIVE%20SUMMARY.PDF) cf. [HN](https://news.ycombinator.com/item?id=34558707)
* well, [are we really engineers](https://www.hillelwayne.com/post/are-we-really-engineers/), then [why can't we make simple software](https://www.youtube.com/watch?v=czzAVuVz7u4)? Does a [time travelling debugger](https://www.youtube.com/watch?v=NiGzdv84iDE) help? If you think the old times were better, or less strange, please check out [The Old New Thing: Practical development throughout the evolution of Windows](https://devblogs.microsoft.com/oldnewthing/)
* if you are developing software, you are going through many different stages
  along different axes, with one axis being testing: you start with enjoying unit test
and you end with mostly focussing on integration tests
* [Greg Wilson](https://third-bit.com/) nicely summarizes a lots of empirical research on code and
  sofware development into a few slides, like this one:
[greatest-hits/#20](https://third-bit.com/talks/greatest-hits/#20): [SLOC](https://en.wikipedia.org/wiki/Source_lines_of_code) is still OK, more on that complex topic: [From Code Complexity Metrics to Program
Comprehension](https://dl.acm.org/doi/pdf/10.1145/3546576)
* speaking of SLOC, *did you know* that [wireguard](https://www.wireguard.com/), the VPN tunnel protocol,
  shines on this metric: [3904 vs
116730](https://www.wireguard.com/talks/fosdem2017-slides.pdf#page=4) lines of code, compared to OpenVPN (2017,
wireguard has been added Linux
[5.6](https://kernelnewbies.org/Linux_5.6#WireGuard.2C_a_faster.2C_simpler.2C_secure_VPN))
* speaking of wireguard, *did you know* that you can run a [tailscale control server](https://tailscale.com/opensource) yourself, e.g. with
[headscale](https://headscale.net/)? both tailscale and headscale are written
in Go, so we may explore this topic further in an upcoming event (the name tailscale is *flipped* from the 2013 Google paper [The tail at scale](https://www.barroso.org/publications/TheTailAtScale.pdf))

> The long tail of products are never going to be that big [ie. as a
> hyperscaler] &mdash; almost everybody building almost everything doesn't have
> any of those problems. -- [Avery Pennarun](https://apenwarr.ca/log/) at [45:56...](https://www.buzzsprout.com/1822302/episodes/9890092-tailscale-with-avery-pennarun-brad-fitzpatrick)

[...] Which *may* mean that we will see more people regaining ownership over
their personal data &ndash; or even more *cloud exits* &ndash; because it gets
constantly *cheaper* to store, host and run stuff on your own *infra*.

> The people predicting the end of Moore's law is doubling every 18 months. --
> [[Jim Keller](https://en.wikipedia.org/wiki/Jim_Keller_(engineer)), maybe]

The aspect of privacy can also be put at the key of
products, like [ente.io](https://github.com/ente-io/ente), a *fully open
source, End to End Encrypted alternative to Google Photos and Apple Photos*.

----

Anyone up for a challenge to implement an [array programming
language](https://en.wikipedia.org/wiki/Array_programming) in Go? Or
maybe [presenting](https://golangleipzig.space/proposals/) something
yourself?

In any way, subscribe to our [RSS
feed](https://golangleipzig.space/posts/index.xml) or [join our meetup
group](https://www.meetup.com/de-DE/leipzig-golang/) to get notified of
upcoming events. Happy holidays.

[![](/images/EIJOPZQVXHNVF4FIQBUGSLCZFUEC57JN.gif)](https://gifcities.org)




================================================
FILE: posts/meetup-48-invitation.md
================================================
---
title: "Hybrid Meetup #48 invitation"
date: 2025-02-08T12:00:00+01:00
draft: false
tags:
- announcement
- meetup
---

## Kubernetes Security Bits

Hello, 世界!

For meetup #48 on Tuesday [Tue 25, 2025 19:00
CET](https://www.meetup.com/leipzig-golang/events/305626240/) at
[Basislager](https://www.basislager.co) Leipzig we are lucky to have
[Simon](https://www.linkedin.com/in/simon-b%C3%A4umer-a61042177/) (Red Hat,
[RHACS](https://www.redhat.com/en/resources/advanced-cluster-security-for-kubernetes-datasheet)) to dive into kubernetes container security topics,
including architecture questions and concrete techniques like forensic container checkpointing (a related [ASG23
talk](https://media.ccc.de/v/all-systems-go-2023-177-forensic-container-checkpointing-and-analysis)
on the matter).

### Schedule

* 18:45 Doors open
* 19:00 Welcome
* 19:10 Kubernetes Security Bits (talk and discussion)
* 20:15 [Local bar](https://soltmann.club/) excursion

We'll meet:

* in person at [Basislager](https://www.basislager.co/), [Peterssteinweg 14, 04107 Leipzig](https://www.openstreetmap.org/node/3504864558), [GMaps](https://maps.app.goo.gl/FoC727e5cgpiXLTo9)
* and online via [Jitsi](https://meet.jit.si/LeipzigGophers48)

See you!


<!--

https://www.meetup.com/de-DE/kubernetes-user-group-leipzig/discussions/
https://www.linkedin.com/posts/martin-czygan-58348842_kubernetes-security-activity-7300139316674994176-o8Eb?utm_source=share&utm_medium=member_desktop&rcm=ACoAAAj4ETMB_N_adYM-kQAUCeKn07XBMXgGGaE
https://www.linkedin.com/posts/activity-7299800058810564609-dGEg

-->



================================================
FILE: posts/meetup-48-wrapup.md
================================================
---
title: "Hybrid Meetup #48 wrap-up"
date: 2025-03-10T08:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Kubernetes Security and checkpoint/restore in userspace

Hybrid Meetup #48 took place
[2025-02-25](https://www.meetup.com/leipzig-golang/events/305626240/) 19:00 at
[Basislager](https://www.basislager.co/) and we had a great presentation about
Kubernetes security.

### StackRox/RHACS

StackRox (founded in
[2014](http://web.archive.org/web/20151002074324/https://www.stackrox.com/))
focussed on container/cluster security and was acquired by Red Hat in
[2021](https://www.redhat.com/en/blog/red-hat-releases-open-source-stackrox-to-the-community).

> Today, Red Hat is excited to announce that Red Hat Advanced Cluster Security
> for Kubernetes (RHACS) is now open sourced as StackRox. The Kubernetes and
> container security community can now use and contribute to the codebase of
> [StackRox on Github](https://github.com/stackrox/stackrox).

There are three security layers on the cluster:

* build time (CVE handling, image checks, ...); supported by [roxctl](https://docs.redhat.com/en/documentation/red_hat_advanced_cluster_security_for_kubernetes/4.0/html-single/roxctl_cli/index#check-policy-compliance_cli-getting-started)
* deploy time ([admission controller](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/))
* runtime (agent collecting telemetry from nodes)

Interestingly, the core application can run on a single node, using a single
Postgres instance (up to 300GB); vertically scaled to (in the order of) 32
cores and 64GB RAM.  While this can be a bottleneck, clusters up to 3000 nodes and
40,000 cores are currently well supported by the application.

Some compute intensive parts of the application include the database, spikes
from user queries, long running queries or analytics.

StackRox will use other tools, such as [falco](https://falco.org/)
([source](https://github.com/falcosecurity/falco)) for event [monitoring](https://falco.org/docs/#what-does-falco-check-for).

> At its core, Falco is a kernel monitoring and detection agent that observes
> events, such as syscalls, based on custom rules. Falco can enhance these
> events by integrating metadata from the container runtime and Kubernetes. The
> collected events can be analyzed off-host in SIEM or data lake systems.

For node communication, StackRox will use
[mTLS](https://en.wikipedia.org/wiki/Mutual_authentication#mTLS) and
[gRPC](https://grpc.io/).

### Checkpoint/Restore in userspace

Creating snapshots from containers can be useful for forensic analysis or container migration.
We briefly looked at [criu](https://criu.org/Main_Page):

> It can freeze a running container (or an individual application) and
> checkpoint its state to disk. The data saved can be used to restore the
> application and run it exactly as it was during the time of the freeze. Using
> this functionality, application or container live migration, snapshots,
> remote debugging, and many other things are now possible.

More on that topic:

* [Forensic Analysis of Container Checkpoints - DevConf.CZ 2023](https://www.youtube.com/watch?v=pySOkAqlGtY)
* [Forensic container checkpointing and analysis](https://www.youtube.com/watch?v=hpoWOc8QAzU) (ASG23)

Thanks again to
[Simon](https://www.linkedin.com/in/simon-b%C3%A4umer-a61042177/) for the great
high-level archtectural overview.



================================================
FILE: posts/meetup-49-invitation.md
================================================
---
title: "Hybrid Meetup #49 invitation"
date: 2025-03-11T14:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

## Memory Management in Go

Hello, 世界!

For meetup #49 on Tuesday [Mar 25, 2025 19:00
CET](https://www.meetup.com/leipzig-golang/events/305626247) at
[CHECK24](https://www.check24.de/) Leipzig Office we will dive into the Go
[memory model](https://go.dev/ref/mem) and we are glad to have to some great input on this matter:

* [Fabian](https://www.linkedin.com/in/fabian-g%C3%A4rtner-913584141/) will dive into *Memory Management in Go*

> Go approaches its memory model in much the same way as the rest of the
> language, aiming to keep the semantics simple, understandable, and useful.

As a lightning talk,
[Martin](https://de.linkedin.com/in/martin-czygan-58348842) will share how he
runs his own VPN with [headscale](https://headscale.net/).

Join us for a fun evening while diving into a core Go language topic!

### Schedule

* 18:45 Doors open
* 19:00 Welcome
* 19:10 Talk: Memory Management in Go
* 19:50 Lightning Talk: Running your own VPN with headscale

We'll meet:

* in person at [CHECK24 Leipzig Office](https://maps.app.goo.gl/hWKDzUNSYuHcRCew6), [Tröndlinring 3, 04105 Leipzig](https://maps.app.goo.gl/hWKDzUNSYuHcRCew6) ([osm](https://www.openstreetmap.org/relation/1385675)) -- directions provided at the entrance
* and online via [Jitsi](https://meet.jit.si/LeipzigGophers49)

Note: By attending this event you agree to be photographed.

See you!

PS: Free drinks and 🍕, courtesy of [CHECK24](https://www.check24.de/)!


<!--

https://www.linkedin.com/posts/florianbr%C3%A4utigam_leipzig-gophers-49-di-25-m%C3%A4rz-2025-activity-7307675881349525505-NOZ1?utm_source=share&utm_medium=member_desktop&rcm=ACoAAAj4ETMB_N_adYM-kQAUCeKn07XBMXgGGaE
https://www.linkedin.com/posts/martin-czygan-58348842_golang-go-vpn-activity-7310223721309368320-RRP3?utm_source=share&utm_medium=member_desktop&rcm=ACoAAAj4ETMB_N_adYM-kQAUCeKn07XBMXgGGaE

-->



================================================
FILE: posts/meetup-49-wrapup.md
================================================
---
title: "Hybrid Meetup #49 wrap-up"
date: 2025-03-26T08:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Memory management in Go or *To GC or not to GC*

Hybrid Meetup #49 took place
[2025-03-25](https://www.meetup.com/leipzig-golang/events/305626247) 19:00 at
[CHECK24](https://www.check24.de/) Leipzig Office and we had a great
introduction to memory management with Go by [Fabian](https://www.linkedin.com/in/fabian-g%C3%A4rtner-913584141/).

Slides and quiz can be found at
[mentimeter.com](https://www.mentimeter.com/app/presentation/alog8a9xsqj6hwbyi6t32m5qzh295rue/view?question=9bym8yfwp7c4).

[![](/images/meetup-49-menti-screenie-2025-03-25-231344.png)](https://www.mentimeter.com/app/presentation/alog8a9xsqj6hwbyi6t32m5qzh295rue/view?question=9bym8yfwp7c4)

Some rules to program by:

* Stack allocation are better then heap allocation
* Number of heap allocations are more important than size of heap allocations
* Reduce the number of pointers in heap to reduce mark phase costs
* Be aware of the memory layout of you structs
* Make sure that every goroutine returns at some point (to avoid leaks)
* Use pprof to determine problems in you program

There is a great GC guide at: [doc/gc-guide](https://go.dev/doc/gc-guide), and
a few SO questions [tagged with Go and
GC](https://stackoverflow.com/questions/tagged/go%2bgarbage-collection?tab=Votes)

A tool for visualizing is [structlayout](https://github.com/dominikh/go-tools/tree/master/cmd/structlayout).

```
$ go install honnef.co/go/tools/cmd/structlayout@latest
$ go install github.com/ajstarks/svgo/structlayout-svg@latest
```

You can then generate struct layout diagrams.

```
$ structlayout -json runtime slice | structlayout-svg -t "runtime.slice" > /tmp/struct.svg
$ structlayout -json bufio Reader | structlayout-svg -t "bufio.Reader" > /tmp/struct.svg
$ structlayout -json net/http Response | structlayout-svg -t "net/http.Response" > /tmp/struct.svg
```

[![](/images/meetup-49-structlayout-combined.png)](/images/meetup-49-structlayout-combined.png)

Some more memory related types:

* [sync.Pool](https://pkg.go.dev/sync#Pool)
* [memory arenas](https://github.com/golang/go/issues/51317) (experimental, but likely be declined)

Thanks again [Fabian](https://www.linkedin.com/in/fabian-g%C3%A4rtner-913584141/) for the great presentation!

## VPN and *any of those problems*

Run your own VPN mesh with [headscale](https://headscale.net) (or
[ionscale](https://github.com/jsiebens/ionscale)) as the tailscale control
server.

Slides: [LGO49-RYOVPN.pdf](https://golangleipzig.space/downloads/LGO49-RYOVPN.pdf).

[![](/images/meetup-49-RYOVPN.png)](https://golangleipzig.space/downloads/LGO49-RYOVPN.pdf)


Where does the name tailscale come from? From the 2013 Google paper [The tail
at scale](https://dl.acm.org/doi/pdf/10.1145/2408776.2408794).

> The long tail of products are never going to be that big [ie. as a
> hyperscaler] &mdash; almost everybody building almost everything doesn't have
> any of those problems. -- [Avery Pennarun](https://apenwarr.ca/log/) at [45:56...](https://www.buzzsprout.com/1822302/episodes/9890092-tailscale-with-avery-pennarun-brad-fitzpatrick)

PS. Find great gifs for your next presentation at [gifcities.org](https://gifcities.org).

[![](/images/KWO2MF6TRNCGAYOSZWWDVHKBVELCZQV5.gif)](https://gifcities.org)


## Misc

* LLM use case snapshot: documentation navigation (using an LLM feels like
  using SO in the 2010s), writing 5-10 lines functions, writing narrow types,
e.g. a helper to fill a type with random values; build tool scripts
adjustments; emacs has [gptel](https://github.com/karthink/gptel) (example
[RAGmacs](https://www.youtube.com/watch?v=JHXG225oP8E)), a workflow that takes
a URL and summarizes the content directly in emacs is easy; also great tool use
in elisp or beyond; LLM as brainstorming/research tool
* [Waterfall style systems building](https://www.umsl.edu/~hugheyd/is6840/waterfall.html) seems to be hard to follow these days (a grand
  plan seldom survives contact with reality), [preferring throwaway code over
design
docs](https://softwaredoug.com/blog/2024/12/14/throwaway-prs-not-design-docs)
may be a better way, as designs can be discovered with code while throwing away
code is part of [building a theory](https://pages.cs.wisc.edu/~remzi/Naur.pdf)
around the requirements and forces surrounding software

[Join our meetup](https://www.meetup.com/de-DE/leipzig-golang/) to get notified of upcoming events.



================================================
FILE: posts/meetup-5-invitation.md
================================================
---
title: "Meetup #5 invitation"
date: 2019-06-11T12:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界! For [meetup #5](https://www.meetup.com/Leipzig-Golang/events/262224151) we will
have two lightning talks:

* Beautiful (and strange) IO

A short overview of the io package and its interfaces and possible strategies
for custom implementations. Plus some a few examples of implementations you
might not have seen before.

* Controlling a headless browser with Go.

A quick look at web automation with Go and Chrome.

As always are also looking for lightning talks, presentations or other kinds of
inputs. Please feel free to notify us before (e.g. in comments) or just drop
by.

----

Hallo, 世界! Für [Meetup #5](https://www.meetup.com/Leipzig-Golang/events/262224151) haben wir zwei Lightning Talks:

* Beautiful (and strange) IO

Eine kurzer Überblick über das io package in der Standardbibliothek und
Möglichkeiten für eigene Implementierungen. Zusätzlich einige Beispiele für
seltene Anwendungen.

* Controlling a headless browser with Go.

Webautomatisierung mit Go und Chrome.

Außerdem sind Lightning Talks, Präsentationen, Erfahrungsberichte, Buch/Paper
Rezension und sonstiges immer willkommen. Wer etwas vorstellen möchte, kann das
gern etwas mitbringen.




================================================
FILE: posts/meetup-5-wrapup.md
================================================
---
title: "Meetup #5 wrap-up"
date: 2019-06-15T01:00:00+02:00
draft: false
tags:
- summary
- meetup
---

{{< h2 >}}Bits from the IO package{{< /h2 >}}

The [IO package](https://golang.org/pkg/io/) is a central package in the
standard library, as it provides (among other things) two main interfaces:

* [io.Reader](https://golang.org/pkg/io/#Reader)
* [io.Writer](https://golang.org/pkg/io/#Writer)

In a lightning talk we dug a bit into the package:

* [Slides](https://github.com/miku/io15min/blob/master/Slides.md) ([PDF](/downloads/leipzig-gophers-5-beautiful-strange-io.pdf))
* [Repo](https://github.com/miku/io15min)

The IO model is simple and powerful (and reminds one of UNIX pipes).


{{< h2 >}}Automate the Web with chromedp{{< /h2 >}}

In a code walkthrough we explored [chromedp](https://github.com/chromedp/chromedp), a pure Go library
talking the Chrome [devtools protocol](https://github.com/ChromeDevTools/devtools-protocol). It allows to run a headless
browser. We looked at three examples:

* Generate good looking full page screenshots
* Generate PDF invoices from HTML
* Rendering SVG

The whole setup can be made robust by isolating Chrome in a container. The
invoice example was a nice one, as working with HTML allows anyone with
HTML/CSS skills to adjust the PDF output (which is usually harder to generate
programmatically). Running many (even headless) Chrome instances will eat your
RAM.


{{< h2 >}}How do developers discover Go?{{< /h2 >}}

Have you ever wondered about how programmers move from language to language?
The author of this entertaining and enlightning blog post (and [other
things](https://github.com/sshuttle/sshuttle)) did as well:

* [Programmer migration patterns](https://apenwarr.ca/log/20190318)



{{< h2 >}}More Linux and Cloud{{< /h2 >}}

We have a presentation about libpod (a tool to work with OCI images) in the
pipeline. Meanwhile, do not miss the next [Linux
Meetup](https://www.meetup.com/de-DE/Linux-Meetup-Leipzig/events/261912346/) on
Tue, 2019-06-18 about runc and CRI-O.




{{< h2 >}}References{{< /h2 >}}

* [IO lightning talk repo](https://github.com/miku/io15min/)
* [chromedp](https://github.com/chromedp/chromedp)
* [Linux Meetup #6](https://www.meetup.com/de-DE/Linux-Meetup-Leipzig/events/261912346/)



================================================
FILE: posts/meetup-50-invitation.md
================================================
---
title: "Hybrid Meetup #50 invitation"
date: 2025-03-28T08:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

## Reflection and Reconciliation

Hello, 世界!

For meetup #50 on Tuesday [Apr 29, 2025 19:00
CET](https://www.meetup.com/leipzig-golang/events/306803728/) at [Basislager
Coworking](https://basislager.co) we are thrilled to have two input
presentations:

* [Leandro](https://www.linkedin.com/in/leandrosansilva/) will reflect on a
  recent [software project](https://gitlab.com/leandrosansilva/controlcenter) of his, written in Go, that provides [smart postfix
monitoring](https://controlcenter.app/). The project was part of the [YC-W22
batch](https://www.ycombinator.com/companies/lightmeter) ([blog](https://www.ycombinator.com/blog/meet-the-yc-winter-2022-batch)). The title of his
talk will be:

> How a Go project dies; lessons learned, challenges to revive it and the scars I got on the way

This will be a great mix of technical and non-technical aspects of building
software projects.
* Cancelled: [Simon](https://www.linkedin.com/in/simon-b%C3%A4umer-a61042177/)
  will take another closer look at
[StackRox](https://github.com/stackrox/stackrox), the Kubernetes Security
platform. He'll be talking about the client-server protocol between the
StackRox server and its agent and discuss how to maintain backwards
compatibility, manage multiple event streams from clusters and how the
authentication works.

Join us for retrospectives and real-world software project insights!

### Schedule

* 18:45 Doors open
* 19:00 Welcome
* 19:10 Talk: *How a Go project dies; lessons learned, challenges to revive it and the scars I got on the way*
* 19:50 Cancelled: Talk: *StackRox Internals*
* 20:30 [Local bar](https://soltmann.club/) excursion

We'll meet:

* in person at [Basislager](https://www.basislager.co/), [Peterssteinweg 14, 04107 Leipzig](https://www.openstreetmap.org/node/3504864558), [GMaps](https://maps.app.goo.gl/FoC727e5cgpiXLTo9)
* and online via [Jitsi](https://meet.jit.si/LeipzigGophers50)

Free drinks on site.

See you!


<!--

todo: outreach

-->



================================================
FILE: posts/meetup-50-wrapup.md
================================================
---
title: "Hybrid Meetup #50 wrap-up"
date: 2025-05-01T08:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Live and Let Die

Hybrid Meetup #50 took place
[2025-04-29](https://www.meetup.com/leipzig-golang/events/306803728) 19:00 at
[Basislager Leipzig](https://basislager.co) and we had an insightful
presentation on *How a Go project dies; lessons learned, challenges to revive
it and the scars I got on the way*.

[Leandro](https://www.linkedin.com/in/leandrosansilva/) tooks us on a journey
into the [postfix](https://www.postfix.org/) mail transport agent (MTA) monitoring project
[controlcenter](https://gitlab.com/leandrosansilva/controlcenter), written in
Go, how it started and factors that contributed to its stalling. The company
around it, [Lightmeter](https://lightmeter.io/), was part of the [YC-W22
batch](https://www.ycombinator.com/companies/lightmeter), and covered by
[heise.de](https://www.heise.de/news/Lightmeter-Neues-Monitoring-Werkzeug-fuer-den-E-Mail-Server-4647424.html),
[Forbes](https://www.forbes.com/sites/davidjeans/2021/03/01/elastic-war-on-amazon-web-services/), [NGI](https://ngi.eu/blog/2022/01/12/whos-ngi-sam-tuke-with-lightmeter/)
and others.

The slides can be found [here](/downloads/leipzig-gophers-50-2025-04-29-controlcenter-mta-monitoring-how-a-go-project-lives-and-dies.html):

[![](/images/leipzig-gophers-50-how-a-go-project-lives-and-dies.png)](/downloads/leipzig-gophers-50-2025-04-29-controlcenter-mta-monitoring-how-a-go-project-lives-and-dies.html)

### Selected takeaways

* Monoliths are still ok!
* A monolith can look like a set of microservices too; with one database
  per component and intra-process communication through channels
* Reusability as beneficial [emergent property](https://www.dcs.gla.ac.uk/~johnson/papers/RESS/Complexity_Emergence_Editorial.pdf) -- and not a goal in and of itself
* Parsing postfix logs can be a challenge (cf. "[A User-Extensible and
  Adaptable Parser Architectur](https://scispace.com/pdf/a-user-extensible-and-adaptable-parser-architecture-4nocz4o09k.pdf)")
* Controlcenter took inspiration from Apple's [Grand Central
  Dispatch](https://en.wikipedia.org/wiki/Grand_Central_Dispatch) for handling
concurrency and taking advantage of multicore machines in the presence of
limitations (e.g. *usually, SQLite allows at most one writer to proceed
concurrently*)
([docs](https://www.sqlite.org/src/doc/begin-concurrent/doc/begin_concurrent.md))
* Sqlite3 [does not implement](https://sqlite.org/forum/info/78a60bdeec7c1ee9)
  stored procedures, but it has [application defined
functions](https://sqlite.org/appfunc.html); with the Go sqlite3 wrapper, you
can use
[RegisterFunc](https://pkg.go.dev/github.com/mattn/go-sqlite3#SQLiteConn.RegisterFunc)
to blend Go and SQL
* The universe of possible postfix setups is huge, and it is impossible to
  anticipate the layout of all log lines the application would ever encounter;
use a crash-first approach to iterate; implemented with a custom assertion
package (since Go does not have
[assertions](https://en.wikipedia.org/wiki/Assertion_(software_development))); telemetry would help to learn about usage in the wild, but users may not support it
* Early returns, or guard clauses, or the [left-hand rule](https://scribe.rip/@matryer/line-of-sight-in-code-186dd7cdea88) can lead to *else-less code* -- also also avoid the [arrow anti-pattern](http://wiki.c2.com/?ArrowAntiPattern)
* Controlcenter decided against ORM: tighter coupling, but less complexity and more transparency
* Unfortunately, great software with users does not automatically translate to a product with customers

The open source project is looking for contributors. If you are into mailops, then please take
a look at [controlcenter repository](https://gitlab.com/leandrosansilva/controlcenter).


## Misc

* Google [tried
  out](https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html)
to a monolithic microservice approach with the now discontinued [Service
Weaver](https://serviceweaver.dev/):

> Under the covers, Service Weaver will dissect your binary along component
> boundaries, allowing different components to run on different machines. -- [docs](https://serviceweaver.dev/docs.html)

Reflected upon also in [Modular Monolith: Is This the Trend in Software
Architecture?](https://arxiv.org/pdf/2401.11867); cf. [Back to the Future: From
Microservices to Monolith](https://arxiv.org/pdf/2308.15281).

* Go has an a bit unusual set of ORM libraries: classical ones like
  [GORM](https://gorm.io/index.html), more code-generation oriented ones like
[sqlc](https://sqlc.dev/) or [ent](https://github.com/ent/ent); fluent query
builder, like [bob](https://github.com/stephenafamo/bob), or thin wrappers,
like [sqlx](https://github.com/jmoiron/sqlx); generic
[goe](https://github.com/go-goe/goe) and more
* Object-relational mapping works best until it does not
* The Go project added telemetry and made the case that open source projects
  can benefit from telemetry, and that telemetry can be implemented sensible,
too; Russ Cox has written about [Transparent
Telemetry](https://research.swtch.com/telemetry) as well
* Hosting an email server yourself is not too complicated (cf. [mail-in-a-box](https://github.com/mail-in-a-box/mailinabox)), but there is a risk
  being blacklisted and then miss out of important messages
* If you run your own email server, you may receive less spam
* [NGI](https://ngi.eu) (Next Generation Internet) is a European
  Commission initiative to support European digital sovereignty. They have [open calls](https://ngi.eu/opencalls/) to support projects in different areas. There's a similar, smaller scoped fund in Germany, [Prototype Fund](https://prototypefund.de/).
* [Is email dead?](https://www.emailisnotdead.com/) Hint: while you read this
  blog post, the world moved 115,403,640 (legitimate) emails forward.

[![](/images/lotsmail.gif)](https://gitcities.org)

Thanks again to [Leandro](https://www.linkedin.com/in/leandrosansilva/) for the
talk and insights!



[Join our meetup](https://www.meetup.com/de-DE/leipzig-golang/) to get notified of upcoming events.



================================================
FILE: posts/meetup-51-invitation.md
================================================
---
title: "Hybrid Meetup #51 invitation"
date: 2025-05-21T12:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

## Summer vibes

Hello, 世界!

For meetup #51 on Tuesday [May 27, 2025 19:00
CET](https://www.meetup.com/leipzig-golang/events/305626253) at
[Gridfuse](https://gridfuse.com) we have two talks! One short talk/experience report by
[Martin Czygan](https://www.linkedin.com/in/martin-czygan-58348842/) on using
large language models for writing and editing Go (and other) code:

> Beyond Benchmarks: Human x LLM for Go and other code (intermediate report)

> Writing a prompt is like researching a model. Since 01/2025 I have been
> conducting a self-experiment trying to integrate various LLMs into Go
> software development (and also other languages), with mixed results. This short
> talk gives a summary with examples, findings, hits and misses.

We also continue to explore container security with [Simon
Bäumer](https://www.linkedin.com/in/simon-b%C3%A4umer-a61042177) (ex-RedHat)

> StackRox architecture and repository setup

This is a standalone talk, but links to a presentation from Meetup
[#48](https://golangleipzig.space/posts/meetup-48-wrapup/).

### Schedule

* 18:45 Doors open
* 19:00 Welcome
* 19:10 Experience report: Human x LLM for Go and other code (intermediate report)
* 19:35 StackRox architecture and repository setup (Simon Bäumer)
* 20:00 Open Discussion

We'll meet:

* in person at [Gridfuse Office](https://maps.app.goo.gl/Jtcr78iQafZxUtWs6), located at Design Offices Leipzig, [Augustusplatz 1-4, 04109 Leipzig](https://www.openstreetmap.org/node/7230218702) ([Google Maps](https://maps.app.goo.gl/Jtcr78iQafZxUtWs6)) -- [directions](/downloads/Directions_Meetup_Gridfuse.pdf) (PDF), also provided at the building entrance
* and online via [Jitsi](https://meet.jit.si/LeipzigGophers51)

Free drinks and snacks on site, courtesy of [Gridfuse](https://gridfuse.com).

Join us for discussions on coding tools - new and old - that can augment the
software development process.

See you!


<!--

todo: outreach

https://www.linkedin.com/posts/martin-czygan-58348842_leipzig-llm-activity-7331246910868975616-WHZM?utm_source=share&utm_medium=member_desktop&rcm=ACoAAAj4ETMB_N_adYM-kQAUCeKn07XBMXgGGaE

-->



================================================
FILE: posts/meetup-51-wrapup.md
================================================
---
title: "Hybrid Meetup #51 wrap-up"
date: 2025-05-28T10:00:00+01:00
draft: false
tags:
- summary
- meetup
---

## Flaky LLMs and secure containers

Hybrid Meetup #51 took place
[2025-05-27](https://www.meetup.com/leipzig-golang/events/306803728) 19:00 at
renewable energy startup [Gridfuse](https://gridfuse.com) and we had two
shorter presentations:

* Beyond Benchmarks: [Human x LLM for Go and other code](https://github.com/miku/nightjet/blob/main/notes/2025-05-27-lgo-51-short-talk.md) (intermediate report)
* StackRox architecture and repository setup

![](/images/meetup-51-imgs/PXL_20250527_171104868-s.png)

### LLM for coding related tasks

LLM use for coding remains constrained to well scoped problems with some human
domain knowledge, oversight and review. It is still possible to spot generated
code, it lacks a kind of *handwriting*.

Using an LLM can teleport you into a codebase and let you explore or ask
specific questions. For code generation, a disciplined approach would be to
review every line of output.

[![](/images/lgo-51-llm-palm-montage.png)](https://github.com/miku/nightjet/blob/main/notes/2025-05-27-lgo-51-short-talk.md)

This was an intermediate report and we hope, we can have a more comprehensive
assessment of the effects on (Go) software development in the future.

### Container security and StackRox architecture bits

We did some architecture and code review along [diagrams](https://github.com/stackrox/stackrox/blob/92e5d0badaf6a86f0691ad39b739fe233ed193bc/central/platform/reprocessor/singleton.go#L11-L25) and [code](https://github.com/stackrox/stackrox):

[![](/images/lgo-51-acs-architecture-scannerv4.png)](https://docs.redhat.com/en/documentation/red_hat_advanced_cluster_security_for_kubernetes/4.6/html/architecture/acs-architecture)

Some notes:

* [Open Policy Agent](https://www.openpolicyagent.org/) could have been a component, but for the StackRox use case it was deemed to slow at the time
* StackRox is an example of a vertically scaled project (albeit at some point in the past they had a microservices architecture)
* data structures are modeled in with [protobuf](https://protobuf.dev/), e.g. for [storage](https://github.com/stackrox/stackrox/tree/master/proto/storage), other code is then generated from these definitions
* we looked at a singleton service pattern, e.g. used here: [singleton.go](https://github.com/stackrox/stackrox/blob/92e5d0badaf6a86f0691ad39b739fe233ed193bc/central/platform/reprocessor/singleton.go#L11-L25)

Meetup [#48](/posts/meetup-48-wrapup/) also gave a high level overview of StackRox.


### Misc

* [What Is ChatGPT Doing ... and Why Does It Work?](https://openlibrary.org/books/OL47286904M/What_Is_ChatGPT_Doing_..._and_Why_Does_It_Work)
* [SWE-Bench](https://paperswithcode.com/search?q_meta=&q_type=&q=swe-bench)


### Thanks, Gridfuse!

Thanks a lot to [Gridfuse](https://gridfuse.com) for providing a excellent venue in
the center of Leipzig and great space for our meetup - and
[others](https://www.meetup.com/leipzig-devops/)!

![](/images/meetup-51-imgs/PXL_20250527_161842799-s.png)

----

[Join our meetup](https://www.meetup.com/de-DE/leipzig-golang/) to get notified of upcoming events.



================================================
FILE: posts/meetup-52-invitation.md
================================================
---
title: "Summer Drinkup #52 invitation"
date: 2025-06-14T10:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

We'll meet for drinks at [Vergebung](https://g.co/kgs/dDumFh3) on [Tue,
2025-06-17 19:00](https://www.meetup.com/leipzig-golang/events/308500693/).
Join us to discuss all topics Go, cloud and beyond.

[![](/images/ZIEAMTX54GUZ7U3DDOX4Y6HJLIA52CMQ.gif)](https://gifcities.org)

See you!




================================================
FILE: posts/meetup-52-wrapup.md
================================================
---
title: "Summer Drinkup #52 wrap-up"
date: 2025-06-17T22:30:00+02:00
draft: false
tags:
- summary
- meetup
---

[![](/images/FW3THGYK53HJD5QYPVF6KL55JUGE3ZY6.gif)](https://gifcities.org)

[AI 2027](https://ai-2027.com/), [strudel.cc](https://strudel.cc/)

----

[Join our meetup](https://www.meetup.com/de-DE/leipzig-golang/) to get notified of upcoming events.



================================================
FILE: posts/meetup-53-invitation.md
================================================
---
title: "Summer Drinkup #53 invitation"
date: 2025-07-06T20:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

We'll meet for drinks at [Zum Wilden Heinz](https://g.co/kgs/4d11dEH)
([OSM](https://www.openstreetmap.org/node/2703852565)) on [Tue, 2025-07-15
19:00](https://www.meetup.com/leipzig-golang/events/308938518).  Join us to
discuss all topics Go, cloud and beyond.

[![](/images/mflare_eit304.gif)](https://gifcities.org)

See you!




================================================
FILE: posts/meetup-6-invitation.md
================================================
---
title: "Meetup #6 invitation"
date: 2019-07-11T12:00:00+02:00
draft: false
tags:
- announcement
- meetup
---


Hello, 世界! Last minute invitation for [meetup #6](https://www.meetup.com/Leipzig-Golang/events/263061162/).

This will be an open event - please bring your projects, questions, findings. Lightning talks and other inputs are welcome. too.

We have two free tickets for the [Golab 2019 Go conference in Florence](https://golab.io/), Italy - so if you are interested, just drop by.


----

Hallo, 世界! Last Minute Einladung zu [Meetup #6](https://www.meetup.com/Leipzig-Golang/events/263061162/).

Offenes Treffen, eigene Projekte, Themen, Tools, Fragen sind willkommen, ebenso lightning talks und andere Inputs.

Wir haben zwei Tickets für die [Golab 2019 Konferenz in Florenz](https://golab.io/), zu vergeben. Bei Interesse einfach vorbeischauen.



================================================
FILE: posts/meetup-6-wrapup.md
================================================
---
title: "Meetup #6 wrap-up"
date: 2019-07-12T22:00:00+02:00
draft: false
tags:
- summary
- meetup
---

{{< h2 >}}Where to Go?{{< /h2 >}}

The [Berlin Go User Group
celebrates](https://www.meetup.com/golang-users-berlin/) its eighth birthday next
week. Our [meetup](https://www.meetup.com/Leipzig-Golang/) just completed its first ½ year - so far, we touched upon quite a few
of the [initial topic ideas](https://golangleipzig.space/posts/meetup-launched/).

As for [Go conferences](https://github.com/golang/go/wiki/Conferences), [Golab](https://golab.io/) is an annual international Go
conference, which will have its 4th edition this October. We have two free tickets
for you - if you are interested, [just drop me a line](mailto:martin.czygan@gmail.com).

We'll take a short summer break, and will continue in September 2019. Until
then, enjoy a few references.

{{< h2 >}}References{{< /h2 >}}

If you haven't played the nerdiest game in town yet, maybe now is the time:

* [contained.af](http://web.archive.org/web/20230609122747/https://contained.af/)

Want to improve your Go code? You are just a few steps away with [golangci-lint](https://github.com/golangci/golangci-lint):

```
$ go get github.com/golangci/golangci-lint/...
$ cd your/go/project
$ golangci-lint run
...
```

We started a [Go Gotchas
Repository](https://github.com/golang-leipzig/gotchas), feel free to submit a
something strange.



================================================
FILE: posts/meetup-7-invitation.md
================================================
---
title: "Meetup #7 invitation"
date: 2019-08-30T13:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Our next [meetup is scheduled for Sep, 27 2019](https://www.meetup.com/Leipzig-Golang/events/264425468/), 19:00 at [Basislager](https://www.basislager.co/).

Back after summer break we jump right into a core Go topic: [concurrency](https://en.wikipedia.org/wiki/Concurrency_(computer_science)).

We will summarize the book

[Concurrency in Go: Tools and Techniques for Developers](http://shop.oreilly.com/product/0636920046189.do)

and present and discuss techniques - from theoretical to practical aspects.

As always, please bring your projects, questions, findings. Spontaneous lightning talks and other inputs are welcome. too.

----

Hallo, 世界!

Unser nächstes [Meetup findet am 27. September 19:00](https://www.meetup.com/Leipzig-Golang/events/264425468/) im [Basislager](https://www.basislager.co/) statt.

Nach der Sommerpause steigen wir mit einem typischen Go Thema ein: [Nebenläufigkeit](https://de.wikipedia.org/wiki/Nebenl%C3%A4ufigkeit).

Wir werden das Buch

[Concurrency in Go: Tools and Techniques for Developers](http://shop.oreilly.com/product/0636920046189.do)

vorstellen, zusammenfassen und diskutieren.

Wie immer sind eigene Projekte, Themen, Tools, Fragen willkommen, ebenso spontane lightning talks und andere Inputs.




================================================
FILE: posts/meetup-7-wrapup.md
================================================
---
title: "Meetup #7 wrap-up"
date: 2019-09-28T14:00:00+02:00
draft: false
tags:
- summary
- meetup
---

{{< h2 >}}Concurrency in Go{{< /h2 >}}

![](/images/cignotes-chapter-1-topics.png)

Concurrency is hard, but the primitive building blocks of CSP in Go -
goroutines and channels - can make things simpler.

We glanced at the six chapters of [Concurrency in
Go](http://shop.oreilly.com/product/0636920046189.do), and learned a bit about
the problem setting, goroutine sizes, context switch times and patterns.

The notes can be found here:

* [Notes on Concurrency in Go](https://github.com/miku/cignotes)

In the book, the [perf](https://perf.wiki.kernel.org) tool is used to benchmark
context switch times of the kernel - and to compare it with context switch
times in the Go scheduler.

Sidenote: you can see the number of context switches with various tools, e.g. [dstat](https://linux.die.net/man/1/dstat).

![](/images/dstat.png)

Another performance debugging tool are flame graphs, which can be extended in
time, e.g. with flamescope:

* [flamescope](https://github.com/Netflix/flamescope)

Apart from technical topics, we discussed adoption stories of Go in companies.
It's impossible to replace a huge system at once, but people might be surprised
by how resource efficient Go can be - and get curious.





================================================
FILE: posts/meetup-8-invitation.md
================================================
---
title: "Meetup #8 invitation"
date: 2019-10-24T12:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Our next meetup is scheduled for [Friday Nov, 15 2019, 19:00](https://www.meetup.com/Leipzig-Golang/events/265955691/) at [Basislager](https://www.basislager.co/).

We will have input presentations on two topics:

* A custom deployment utility for Pull Requests written in Go
* [Go module proxy](https://proxy.golang.org/) internals and pitfalls

As always, please bring your projects, questions, findings. Spontaneous
lightning talks and other inputs are welcome, too.

----

Hallo, 世界!

Unser nächstes Meetup findet am [15. November 19:00](https://www.meetup.com/Leipzig-Golang/events/265955691/) im [Basislager](https://www.basislager.co/) statt.

Wir haben zwei Input-Präsentationen

* Implementierung eines Deployment-Tools für Pull Requests
* Go Module Proxy Interna und Probleme

Wie immer sind eigene Projekte, Themen, Tools, Fragen willkommen, ebenso
spontane lightning talks und andere Inputs.




================================================
FILE: posts/meetup-8-wrapup.md
================================================
---
title: "Meetup #8 wrap-up"
date: 2019-11-19T21:00:00+02:00
draft: false
tags:
- summary
- meetup
---

{{< h2 >}}Anatomy of a Go module proxy{{< /h2 >}}

The Go packaging story started many years ago with `GO15VENDOREXPERIMENT` and
a myriad of tools for managing dependencies. And, annoyingly `GOPATH` was one
of the main obstactles for people getting started with Go. Since [Go
1.11](https://golang.org/doc/go1.11#modules), we have experimental support for
Go modules.

A new component related to modules is the [module
proxy](https://proxy.golang.org/). A bit of history, internals and pitfalls has
been compiled by [klingtnet](https://github.com/klingtnet) into a great talk.

[Go Module Proxy - Internals and
Pitfalls](https://rawcdn.githack.com/golang-leipzig/module-proxy-november-meetup/c58770084e025fd4a1ea0f6b7f69c5adeae1817a/slides.html#/title-slide).
The repository for can be found at
[golang-leipzig/module-proxy-november-meetup](https://github.com/golang-leipzig/module-proxy-november-meetup).

Proxies are great, as they lower the load on source repository hosts and can
prevent events like [left-pad](http://left-pad.io/) (2016). However, there is
a slight potential information leak when the Go tools contact
[proxy.golang.org](https://proxy.golang.org/) - the `GOPRIVATE` [environment
variable](https://golang.org/doc/go1.13#modules) [can
help](https://github.com/golang/go/issues/33796).

Advantages, implementations and the proxy protocal details can be found in the
[slides](https://rawcdn.githack.com/golang-leipzig/module-proxy-november-meetup/c58770084e025fd4a1ea0f6b7f69c5adeae1817a/slides.html#/title-slide).

![](/proxy-protocol.png)

Also, thanks [klingtnet](https://github.com/klingtnet) for liberating an slightly
strange zip implementation from the depths of the Go module proxy
implementation!

* This issue started the conversation: [golang/go/issues/34953](https://github.com/golang/go/issues/34953)
* And a few weeks later, we have: [golang.org/x/mod/zip](https://godoc.org/golang.org/x/mod/zip)

{{< h2 >}}Pull Request Deployment{{< /h2 >}}

Everyone needs this. When a change to a codebase is made, how great would it be
to just see that single change, e.g. for a given pull request? That's what this
pull request deployment tool does. While the tool itself is tied to company
context, [panzerdev](https://github.com/panzerdev) condensed the workings of the tool into these slides:

* [PR_Deployment.pdf](/downloads/PR_Deployment.pdf)

Motivation:

> * Code changes in a branch should be tested in isolation based on latest master
> * Testing of not yet approved changes shouldn't change shared datasource (DB)
> * Multiple code changes shouldn't share a datasource (DB) simultaniously
> * Should be gone after merge without leftover junk

Read the slides, get inspired, join us next time - and: automate all the things!

{{< h2 >}}Misc{{< /h2 >}}

* Go turned 10 this month - [Happy Birthday](https://blog.golang.org/10years) and thanks for bringing fun back into programming!
* A new site emerged: [pkg.go.dev/](https://pkg.go.dev/)

> Go.dev is a companion website to golang.org. Golang.org is the home of the
open source project and distribution, while go.dev is the hub for Go users
providing centralized and curated resources from across the Go ecosystem.

* [GOLAB](https://golab.io/) 2019 in Florence, Italy was great - a truly
  international conference with over 2/3 of the people coming from all over the
  world!
* For upcoming conferences, consult the wiki: [Go Conferences and Major Events](https://github.com/golang/go/wiki/Conferences)




================================================
FILE: posts/meetup-9-invitation.md
================================================
---
title: "Meetup #9 invitation"
date: 2020-02-17T20:00:00+02:00
draft: false
tags:
- announcement
- meetup
---

Hello, 世界!

Our first 2020 meetup is scheduled for [Friday, Feb 21, 2020 19:00](https://www.meetup.com/Leipzig-Golang/events/268785494/) at
[Basislager Leipzig](https://www.basislager.co/).

We'll have a 30 min input presentation about Golang's standard library package
[net/http](https://golang.org/pkg/net/http/), especially extension points and
customization options for clients and alternative implementations.

UPDATE: There will also be a presentation about Go 1.14 (which will be released next week) and what we already know about Go 1.15 and beyond. Slides and sources can be found [here](https://github.com/golang-leipzig/go-1.14-and-beyond/).

As always, please bring your projects, questions, findings. Spontaneous
lightning talks and other inputs are welcome, too.

Meetup #9 special: Get a unique [10th anniversary](https://blog.golang.org/10years) Gopher pin!

![](/images/gopher10th-pin-small.jpg)



================================================
FILE: posts/meetup-9-wrapup.md
================================================
---
title: "Meetup #9 wrap-up"
date: 2020-02-22T01:00:00+02:00
draft: false
tags:
- summary
- meetup
---

{{< h2 >}}Go 1.14{{< /h2 >}}

[Meetup #9](https://www.meetup.com/Leipzig-Golang/events/268785494/)
took place on Friday, February 21, 2020, 19:00 CEST at
[Basislager](https://www.basislager.co/).

We looked at changes coming in the upcoming [Go
1.14](https://tip.golang.org/doc/go1.14) release, which is is expected to be
released in February 2020.

The slides can be found here:

* [Slides](https://rawcdn.githack.com/golang-leipzig/go-1.14-and-beyond/e430eef8ac39a2a3eb15a4d422bebe2069e05960/slides.html), [Repo](https://github.com/golang-leipzig/go-1.14-and-beyond)

[![](/images/go1.14andbeyond.png)](https://rawcdn.githack.com/golang-leipzig/go-1.14-and-beyond/750e27aec11e1fa49064173fc6512d7d79515e84/slides.html#/title-slide)

There are many improvements, just one of them is lower-cost [defer
statements](https://golang.org/ref/spec#Defer_statements).

The proposal can be found here:

* [Proposal: Low-cost defers through inline code, and extra funcdata to manage
  the panic
  case](https://go.googlesource.com/proposal/+/refs/heads/master/design/34481-opencoded-defers.md)

Recommended podcast: [gotime/112](https://changelog.com/gotime/112).

----

{{< h2 >}}HTTP Getaway{{< /h2 >}}

The [net/http](https://golang.org/pkg/net/http/) package offers many extension points, using interfaces or callbacks - as well as alternative implementations. A few examples are sketched out in [HTTP Getaway](https://github.com/miku/httpgetaway).

![](https://raw.githubusercontent.com/miku/httpgetaway/master/static/hijack.gif)

Retry is a common pattern. Interestingly, application layer retries might not
always be enough, sometimes only a connection reset will help.

![](https://raw.githubusercontent.com/miku/httpgetaway/master/static/levels.png)

----

{{< h2 >}}Misc{{< /h2 >}}

* We discussed various ways to handle errors, there has been some updates
  starting with Go 1.13: [Working with Errors in Go
  1.13](https://blog.golang.org/go1.13-errors)
* A popular testing library is [stretchr/testify](https://github.com/stretchr/testify), e.g. helps to test code that panics. Maybe more lightweight - [is](https://github.com/matryer/is).
* Speaking of panics: Shall libraries panic? In which cases? According to
  [Effective Go](https://golang.org/doc/effective_go.html#panic), `panic`
  should be an exception, rather the rule.
* Pop quiz on modules: Is
  [go.sum](https://golang.org/cmd/go/#hdr-Modules__module_versions__and_more)
immutable? The [docs
say](https://golang.org/cmd/go/#hdr-Module_authentication_using_go_sum): "In
day-to-day development, the checksum of a given module version should never
change." - however it *can* change, here's an example commit:
[766e40eb](https://github.com/kubernetes-sigs/kind/commit/766e40ebe4c6ca4cf8c845cba3a4a6d51e94fc9b#diff-f949e2d81c8076ebbf8af38fcbb72c1f).
More details can be found a blog series on modules, e.g. [Part 4: Mirrors,
Checksums and
Athens](https://www.ardanlabs.com/blog/2020/02/modules-04-mirros-checksums-athens.html).
* Three HTTP router libraries that seem to be popular:
  [mux](https://github.com/gorilla/mux), [chi](https://github.com/go-chi/chi),
  [httprouter](https://github.com/julienschmidt/httprouter)
* Combining [io.Reader](https://golang.org/pkg/io/#Reader) and
  [Context](https://golang.org/pkg/context/#Context) can be useful to cancel an expensive read (e.g. large file) in an HTTP handler, here's a description of [context-aware IO](https://pace.dev/blog/2020/02/03/context-aware-ioreader-for-golang-by-mat-ryer).
* One cool project: [kind](https://github.com/kubernetes-sigs/kind), providing local clusters for testing Kubernetes. Given a docker with at least Go 1.11, starting a cluster becomes a one-liner: `GO111MODULE="on" go get sigs.k8s.io/kind@v0.7.0 && kind create cluster` - incredible.
* 16 days ago, a new W3C recommendation was published, [Trace Context Level
  1](https://www.w3.org/TR/trace-context/), which *defines
  standard HTTP headers and a value format to propagate context information
  that enables distributed tracing scenarios. The specification standardizes
  how context information is sent and modified between services. Context
  information uniquely identifies individual requests in a distributed system
  and also defines a means to add and propagate provider-specific context
  information.*

And much more.

----

{{< h2 >}}Contributing{{< /h2 >}}

We want to make it simpler to contribute and to stay up to date with our meetup
and we may create a mailing list in the future.

Until then, please feel invited to:

* follow our [RSS feed](https://golangleipzig.space/posts/index.xml)
* [PR a topic](https://github.com/golang-leipzig/topics)
* contact us via [Meetup](https://www.meetup.com/Leipzig-Golang/) or [E-mail](mailto:martin.czygan@gmail.com)
* join us at GitHub at [Leipzig Gophers](https://github.com/golang-leipzig) org



================================================
FILE: posts/meetup-launched.md
================================================
---
title: "Launched 🚀"
date: 2019-02-09T00:15:25+01:00
draft: false
tags:
- go
- meetup
- summary
---

We launched! The first meetup took place
[yesterday](https://www.meetup.com/Leipzig-Golang/events/258372375/)
(2019-02-08) at [Basislager](https://www.basislager.co/). A dozen gophers,
programmers, devops developers, cluster admins and curious individuals
followed our invitation.

A good mix of backgrounds, experience levels and professional contexts lead to
lively discussions around Go, the language, microservices, company cultures,
adoption, streaming, cruise ships, conference impressions, book tips, distributed
denial-of-service attacks, kubernetes operators and much more. Thanks for
joining us, we think we're off to a good start!

We discussed and collected some topics for the coming months. As people are
experimenting with or adopting Go, there seems to be an interest in the
language, its idioms and pitfalls, real-world use cases and more. We also want
to encourage people to bring their own Go projects for a friendly review, if
they like.

Here are some topics that we gathered for talks in future meetups:

* Go modules (coming in [1.12](https://tip.golang.org/doc/go1.12))
* The Go2 proposals
* How to structure your Go projects?
* gRPC, protobuf, usage scenarios, error handling
* kubernetes in production, real-world insights
* Go gotchas and pitfalls
* net and net/http deep dive
* Using Go in the browser with WASM
* The io package and its interfaces
* Testing in Go (httptest, coverage, race conditions)
* Favorite Go tools and projects (maybe in a lightning talk format)
* GraphQL use cases
* Proxy landscape, traefik, envoy, diy-solutions
* Profiling with Go
* Containers without docker with podman
* gVisor, Kata Containers, Firecracker: Container sandboxing

We plan a next meeting for March 2019, feel free to join our [meetup
group](https://www.meetup.com/Leipzig-Golang/) for updates.

----

References:

* [Intro slides](https://github.com/golang-leipzig/welcome/blob/master/Slides.md)
* A [subjective](https://github.com/miku) list of [eight reasons](https://github.com/golang-leipzig/welcome/blob/master/8Reasons.md),
why Go might succeed.
* Book: [The Go programming language](https://www.gopl.io/)



================================================
FILE: posts/new-meetup-group.md
================================================
---
title: "New Golang and Cloud-Native Meetup"
date: 2019-01-26T12:45:00+01:00
draft: false
tags:
- announcement
- meetup
---

We now have an [meetup.com
profile](https://www.meetup.com/Leipzig-Golang/), upcoming events
will be announced there. Thrilled to see [people expressing
interest](https://www.meetup.com/Leipzig-Golang/members/) in this.



================================================
FILE: posts/second-meetup-call-for-input.md
================================================
---
title: "Second meetup: Call for Input"
date: 2019-02-18T17:00:00+01:00
draft: false
tags:
- cfi
- meetup
---

The second meetup is scheduled for Friday, [March 15,
2019](https://www.meetup.com/Leipzig-Golang/events/259045114/), again
19:00 CET at [Basislager](https://www.basislager.co/). Do you have an idea for
a presentation, lightning talk, code review or any other activity? Let us know
until March, 1 2019 by filling out this form:

* [https://goo.gl/forms/btBm0tInUp25XdUi2](https://goo.gl/forms/btBm0tInUp25XdUi2)

You can also send us ideas by [email](mailto:martin.czygan@gmail.com)!

For some inspiration, there is a [list of
topics](https://golangleipzig.space/posts/meetup-launched/), we discussed at
the first meetup.

See you there!




================================================
FILE: posts/second-meetup-invitation.md
================================================
---
title: "Second meetup invitation"
date: 2019-03-15T15:20:00+01:00
draft: false
tags:
- announcement
- meetup
---

For our [second meetup](https://www.meetup.com/Leipzig-Golang/events/259045114/) tonight, we have two lighting talk proposals:

* Turn data into Go struct - how to easily work with complex XML documents and JSON data with Go
* Glance at the [io package](https://golang.org/pkg/io/) and some io.Reader implementation, that you may not
  have seen before - how to implement your own reader and some examples of
useful (sometimes strange) implementations from existing projects

Please bring your own code, projects, ideas, Go and Cloud-Native questions and let's discuss them. See you there.





================================================
FILE: posts/second-meetup-wrapup.md
================================================
---
title: "Second meetup wrap-up"
date: 2019-03-16T13:15:00+01:00
draft: false
tags:
- summary
- meetup
---

Our [second
meetup](https://www.meetup.com/Leipzig-Golang/events/259045114/) took
place yesterday (2019-03-15) at [Basislager Leipzig](https://www.basislager.co), here's a
short wrap-up:

1. [miku](https://github.com/miku) gave a lightning talk about generating
   Go structs from JSON and XML documents, e.g. via
[JSONGen](https://github.com/bemasher/JSONGen) or
[zek](https://github.com/miku/zek). Code generation is not perfect, but can
save you time.

2. [Michael](https://www.meetup.com/Leipzig-Golang/members/201296430)
   [presented](https://speakerdeck.com/embano1/concurrency-bugs-in-go-go-meetup-leipzig-03-15-2019-gasch) the paper [Understanding Real-World Concurrency Bugs in
Go](https://songlh.github.io/paper/go-study.pdf), which compares bug classes by
analyzing popular open source projects like
[BoltDB](https://github.com/etcd-io/bbolt),
[etcd](https://github.com/etcd-io/etcd), [Docker](https://github.com/docker)
and [Kubernetes](https://kubernetes.io/). Did you know that some concurrency
bugs stay undetected for months, [even
years](https://speakerdeck.com/embano1/concurrency-bugs-in-go-go-meetup-leipzig-03-15-2019-gasch?slide=10)?
While message passing does not make multithreaded programs less-error prone, it
can still offer a clean form of inter-thread communication.

3. Staying on the topic of concurrency, we reviewed a classic, concurrent
   producer-consumer problem, translated into Go by
[Michael](https://github.com/panzerdev). In less than [150 lines of
code](https://gist.github.com/panzerdev/cf8278b346770814088c006643f9bfd1) is it
possible to write an auto-scaling worker-pool with retries that is using [Redis](https://redis.io/)
as backing store. An alternative to spawning goroutines for every task is to
feed a fixed number of workers through a channel (where work is distributed
round-robin to workers). Both designs work, but we were unsure about some
performance implications - we'll briefly report on new findings at the next
meetup.

Apart from these topics, Go and Cloud-Native topics offer plenty of room for
discussions: the field is moving fast, while a popular implementation language
for [CN projects](https://landscape.cncf.io/) - Go - [stays boring](https://golang.org/doc/go1.12):

> **Changes to the language**
>
> There are no changes to the language specification.

If you have an idea for a lightning talk or presentation, or if you already use
Go or Cloud-Native technologies, we love to hear real-world insights, just ping us on
[meetup](https://www.meetup.com/Leipzig-Golang/),
[github](https://github.com/golang-leipzig) or via
[e-mail](mailto:martin.czygan@gmail.com).

Thanks for dropping by!

{{< h2 >}}References{{< /h2 >}}

### Code generation

* JSON, [JSONGen](https://github.com/bemasher/JSONGen), [online version, json-to-go](https://mholt.github.io/json-to-go/)
* XML, [zek](https://github.com/miku/zek), [online version, xmltogo](https://blog.kowalczyk.info/xmltogo/)

### Concurrency bugs

* [Lightning Talk Slides](https://speakerdeck.com/embano1/concurrency-bugs-in-go-go-meetup-leipzig-03-15-2019-gasch)
* [Understanding Real-World Concurrency Bugs in Go](https://songlh.github.io/paper/go-study.pdf) (2019)
* Book recommendation: [Concurrency in Go](https://www.oreilly.com/library/view/concurrency-in-go/9781491941294/) (2017)

### Worker pools

* [Topic based Worker with Redis example](https://gist.github.com/panzerdev/cf8278b346770814088c006643f9bfd1)

### Misc

* [Go package management](https://github.com/golang/go/wiki/PackageManagementTools) - we plan to have a [Go modules](https://github.com/golang/go/wiki/Modules) deep dive at the April 2019 meetup.
* Meeting forms: [lean coffee](http://leancoffee.org/).
* Video: [GOTO 2018 • Old Is the New New • Kevlin Henney](https://www.youtube.com/watch?v=AbgsfeGvg3E) (2018) - Fundamentals.
* Channel: [computerphile](https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA) - Videos all about computers and computer stuff. Sister channel of Numberphile.

Now defunkt company [Basho](https://en.wikipedia.org/wiki/Basho_Technologies),
creators of database technology (RIAK) had a format, similar to [papers we
love](https://paperswelove.org/), but their video recordings seem to be lost.
If you have happen to have a copy, please consider contacting us :)

* A classic tool: [sed](https://www.gnu.org/software/sed/manual/sed.html) -- a stream editor (1974).
* Book recommendation: [Designing Data-Intensive
  Applications](https://dataintensive.net/) (2017);
[avro](https://en.wikipedia.org/wiki/Apache_Avro); [Pat
Helland](https://dblp.uni-trier.de/pers/hd/h/Helland:Pat), author of [Building
on Quicksand](http://db.cs.berkeley.edu/cs286/papers/quicksand-cidr2009.pdf) (2009).




================================================
FILE: posts/software-craft-state-of-go-2022.md
================================================
---
title: "State of Go at Leipzig Software Craft June 2022 Meetup"
date: 2022-06-10T00:12:00+02:00
draft: false
tags:
- meetup
- talk
---

We will be talking about the [State of Go in
2022](https://www.meetup.com/le-software-craft-community/events/286403431/) at
the classic and incredible [Leipzig Software Craft
Meetup](https://www.meetup.com/de-DE/LE-software-craft-community/) (née
Softwerkskammer) in June 2022.

Go is [12 years](https://go.dev/blog/12years) old at this point in time. The
last years brought quite a few changes into the Go ecosystem and language and
we want to highlight some of those, specifically:

* Generics
* Go Modules and dependency management
* Ecosystem developments and more …

Who, when and where?

* Speakers: [Andreas Linz](https://www.klingt.net/), [Martin Czygan](https://github.com/miku/)
* Date: Thu, Jun 30, 2022, 19:00 CEST
* Location: [codecentric AG](https://www.codecentric.de/), [August-Bebel-Straße 41](https://www.openstreetmap.org/way/40330854) · Leipzig

Please check the [meetup event
page](https://www.meetup.com/le-software-craft-community/events/286403431/) for
last minute update due to pandemic regulations.

See you there! -- [1535007080150622214](https://twitter.com/maik_toepfer/status/1535007080150622214)

----

Update: The slides can be found [here](https://github.com/golang-leipzig/state-of-go-in-2022/blob/main/Slides.md).

[![](/images/state-of-go-2022-slides.png)](https://github.com/golang-leipzig/state-of-go-in-2022/blob/main/Slides.md)




================================================
FILE: posts/welcome-2021.md
================================================
---
title: "New year, new dates, new logo!"
date: 2021-01-20T22:00:00+02:00
draft: false
tags:
- 2021
---

Thanks everyone for joining our
[meetup](https://www.meetup.com/Leipzig-Golang/) (we currently have 194
members), connecting, sharing experiences and projects in 2020. A positive
side-effect of remote meetups during a pandemic is that people join from all
over the world - we were happy to have people tuning in from South America and
Asia this year.

We expect a remote only meetup for the foreseeable future. So far we [fixed six
dates for 2021](https://www.meetup.com/Leipzig-Golang/events/), and they will
all be on Tuesdays this year. We might add more dates as we go along.

Finally, we have a new, charming, unique [Gopher-Lion](https://github.com/golang-leipzig/leipzig-gopher) mascot - thanks
[Andreas](https://www.klingt.net/) for bringing it alive!

![](/leipzig-gopher.png)



